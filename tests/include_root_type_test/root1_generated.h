// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROOT1_WARCHANT_H_
#define FLATBUFFERS_GENERATED_ROOT1_WARCHANT_H_

#include "flatbuffers/flatbuffers.h"

namespace warchant {

struct Account;

struct Account FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AccountBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Account::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Account::VT_NAME, name);
  }
  AccountBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AccountBuilder &operator=(const AccountBuilder &);
  flatbuffers::Offset<Account> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Account>(end);
    return o;
  }
};

inline flatbuffers::Offset<Account> CreateAccount(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AccountBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Account> CreateAccountDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr) {
  return warchant::CreateAccount(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0);
}

inline const warchant::Account *GetAccount(const void *buf) {
  return flatbuffers::GetRoot<warchant::Account>(buf);
}

inline bool VerifyAccountBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<warchant::Account>(nullptr);
}

inline void FinishAccountBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<warchant::Account> root) {
  fbb.Finish(root);
}

}  // namespace warchant

#endif  // FLATBUFFERS_GENERATED_ROOT1_WARCHANT_H_
