// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library namespace_a.namespace_b;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './namespace_test3_namespace_b_generated.dart' as namespace_b;

class Color {
  final int value;
  const Color._(this.value);

  factory Color.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw new StateError('Invalid value $value for bit flag enum Color');
    }
    return result;
  }

  static Color? _createOrNull(int? value) => 
      value == null ? null : Color.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 0;
  static bool containsValue(int value) => values.containsKey(value);

  static const Color Purple = const Color._(0);
  static const Map<int, Color> values = {
    0: Purple};

  static const fb.Reader<Color> reader = const _ColorReader();

  @override
  String toString() {
    return 'Color{value: $value}';
  }
}

class _ColorReader extends fb.Reader<Color> {
  const _ColorReader();

  @override
  int get size => 1;

  @override
  Color read(fb.BufferContext bc, int offset) =>
      new Color.fromValue(const fb.Int8Reader().read(bc, offset));
}

