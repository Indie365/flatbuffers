// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NAMESPACETEST5_NAMESPACEA_NAMESPACEB_H_
#define FLATBUFFERS_GENERATED_NAMESPACETEST5_NAMESPACEA_NAMESPACEB_H_

#include "flatbuffers/flatbuffers.h"

namespace NamespaceA {
namespace NamespaceB {

struct ColorTestTable;
struct ColorTestTableBuilder;
struct ColorTestTableT;

bool operator==(const ColorTestTableT &lhs, const ColorTestTableT &rhs);
bool operator!=(const ColorTestTableT &lhs, const ColorTestTableT &rhs);

inline const flatbuffers::TypeTable *ColorTestTableTypeTable();

struct ColorTestTableT : public flatbuffers::NativeTable {
  typedef ColorTestTable TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NamespaceA.NamespaceB.ColorTestTableT";
  }
  NamespaceB::Color color;
  ColorTestTableT()
      : color(NamespaceB::Color_Blue) {
  }
};

struct ColorTestTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ColorTestTableT NativeTableType;
  typedef ColorTestTableBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ColorTestTableTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NamespaceA.NamespaceB.ColorTestTable";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COLOR = 4
  };
  NamespaceB::Color color() const {
    return static_cast<NamespaceB::Color>(GetField<int8_t>(VT_COLOR, 2));
  }
  bool mutate_color(NamespaceB::Color _color) {
    return SetField<int8_t>(VT_COLOR, static_cast<int8_t>(_color), 2);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
  ColorTestTableT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ColorTestTableT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ColorTestTable> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ColorTestTableT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ColorTestTableBuilder {
  typedef ColorTestTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_color(NamespaceB::Color color) {
    fbb_.AddElement<int8_t>(ColorTestTable::VT_COLOR, static_cast<int8_t>(color), 2);
  }
  explicit ColorTestTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ColorTestTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ColorTestTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<ColorTestTable> CreateColorTestTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    NamespaceB::Color color = NamespaceB::Color_Blue) {
  ColorTestTableBuilder builder_(_fbb);
  builder_.add_color(color);
  return builder_.Finish();
}

flatbuffers::Offset<ColorTestTable> CreateColorTestTable(flatbuffers::FlatBufferBuilder &_fbb, const ColorTestTableT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const ColorTestTableT &lhs, const ColorTestTableT &rhs) {
  return
      (lhs.color == rhs.color);
}

inline bool operator!=(const ColorTestTableT &lhs, const ColorTestTableT &rhs) {
    return !(lhs == rhs);
}


inline ColorTestTableT *ColorTestTable::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<NamespaceA::NamespaceB::ColorTestTableT> _o = flatbuffers::unique_ptr<NamespaceA::NamespaceB::ColorTestTableT>(new ColorTestTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ColorTestTable::UnPackTo(ColorTestTableT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = color(); _o->color = _e; }
}

inline flatbuffers::Offset<ColorTestTable> ColorTestTable::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ColorTestTableT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateColorTestTable(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ColorTestTable> CreateColorTestTable(flatbuffers::FlatBufferBuilder &_fbb, const ColorTestTableT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ColorTestTableT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _color = _o->color;
  return NamespaceA::NamespaceB::CreateColorTestTable(
      _fbb,
      _color);
}

inline const flatbuffers::TypeTable *ColorTestTableTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    NamespaceB::ColorTypeTable
  };
  static const char * const names[] = {
    "color"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace NamespaceB
}  // namespace NamespaceA

#endif  // FLATBUFFERS_GENERATED_NAMESPACETEST5_NAMESPACEA_NAMESPACEB_H_
