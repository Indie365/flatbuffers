// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Color } from '../../namespace-b/color';


export class ColorTestTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ColorTestTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColorTestTable(bb:flatbuffers.ByteBuffer, obj?:ColorTestTable):ColorTestTable {
  return (obj || new ColorTestTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColorTestTable(bb:flatbuffers.ByteBuffer, obj?:ColorTestTable):ColorTestTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ColorTestTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

color():Color {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Color.Blue;
}

mutate_color(value:Color):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
}

static getFullyQualifiedName():string {
  return 'NamespaceA.NamespaceB.ColorTestTable';
}

static startColorTestTable(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addColor(builder:flatbuffers.Builder, color:Color) {
  builder.addFieldInt8(0, color, Color.Blue);
}

static endColorTestTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createColorTestTable(builder:flatbuffers.Builder, color:Color):flatbuffers.Offset {
  ColorTestTable.startColorTestTable(builder);
  ColorTestTable.addColor(builder, color);
  return ColorTestTable.endColorTestTable(builder);
}

unpack(): ColorTestTableT {
  return new ColorTestTableT(
    this.color()
  );
}


unpackTo(_o: ColorTestTableT): void {
  _o.color = this.color();
}
}

export class ColorTestTableT {
constructor(
  public color: Color = Color.Blue
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ColorTestTable.createColorTestTable(builder,
    this.color
  );
}
}
