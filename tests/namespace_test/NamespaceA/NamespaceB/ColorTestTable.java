// automatically generated by the FlatBuffers compiler, do not modify

package NamespaceA.NamespaceB;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ColorTestTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ColorTestTable getRootAsColorTestTable(ByteBuffer _bb) { return getRootAsColorTestTable(_bb, new ColorTestTable()); }
  public static ColorTestTable getRootAsColorTestTable(ByteBuffer _bb, ColorTestTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ColorTestTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte color() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 2; }
  public boolean mutateColor(byte color) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, color); return true; } else { return false; } }

  public static int createColorTestTable(FlatBufferBuilder builder,
      byte color) {
    builder.startTable(1);
    ColorTestTable.addColor(builder, color);
    return ColorTestTable.endColorTestTable(builder);
  }

  public static void startColorTestTable(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addColor(FlatBufferBuilder builder, byte color) { builder.addByte(0, color, 2); }
  public static int endColorTestTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ColorTestTable get(int j) { return get(new ColorTestTable(), j); }
    public ColorTestTable get(ColorTestTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ColorTestTableT unpack() {
    ColorTestTableT _o = new ColorTestTableT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ColorTestTableT _o) {
    byte _oColor = color();
    _o.setColor(_oColor);
  }
  public static int pack(FlatBufferBuilder builder, ColorTestTableT _o) {
    if (_o == null) return 0;
    return createColorTestTable(
      builder,
      _o.getColor());
  }
}

