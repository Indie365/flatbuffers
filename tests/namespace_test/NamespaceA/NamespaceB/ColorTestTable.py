# automatically generated by the FlatBuffers compiler, do not modify

# namespace: NamespaceB

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ColorTestTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ColorTestTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsColorTestTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ColorTestTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ColorTestTable
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

def Start(builder): builder.StartObject(1)
def ColorTestTableStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddColor(builder, color): builder.PrependInt8Slot(0, color, 2)
def ColorTestTableAddColor(builder, color):
    """This method is deprecated. Please switch to AddColor."""
    return AddColor(builder, color)
def End(builder): return builder.EndObject()
def ColorTestTableEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class ColorTestTableT(object):

    # ColorTestTableT
    def __init__(self):
        self.color = 2  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        colorTestTable = ColorTestTable()
        colorTestTable.Init(buf, pos)
        return cls.InitFromObj(colorTestTable)

    @classmethod
    def InitFromObj(cls, colorTestTable):
        x = ColorTestTableT()
        x._UnPack(colorTestTable)
        return x

    # ColorTestTableT
    def _UnPack(self, colorTestTable):
        if colorTestTable is None:
            return
        self.color = colorTestTable.Color()

    # ColorTestTableT
    def Pack(self, builder):
        Start(builder)
        AddColor(builder, self.color)
        colorTestTable = End(builder)
        return colorTestTable
