// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package NamespaceB

import (
	flatbuffers "github.com/google/flatbuffers/go"

	NamespaceB "NamespaceB"
)

type ColorTestTableT struct {
	Color NamespaceB.Color
}

func (t *ColorTestTableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ColorTestTableStart(builder)
	ColorTestTableAddColor(builder, t.Color)
	return ColorTestTableEnd(builder)
}

func (rcv *ColorTestTable) UnPackTo(t *ColorTestTableT) {
	t.Color = rcv.Color()
}

func (rcv *ColorTestTable) UnPack() *ColorTestTableT {
	if rcv == nil { return nil }
	t := &ColorTestTableT{}
	rcv.UnPackTo(t)
	return t
}

type ColorTestTable struct {
	_tab flatbuffers.Table
}

func GetRootAsColorTestTable(buf []byte, offset flatbuffers.UOffsetT) *ColorTestTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ColorTestTable{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsColorTestTable(buf []byte, offset flatbuffers.UOffsetT) *ColorTestTable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ColorTestTable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ColorTestTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColorTestTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ColorTestTable) Color() NamespaceB.Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return NamespaceB.Color(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

func (rcv *ColorTestTable) MutateColor(n NamespaceB.Color) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func ColorTestTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ColorTestTableAddColor(builder *flatbuffers.Builder, color NamespaceB.Color) {
	builder.PrependInt8Slot(0, int8(color), 2)
}
func ColorTestTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
