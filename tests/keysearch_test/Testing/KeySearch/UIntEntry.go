// automatically generated by the FlatBuffers compiler, do not modify

package KeySearch

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UIntEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsUIntEntry(buf []byte, offset flatbuffers.UOffsetT) *UIntEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UIntEntry{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UIntEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UIntEntry) Key() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UIntEntry) MutateKey(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *UIntEntry) Value() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 4294967295
}

func (rcv *UIntEntry) MutateValue(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func UIntEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UIntEntryAddKey(builder *flatbuffers.Builder, key uint32) {
	builder.PrependUint32Slot(0, key, 0)
}
func UIntEntryAddValue(builder *flatbuffers.Builder, value uint32) {
	builder.PrependUint32Slot(1, value, 4294967295)
}
func UIntEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
