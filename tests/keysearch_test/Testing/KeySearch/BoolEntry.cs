// automatically generated by the FlatBuffers compiler, do not modify

namespace Testing.KeySearch
{

using System;
using FlatBuffers;

public struct BoolEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BoolEntry GetRootAsBoolEntry(ByteBuffer _bb) { return GetRootAsBoolEntry(_bb, new BoolEntry()); }
  public static BoolEntry GetRootAsBoolEntry(ByteBuffer _bb, BoolEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public BoolEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Key { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateKey(bool key) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(key ? 1 : 0)); return true; } else { return false; } }
  public bool Value { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateValue(bool value) { int o = __p.__offset(6); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(value ? 1 : 0)); return true; } else { return false; } }

  public static Offset<BoolEntry> CreateBoolEntry(FlatBufferBuilder builder,
      bool key = false,
      bool value = true) {
    builder.StartObject(2);
    BoolEntry.AddValue(builder, value);
    BoolEntry.AddKey(builder, key);
    return BoolEntry.EndBoolEntry(builder);
  }

  public static void StartBoolEntry(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddKey(FlatBufferBuilder builder, bool key) { builder.AddBool(0, key, false); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(1, value, true); }
  public static Offset<BoolEntry> EndBoolEntry(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BoolEntry>(o);
  }

  public static VectorOffset CreateMySortedVectorOfTables(FlatBufferBuilder builder, Offset<BoolEntry>[] offsets) {
    Array.Sort(offsets, (Offset<BoolEntry> o1, Offset<BoolEntry> o2) => builder.DataBuffer=__p.bb.Get(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer=__p.bb.Get(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static BoolEntry? LookupByKey(VectorOffset vectorOffset, bool key, ByteBuffer bb) {
    int vectorLocation = bb.Length - vectorOffset.Value;
    int span = bb.GetInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = 0!=__p.bb.Get(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new BoolEntry().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
