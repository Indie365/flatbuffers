// automatically generated by the FlatBuffers compiler, do not modify

namespace Testing.KeySearch
{

using System;
using FlatBuffers;

public struct StringEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StringEntry GetRootAsStringEntry(ByteBuffer _bb) { return GetRootAsStringEntry(_bb, new StringEntry()); }
  public static StringEntry GetRootAsStringEntry(ByteBuffer _bb, StringEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public StringEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Key { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
  public int Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)7890; } }
  public bool MutateValue(int value) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, value); return true; } else { return false; } }

  public static Offset<StringEntry> CreateStringEntry(FlatBufferBuilder builder,
      StringOffset keyOffset = default(StringOffset),
      int value = 7890) {
    builder.StartObject(2);
    StringEntry.AddValue(builder, value);
    StringEntry.AddKey(builder, keyOffset);
    return StringEntry.EndStringEntry(builder);
  }

  public static void StartStringEntry(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(1, value, 7890); }
  public static Offset<StringEntry> EndStringEntry(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // key
    return new Offset<StringEntry>(o);
  }

  public static VectorOffset CreateMySortedVectorOfTables(FlatBufferBuilder builder, Offset<StringEntry>[] offsets) {
    Array.Sort(offsets, (Offset<StringEntry> o1, Offset<StringEntry> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static StringEntry? LookupByKey( int bb_pos, VectorOffset fieldDataOffset, string key , ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int vectorLocation = bb.Length - vectorOffset.Value;
    int span = bb.GetInt(vectorLocation);
    vectorLocation += 4;
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new StringEntry().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
