// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ByteEntry extends Table {
  public static ByteEntry getRootAsByteEntry(ByteBuffer _bb) { return getRootAsByteEntry(_bb, new ByteEntry()); }
  public static ByteEntry getRootAsByteEntry(ByteBuffer _bb, ByteEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ByteEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte key() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateKey(byte key) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, key); return true; } else { return false; } }
  public byte value() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : -128; }
  public boolean mutateValue(byte value) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, value); return true; } else { return false; } }

  public static int createByteEntry(FlatBufferBuilder builder,
      byte key,
      byte value) {
    builder.startObject(2);
    ByteEntry.addValue(builder, value);
    ByteEntry.addKey(builder, key);
    return ByteEntry.endByteEntry(builder);
  }

  public static void startByteEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, byte key) { builder.addByte(0, key, 0); }
  public static void addValue(FlatBufferBuilder builder, byte value) { builder.addByte(1, value, -128); }
  public static int endByteEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    byte val_1 = _bb.get(__offset(4, o1, _bb));
    byte val_2 = _bb.get(__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }
}

