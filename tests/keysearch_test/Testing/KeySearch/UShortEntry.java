// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UShortEntry extends Table {
  public static UShortEntry getRootAsUShortEntry(ByteBuffer _bb) { return getRootAsUShortEntry(_bb, new UShortEntry()); }
  public static UShortEntry getRootAsUShortEntry(ByteBuffer _bb, UShortEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UShortEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int key() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateKey(int key) { int o = __offset(4); if (o != 0) { bb.putShort(o + bb_pos, (short)key); return true; } else { return false; } }
  public int value() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 65535; }
  public boolean mutateValue(int value) { int o = __offset(6); if (o != 0) { bb.putShort(o + bb_pos, (short)value); return true; } else { return false; } }

  public static int createUShortEntry(FlatBufferBuilder builder,
      int key,
      int value) {
    builder.startObject(2);
    UShortEntry.addValue(builder, value);
    UShortEntry.addKey(builder, key);
    return UShortEntry.endUShortEntry(builder);
  }

  public static void startUShortEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, int key) { builder.addShort(0, (short)key, (short)0); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addShort(1, (short)value, (short)65535); }
  public static int endUShortEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    short val_1 = _bb.getShort(__offset(4, o1, _bb));
    short val_2 = _bb.getShort(__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }
}

