// automatically generated by the FlatBuffers compiler, do not modify

namespace Testing.KeySearch
{

using System;
using FlatBuffers;

public struct ByteEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ByteEntry GetRootAsByteEntry(ByteBuffer _bb) { return GetRootAsByteEntry(_bb, new ByteEntry()); }
  public static ByteEntry GetRootAsByteEntry(ByteBuffer _bb, ByteEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ByteEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)-128; } }
  public bool MutateKey(sbyte key) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, key); return true; } else { return false; } }
  public sbyte Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)-128; } }
  public bool MutateValue(sbyte value) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, value); return true; } else { return false; } }

  public static Offset<ByteEntry> CreateByteEntry(FlatBufferBuilder builder,
      sbyte key = -128,
      sbyte value = -128) {
    builder.StartObject(2);
    ByteEntry.AddValue(builder, value);
    ByteEntry.AddKey(builder, key);
    return ByteEntry.EndByteEntry(builder);
  }

  public static void StartByteEntry(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddKey(FlatBufferBuilder builder, sbyte key) { builder.AddSbyte(0, key, -128); }
  public static void AddValue(FlatBufferBuilder builder, sbyte value) { builder.AddSbyte(1, value, -128); }
  public static Offset<ByteEntry> EndByteEntry(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ByteEntry>(o);
  }

  public static VectorOffset CreateMySortedVectorOfTables(FlatBufferBuilder builder, Offset<ByteEntry>[] offsets) {
    Array.Sort(offsets, (Offset<ByteEntry> o1, Offset<ByteEntry> o2) => builder.DataBufferp.bb.GetSbyte(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBufferp.bb.GetSbyte(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static ByteEntry? LookupByKey(VectorOffset vectorOffset, sbyte key, ByteBuffer bb) {
    int vectorLocation = bb.Length - vectorOffset.Value;
    int span = bb.GetInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = __p.bb.GetSbyte(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new ByteEntry().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
