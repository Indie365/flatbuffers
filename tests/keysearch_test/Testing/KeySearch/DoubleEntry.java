// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DoubleEntry extends Table {
  public static DoubleEntry getRootAsDoubleEntry(ByteBuffer _bb) { return getRootAsDoubleEntry(_bb, new DoubleEntry()); }
  public static DoubleEntry getRootAsDoubleEntry(ByteBuffer _bb, DoubleEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public DoubleEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double key() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean mutateKey(double key) { int o = __offset(4); if (o != 0) { bb.putDouble(o + bb_pos, key); return true; } else { return false; } }
  public double value() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 4567.0; }
  public boolean mutateValue(double value) { int o = __offset(6); if (o != 0) { bb.putDouble(o + bb_pos, value); return true; } else { return false; } }

  public static int createDoubleEntry(FlatBufferBuilder builder,
      double key,
      double value) {
    builder.startObject(2);
    DoubleEntry.addValue(builder, value);
    DoubleEntry.addKey(builder, key);
    return DoubleEntry.endDoubleEntry(builder);
  }

  public static void startDoubleEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, double key) { builder.addDouble(0, key, 0.0); }
  public static void addValue(FlatBufferBuilder builder, double value) { builder.addDouble(1, value, 4567.0); }
  public static int endDoubleEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    double val_1 = _bb.getDouble(__offset(4, o1, _bb));
    double val_2 = _bb.getDouble(__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static DoubleEntry lookupByKey(int vectorOffset, double key, ByteBuffer bb) {
    int vectorLocation = bb.array().length - vectorOffset;
    int span = bb.getInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      double val = bb.getDouble(__offset(4, bb.array().length - tableOffset, bb));
      int comp = val > key ? 1 : val < key ? -1 : 0;
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new DoubleEntry().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

