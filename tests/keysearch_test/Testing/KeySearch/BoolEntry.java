// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BoolEntry extends Table {
  public static BoolEntry getRootAsBoolEntry(ByteBuffer _bb) { return getRootAsBoolEntry(_bb, new BoolEntry()); }
  public static BoolEntry getRootAsBoolEntry(ByteBuffer _bb, BoolEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public BoolEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean key() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateKey(boolean key) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, (byte)(key ? 1 : 0)); return true; } else { return false; } }
  public boolean value() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateValue(boolean value) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte)(value ? 1 : 0)); return true; } else { return false; } }

  public static int createBoolEntry(FlatBufferBuilder builder,
      boolean key,
      boolean value) {
    builder.startObject(2);
    BoolEntry.addValue(builder, value);
    BoolEntry.addKey(builder, key);
    return BoolEntry.endBoolEntry(builder);
  }

  public static void startBoolEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, boolean key) { builder.addBoolean(0, key, false); }
  public static void addValue(FlatBufferBuilder builder, boolean value) { builder.addBoolean(1, value, true); }
  public static int endBoolEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    byte val_1 = _bb.get(o1+__offset(4, o1, _bb));
    byte val_2 = _bb.get(o2+__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static int lookupByKey( int bb_pos, int fieldDataOffset, boolean key, boolean defaultKeyValue , ByteBuffer bb) {
    if ( fieldDataOffset == 0 )
        return 0;
    int vectorOffsetPos = bb_pos + fieldDataOffset;
    int vectorLocation = bb.getInt( vectorOffsetPos ) + vectorOffsetPos;
    int span = bb.getInt(vectorLocation);
    vectorLocation += 4;
    byte comparableKey =  key ? (byte)1 : (byte)0;
    byte comparableDefault = defaultKeyValue ? (byte)1 : (byte)0;
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int keyValueOffset = __offset( 4, tableOffset, bb );
      byte val = keyValueOffset != 0 ? bb.get(tableOffset + keyValueOffset) : comparableDefault;
      if (comparableKey < val) {
        span = middle;
      } else if (comparableKey > val) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return tableOffset;
      }
    }
    return 0;
  }
}

