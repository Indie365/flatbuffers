// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class StringEntry extends Table {
  public static StringEntry getRootAsStringEntry(ByteBuffer _bb) { return getRootAsStringEntry(_bb, new StringEntry()); }
  public static StringEntry getRootAsStringEntry(ByteBuffer _bb, StringEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public StringEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String key() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public int value() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 7890; }
  public boolean mutateValue(int value) { int o = __offset(6); if (o != 0) { bb.putInt(o + bb_pos, value); return true; } else { return false; } }

  public static int createStringEntry(FlatBufferBuilder builder,
      int keyOffset,
      int value) {
    builder.startObject(2);
    StringEntry.addValue(builder, value);
    StringEntry.addKey(builder, keyOffset);
    return StringEntry.endStringEntry(builder);
  }

  public static void startStringEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addInt(1, value, 7890); }
  public static int endStringEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // key
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(o1+__offset(4, o1, _bb), o2+__offset(4, o2, _bb), _bb); }
}

