// automatically generated by the FlatBuffers compiler, do not modify

namespace Testing.KeySearch
{

using System;
using FlatBuffers;

public struct ShortEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ShortEntry GetRootAsShortEntry(ByteBuffer _bb) { return GetRootAsShortEntry(_bb, new ShortEntry()); }
  public static ShortEntry GetRootAsShortEntry(ByteBuffer _bb, ShortEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ShortEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)-32768; } }
  public bool MutateKey(short key) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutShort(o + __p.bb_pos, key); return true; } else { return false; } }
  public short Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)-32768; } }
  public bool MutateValue(short value) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutShort(o + __p.bb_pos, value); return true; } else { return false; } }

  public static Offset<ShortEntry> CreateShortEntry(FlatBufferBuilder builder,
      short key = -32768,
      short value = -32768) {
    builder.StartObject(2);
    ShortEntry.AddValue(builder, value);
    ShortEntry.AddKey(builder, key);
    return ShortEntry.EndShortEntry(builder);
  }

  public static void StartShortEntry(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddKey(FlatBufferBuilder builder, short key) { builder.AddShort(0, key, -32768); }
  public static void AddValue(FlatBufferBuilder builder, short value) { builder.AddShort(1, value, -32768); }
  public static Offset<ShortEntry> EndShortEntry(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ShortEntry>(o);
  }

  public static VectorOffset CreateMySortedVectorOfTables(FlatBufferBuilder builder, Offset<ShortEntry>[] offsets) {
    Array.Sort(offsets, (Offset<ShortEntry> o1, Offset<ShortEntry> o2) => builder.DataBufferp.bb.GetShort(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBufferp.bb.GetShort(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static ShortEntry? LookupByKey( int bb_pos, VectorOffset fieldDataOffset, short key, short defaultKeyValue , ByteBuffer bb) {
    int vectorLocation = bb.Length - vectorOffset.Value;
    int span = bb.GetInt(vectorLocation);
    vectorLocation += 4;
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = __p.bb.GetShort(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new ShortEntry().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
