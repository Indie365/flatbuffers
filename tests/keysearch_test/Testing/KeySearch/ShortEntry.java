// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ShortEntry extends Table {
  public static ShortEntry getRootAsShortEntry(ByteBuffer _bb) { return getRootAsShortEntry(_bb, new ShortEntry()); }
  public static ShortEntry getRootAsShortEntry(ByteBuffer _bb, ShortEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public ShortEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short key() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : -32768; }
  public boolean mutateKey(short key) { int o = __offset(4); if (o != 0) { bb.putShort(o + bb_pos, key); return true; } else { return false; } }
  public short value() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : -32768; }
  public boolean mutateValue(short value) { int o = __offset(6); if (o != 0) { bb.putShort(o + bb_pos, value); return true; } else { return false; } }

  public static int createShortEntry(FlatBufferBuilder builder,
      short key,
      short value) {
    builder.startObject(2);
    ShortEntry.addValue(builder, value);
    ShortEntry.addKey(builder, key);
    return ShortEntry.endShortEntry(builder);
  }

  public static void startShortEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, short key) { builder.addShort(0, key, -32768); }
  public static void addValue(FlatBufferBuilder builder, short value) { builder.addShort(1, value, -32768); }
  public static int endShortEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    short val_1 = _bb.getShort(o1+__offset(4, o1, _bb));
    short val_2 = _bb.getShort(o2+__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static int lookupByKey( int bb_pos, int fieldDataOffset, short key, short defaultKeyValue , ByteBuffer bb) {
    if ( fieldDataOffset == 0 )
        return 0;
    int vectorOffsetPos = bb_pos + fieldDataOffset;
    int vectorLocation = bb.getInt( vectorOffsetPos ) + vectorOffsetPos;
    int span = bb.getInt(vectorLocation);
    vectorLocation += 4;
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int keyValueOffset = __offset( 4, tableOffset, bb );
      short val = keyValueOffset != 0 ? bb.getShort(tableOffset + keyValueOffset) : defaultKeyValue;
      if (key < val) {
        span = middle;
      } else if (key > val) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return tableOffset;
      }
    }
    return 0;
  }
}

