// automatically generated by the FlatBuffers compiler, do not modify

package KeySearch

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ULongEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsULongEntry(buf []byte, offset flatbuffers.UOffsetT) *ULongEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ULongEntry{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ULongEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ULongEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ULongEntry) Key() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ULongEntry) MutateKey(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ULongEntry) Value() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 9223372036854775807
}

func (rcv *ULongEntry) MutateValue(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func ULongEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ULongEntryAddKey(builder *flatbuffers.Builder, key uint64) {
	builder.PrependUint64Slot(0, key, 0)
}
func ULongEntryAddValue(builder *flatbuffers.Builder, value uint64) {
	builder.PrependUint64Slot(1, value, 9223372036854775807)
}
func ULongEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
