// automatically generated by the FlatBuffers compiler, do not modify

package Testing.KeySearch;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UByteEntry extends Table {
  public static UByteEntry getRootAsUByteEntry(ByteBuffer _bb) { return getRootAsUByteEntry(_bb, new UByteEntry()); }
  public static UByteEntry getRootAsUByteEntry(ByteBuffer _bb, UByteEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public UByteEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int key() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateKey(int key) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, (byte)key); return true; } else { return false; } }
  public int value() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 255; }
  public boolean mutateValue(int value) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte)value); return true; } else { return false; } }

  public static int createUByteEntry(FlatBufferBuilder builder,
      int key,
      int value) {
    builder.startObject(2);
    UByteEntry.addValue(builder, value);
    UByteEntry.addKey(builder, key);
    return UByteEntry.endUByteEntry(builder);
  }

  public static void startUByteEntry(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addKey(FlatBufferBuilder builder, int key) { builder.addByte(0, (byte)key, (byte)0); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addByte(1, (byte)value, (byte)255); }
  public static int endUByteEntry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    byte val_1 = _bb.get(o1+__offset(4, o1, _bb));
    byte val_2 = _bb.get(o2+__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static int lookupByKey( int bb_pos, int fieldDataOffset, int key, int defaultKeyValue , ByteBuffer bb) {
    if ( fieldDataOffset == 0 )
        return 0;
    int vectorOffsetPos = bb_pos + fieldDataOffset;
    int vectorLocation = bb.getInt( vectorOffsetPos ) + vectorOffsetPos;
    int span = bb.getInt(vectorLocation);
    vectorLocation += 4;
    int comparableKey = Unsigneds.asComparable( (byte) key );
    int comparableDefault = Unsigneds.asComparable( (byte)defaultKeyValue );
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int keyValueOffset = __offset( 4, tableOffset, bb );
      int val = keyValueOffset != 0 ? Unsigneds.asComparable( bb.get(tableOffset + keyValueOffset) ): comparableDefault;
      if (comparableKey < val) {
        span = middle;
      } else if (comparableKey > val) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return tableOffset;
      }
    }
    return 0;
  }
}

