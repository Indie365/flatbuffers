// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

@_implementationOnly import FlatBuffers

internal enum TestEnum: Int16, Enum, Verifiable {
  internal typealias T = Int16
  internal static var byteSize: Int { return MemoryLayout<Int16>.size }
  internal var value: Int16 { return self.rawValue }
  case fooBar = 0
  case barBaz = 1
  case snakeCase = 2
  case camelCase = 3

  internal static var max: TestEnum { return .camelCase }
  internal static var min: TestEnum { return .fooBar }
}

extension TestEnum: Encodable {
  internal func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
    case .fooBar: try container.encode("FooBar")
    case .barBaz: try container.encode("BarBaz")
    case .snakeCase: try container.encode("snake_case")
    case .camelCase: try container.encode("camelCase")
    }
  }
}

internal enum TestEnumLegacy: Int16, Enum, Verifiable {
  internal typealias T = Int16
  internal static var byteSize: Int { return MemoryLayout<Int16>.size }
  internal var value: Int16 { return self.rawValue }
  case foobar = 0
  case barbaz = 1
  case snakeCase = 2
  case camelCase = 3

  internal static var max: TestEnumLegacy { return .camelCase }
  internal static var min: TestEnumLegacy { return .foobar }
}

extension TestEnumLegacy: Encodable {
  internal func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
    case .foobar: try container.encode("FooBar")
    case .barbaz: try container.encode("BarBaz")
    case .snakeCase: try container.encode("snake_case")
    case .camelCase: try container.encode("camelCase")
    }
  }
}

