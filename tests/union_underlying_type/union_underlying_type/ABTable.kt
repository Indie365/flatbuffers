// automatically generated by the FlatBuffers compiler, do not modify

package union_underlying_type

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class ABTable : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ABTable {
        __init(_i, _bb)
        return this
    }
    val abType : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateAbType(abType: Int) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.putInt(o + bb_pos, abType)
            true
        } else {
            false
        }
    }
    fun ab(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsABTable(_bb: ByteBuffer): ABTable = getRootAsABTable(_bb, ABTable())
        fun getRootAsABTable(_bb: ByteBuffer, obj: ABTable): ABTable {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createABTable(builder: FlatBufferBuilder, abType: Int, abOffset: Int) : Int {
            builder.startTable(2)
            addAb(builder, abOffset)
            addAbType(builder, abType)
            return endABTable(builder)
        }
        fun startABTable(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addAbType(builder: FlatBufferBuilder, abType: Int) = builder.addInt(0, abType, 0)
        fun addAb(builder: FlatBufferBuilder, ab: Int) = builder.addOffset(1, ab, 0)
        fun endABTable(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishABTableBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedABTableBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
