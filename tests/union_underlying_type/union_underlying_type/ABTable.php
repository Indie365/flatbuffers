<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace union_underlying_type;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class ABTable extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ABTable
     */
    public static function getRootAsABTable(ByteBuffer $bb)
    {
        $obj = new ABTable();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ABTable
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function getAbType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : \union_underlying_type\AB::NONE;
    }

    /**
     * @returnint
     */
    public function getAb($obj)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startABTable(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ABTable
     */
    public static function createABTable(FlatBufferBuilder $builder, $ab_type, $ab)
    {
        $builder->startObject(2);
        self::addAbType($builder, $ab_type);
        self::addAb($builder, $ab);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAbType(FlatBufferBuilder $builder, $abType)
    {
        $builder->addIntX(0, $abType, 0);
    }

    public static function addAb(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(1, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endABTable(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishABTableBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset);
    }
}
