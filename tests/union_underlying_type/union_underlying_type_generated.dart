// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ABTypeId {
  final int value;
  const ABTypeId._(this.value);

  factory ABTypeId.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw new StateError('Invalid value $value for bit flag enum ABTypeId');
    }
    return result;
  }

  static ABTypeId? _createOrNull(int? value) => 
      value == null ? null : ABTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const ABTypeId NONE = const ABTypeId._(0);
  static const ABTypeId A = const ABTypeId._(1);
  static const ABTypeId B = const ABTypeId._(2);
  static const Map<int, ABTypeId> values = {
    0: NONE,
    1: A,
    2: B};

  static const fb.Reader<ABTypeId> reader = const _ABTypeIdReader();

  @override
  String toString() {
    return 'ABTypeId{value: $value}';
  }
}

class _ABTypeIdReader extends fb.Reader<ABTypeId> {
  const _ABTypeIdReader();

  @override
  int get size => 1;

  @override
  ABTypeId read(fb.BufferContext bc, int offset) =>
      new ABTypeId.fromValue(const fb.Int32Reader().read(bc, offset));
}

class A {
  A._(this._bc, this._bcOffset);
  factory A(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<A> reader = const _AReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'A{}';
  }

  AT unpack() => AT();

  static int pack(fb.Builder fbBuilder, AT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AT {
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(0);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AT{}';
  }
}

class _AReader extends fb.TableReader<A> {
  const _AReader();

  @override
  A createObject(fb.BufferContext bc, int offset) => 
    new A._(bc, offset);
}

class AObjectBuilder extends fb.ObjectBuilder {

  AObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(0);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder(deduplicateTables: false);
    int offset = finish(fbBuilder);
    fbBuilder.finish(offset, fileIdentifier);
    return fbBuilder.buffer;
  }
}
class B {
  B._(this._bc, this._bcOffset);
  factory B(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<B> reader = const _BReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'B{}';
  }

  BT unpack() => BT();

  static int pack(fb.Builder fbBuilder, BT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BT {
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(0);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BT{}';
  }
}

class _BReader extends fb.TableReader<B> {
  const _BReader();

  @override
  B createObject(fb.BufferContext bc, int offset) => 
    new B._(bc, offset);
}

class BObjectBuilder extends fb.ObjectBuilder {

  BObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(0);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder(deduplicateTables: false);
    int offset = finish(fbBuilder);
    fbBuilder.finish(offset, fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ABTable {
  ABTable._(this._bc, this._bcOffset);
  factory ABTable(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ABTable> reader = const _ABTableReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ABTypeId? get abType => ABTypeId._createOrNull(const fb.Int32Reader().vTableGetNullable(_bc, _bcOffset, 4));
  dynamic? get ab {
    switch (abType?.value) {
      case 1: return A.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 2: return B.reader.vTableGetNullable(_bc, _bcOffset, 6);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'ABTable{abType: $abType, ab: $ab}';
  }

  ABTableT unpack() => ABTableT(
      abType: abType,
      ab: ab);

  static int pack(fb.Builder fbBuilder, ABTableT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ABTableT {
  ABTypeId? abType;
  dynamic? ab;

  ABTableT({
      this.abType,
      this.ab});

  int pack(fb.Builder fbBuilder) {
    final int? abOffset = ab?.pack(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, abType?.value);
    fbBuilder.addOffset(1, abOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ABTableT{abType: $abType, ab: $ab}';
  }
}

class _ABTableReader extends fb.TableReader<ABTable> {
  const _ABTableReader();

  @override
  ABTable createObject(fb.BufferContext bc, int offset) => 
    new ABTable._(bc, offset);
}

class ABTableBuilder {
  ABTableBuilder(this.fbBuilder) {}

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addAbType(ABTypeId? abType) {
    fbBuilder.addInt32(0, abType?.value);
    return fbBuilder.offset;
  }
  int addAbOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ABTableObjectBuilder extends fb.ObjectBuilder {
  final ABTypeId? _abType;
  final dynamic? _ab;

  ABTableObjectBuilder({
    ABTypeId? abType,
    dynamic? ab,
  })
      : _abType = abType,
        _ab = ab;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? abOffset = _ab?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _abType?.value);
    fbBuilder.addOffset(1, abOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder(deduplicateTables: false);
    int offset = finish(fbBuilder);
    fbBuilder.finish(offset, fileIdentifier);
    return fbBuilder.buffer;
  }
}
