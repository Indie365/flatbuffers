// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AB : int
{
  NONE = 0,
  A = 1,
  B = 2,
};

public class ABUnion {
  public AB Type { get; set; }
  public object Value { get; set; }

  public ABUnion() {
    this.Type = AB.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public AT AsA() { return this.As<AT>(); }
  public static ABUnion FromA(AT _a) { return new ABUnion{ Type = AB.A, Value = _a }; }
  public BT AsB() { return this.As<BT>(); }
  public static ABUnion FromB(BT _b) { return new ABUnion{ Type = AB.B, Value = _b }; }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ABUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case AB.A: return A.Pack(builder, _o.AsA()).Value;
      case AB.B: return B.Pack(builder, _o.AsB()).Value;
    }
  }
}

public class ABUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ABUnion) || objectType == typeof(System.Collections.Generic.List<ABUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ABUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ABUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ABUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ABUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ABUnion, serializer);
    }
  }
  public ABUnion ReadJson(Newtonsoft.Json.JsonReader reader, ABUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case AB.A: _o.Value = serializer.Deserialize<AT>(reader); break;
      case AB.B: _o.Value = serializer.Deserialize<BT>(reader); break;
    }
    return _o;
  }
}

