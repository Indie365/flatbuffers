// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class B {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):B {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsB(bb:flatbuffers.ByteBuffer, obj?:B):B {
  return (obj || new B()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsB(bb:flatbuffers.ByteBuffer, obj?:B):B {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new B()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getFullyQualifiedName():string {
  return 'B';
}

static startB(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endB(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createB(builder:flatbuffers.Builder):flatbuffers.Offset {
  B.startB(builder);
  return B.endB(builder);
}

unpack(): BT {
  return new BT();
}


unpackTo(_o: BT): void {}
}

export class BT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return B.createB(builder);
}
}
