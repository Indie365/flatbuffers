// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ABTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ABTable getRootAsABTable(ByteBuffer _bb) { return getRootAsABTable(_bb, new ABTable()); }
  public static ABTable getRootAsABTable(ByteBuffer _bb, ABTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ABTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int abType() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Table ab(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createABTable(FlatBufferBuilder builder,
      int abType,
      int abOffset) {
    builder.startTable(2);
    ABTable.addAb(builder, abOffset);
    ABTable.addAbType(builder, abType);
    return ABTable.endABTable(builder);
  }

  public static void startABTable(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addAbType(FlatBufferBuilder builder, int abType) { builder.addInt(0, abType, 0); }
  public static void addAb(FlatBufferBuilder builder, int abOffset) { builder.addOffset(1, abOffset, 0); }
  public static int endABTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishABTableBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedABTableBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ABTable get(int j) { return get(new ABTable(), j); }
    public ABTable get(ABTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ABTableT unpack() {
    ABTableT _o = new ABTableT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ABTableT _o) {
    int _oAbType = abType();
    _o.setAbType(_oAbType);
    ABUnion _oAb = new ABUnion();
    int _oAbType = abType();
    _oAb.setType(_oAbType);
    Table _oAbValue;
    switch (_oAbType) {
      case AB.A:
        _oAbValue = ab(new A());
        _oAb.setValue(_oAbValue != null ? ((A) _oAbValue).unpack() : null);
        break;
      case AB.B:
        _oAbValue = ab(new B());
        _oAb.setValue(_oAbValue != null ? ((B) _oAbValue).unpack() : null);
        break;
      default: break;
    }
    _o.setAb(_oAb);
  }
  public static int pack(FlatBufferBuilder builder, ABTableT _o) {
    if (_o == null) return 0;
    int _abType = _o.getAb() == null ? AB.NONE : _o.getAb().getType();
    int _ab = _o.getAb() == null ? 0 : ABUnion.pack(builder, _o.getAb());
    return createABTable(
      builder,
      _o.getAbType(),
      _ab);
  }
}

