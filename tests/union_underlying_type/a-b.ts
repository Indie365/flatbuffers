// automatically generated by the FlatBuffers compiler, do not modify

import { A, AT } from './a';
import { B, BT } from './b';


export enum AB{
  NONE = 0,
  A = 1,
  B = 2
}

export function unionToAB(
  type: AB,
  accessor: (obj:A|B) => A|B|null
): A|B|null {
  switch(AB[type]) {
    case 'NONE': return null; 
    case 'A': return accessor(new A())! as A;
    case 'B': return accessor(new B())! as B;
    default: return null;
  }
}

export function unionListToAB(
  type: AB, 
  accessor: (index: number, obj:A|B) => A|B|null, 
  index: number
): A|B|null {
  switch(AB[type]) {
    case 'NONE': return null; 
    case 'A': return accessor(index, new A())! as A;
    case 'B': return accessor(index, new B())! as B;
    default: return null;
  }
}

