// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ABTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ABTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ABTable<'a> {
    type Inner = ABTable<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> ABTable<'a> {
    pub const fn get_fully_qualified_name() -> &'static str {
        "ABTable"
    }

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ABTable { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ABTableArgs) -> flatbuffers::WIPOffset<ABTable<'bldr>> {
      let mut builder = ABTableBuilder::new(_fbb);
      if let Some(x) = args.ab { builder.add_ab(x); }
      builder.add_ab_type(args.ab_type);
      builder.finish()
    }

    pub fn unpack(&self) -> ABTableT {
      let ab = match self.ab_type() {
        AB::NONE => ABT::NONE,
        AB::A => ABT::A(Box::new(
          self.ab_as_a()
              .expect("Invalid union table, expected `AB::A`.")
              .unpack()
        )),
        AB::B => ABT::B(Box::new(
          self.ab_as_b()
              .expect("Invalid union table, expected `AB::B`.")
              .unpack()
        )),
        _ => ABT::NONE,
      };
      ABTableT {
        ab_type,
        ab,
      }
    }
    pub const VT_AB_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_AB: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn ab_type(&self) -> AB {
    self._tab.get::<AB>(ABTable::VT_AB_TYPE, Some(AB::NONE)).unwrap()
  }
  #[inline]
  pub fn ab(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(ABTable::VT_AB, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn ab_as_a(&self) -> Option<A<'a>> {
    if self.ab_type() == AB::A {
      self.ab().map(A::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn ab_as_b(&self) -> Option<B<'a>> {
    if self.ab_type() == AB::B {
      self.ab().map(B::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for ABTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<AB, _>("ab_type", Self::VT_AB_TYPE, "ab", Self::VT_AB, false, |key, v, pos| {
        match key {
          AB::A => v.verify_union_variant::<flatbuffers::ForwardsUOffset<A>>("AB::A", pos),
          AB::B => v.verify_union_variant::<flatbuffers::ForwardsUOffset<B>>("AB::B", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ABTableArgs {
    pub ab_type: AB,
    pub ab: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ABTableArgs {
    #[inline]
    fn default() -> Self {
        ABTableArgs {
            ab_type: AB::NONE,
            ab: None,
        }
    }
}
pub struct ABTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ABTableBuilder<'a, 'b> {
  #[inline]
  pub fn add_ab_type(&mut self, ab_type: AB) {
    self.fbb_.push_slot::<AB>(ABTable::VT_AB_TYPE, ab_type, AB::NONE);
  }
  #[inline]
  pub fn add_ab(&mut self, ab: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ABTable::VT_AB, ab);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ABTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ABTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ABTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for ABTable<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("ABTable");
      ds.field("ab_type", &self.ab_type());
      match self.ab_type() {
        AB::A => {
          if let Some(x) = self.ab_as_a() {
            ds.field("ab", &x)
          } else {
            ds.field("ab", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        AB::B => {
          if let Some(x) = self.ab_as_b() {
            ds.field("ab", &x)
          } else {
            ds.field("ab", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("ab", &x)
        },
      };
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ABTableT {
  pub ab_type: INVALID_CODE_GENERATION,
  pub ab: ABT,
}
impl Default for ABTableT {
  fn default() -> Self {
    Self {
      ab_type: AB::NONE,
      ab: ABT::NONE,
    }
  }
}
impl ABTableT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ABTable<'b>> {
    let ab_type = self.ab.ab_type();
    let ab = self.ab.pack(_fbb);
    ABTable::create(_fbb, &ABTableArgs{
      ab_type,
      ab,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_abtable<'a>(buf: &'a [u8]) -> ABTable<'a> {
  unsafe { flatbuffers::root_unchecked::<ABTable<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_abtable<'a>(buf: &'a [u8]) -> ABTable<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<ABTable<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `ABTable`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_abtable_unchecked`.
pub fn root_as_abtable(buf: &[u8]) -> Result<ABTable, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ABTable>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ABTable` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_abtable_unchecked`.
pub fn size_prefixed_root_as_abtable(buf: &[u8]) -> Result<ABTable, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ABTable>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ABTable` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_abtable_unchecked`.
pub fn root_as_abtable_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ABTable<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ABTable<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ABTable` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_abtable_unchecked`.
pub fn size_prefixed_root_as_abtable_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ABTable<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ABTable<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ABTable and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ABTable`.
pub unsafe fn root_as_abtable_unchecked(buf: &[u8]) -> ABTable {
  flatbuffers::root_unchecked::<ABTable>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ABTable and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ABTable`.
pub unsafe fn size_prefixed_root_as_abtable_unchecked(buf: &[u8]) -> ABTable {
  flatbuffers::size_prefixed_root_unchecked::<ABTable>(buf)
}
#[inline]
pub fn finish_abtable_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ABTable<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_abtable_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ABTable<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
