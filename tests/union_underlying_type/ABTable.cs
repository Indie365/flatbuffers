// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ABTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ABTable GetRootAsABTable(ByteBuffer _bb) { return GetRootAsABTable(_bb, new ABTable()); }
  public static ABTable GetRootAsABTable(ByteBuffer _bb, ABTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ABTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AB AbType { get { int o = __p.__offset(4); return o != 0 ? (AB)__p.bb.GetInt(o + __p.bb_pos) : AB.NONE; } }
  public TTable? Ab<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public A AbAsA() { return Ab<A>().Value; }
  public B AbAsB() { return Ab<B>().Value; }

  public static Offset<ABTable> CreateABTable(FlatBufferBuilder builder,
      AB ab_type = AB.NONE,
      int abOffset = 0) {
    builder.StartTable(2);
    ABTable.AddAb(builder, abOffset);
    ABTable.AddAbType(builder, ab_type);
    return ABTable.EndABTable(builder);
  }

  public static void StartABTable(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAbType(FlatBufferBuilder builder, AB abType) { builder.AddInt(0, (int)abType, 0); }
  public static void AddAb(FlatBufferBuilder builder, int abOffset) { builder.AddOffset(1, abOffset, 0); }
  public static Offset<ABTable> EndABTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ABTable>(o);
  }
  public static void FinishABTableBuffer(FlatBufferBuilder builder, Offset<ABTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedABTableBuffer(FlatBufferBuilder builder, Offset<ABTable> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ABTableT UnPack() {
    var _o = new ABTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ABTableT _o) {
    _o.AbType = this.AbType;
    _o.Ab = new ABUnion();
    _o.Ab.Type = this.AbType;
    switch (this.AbType) {
      default: break;
      case AB.A:
        _o.Ab.Value = this.Ab<A>().HasValue ? this.Ab<A>().Value.UnPack() : null;
        break;
      case AB.B:
        _o.Ab.Value = this.Ab<B>().HasValue ? this.Ab<B>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<ABTable> Pack(FlatBufferBuilder builder, ABTableT _o) {
    if (_o == null) return default(Offset<ABTable>);
    var _ab_type = _o.Ab == null ? AB.NONE : _o.Ab.Type;
    var _ab = _o.Ab == null ? 0 : ABUnion.Pack(builder, _o.Ab);
    return CreateABTable(
      builder,
      _o.AbType,
      _ab);
  }
}

public class ABTableT
{
  [Newtonsoft.Json.JsonProperty("ab_type_type")]
  private AB AbTypeType {
    get {
      return this.AbType != null ? this.AbType.Type : AB.NONE;
    }
    set {
      this.AbType = new ABUnion();
      this.AbType.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("ab_type")]
  [Newtonsoft.Json.JsonConverter(typeof(AB_JsonConverter))]
  public AB AbType { get; set; }
  [Newtonsoft.Json.JsonProperty("ab_type")]
  private AB AbType {
    get {
      return this.Ab != null ? this.Ab.Type : AB.NONE;
    }
    set {
      this.Ab = new ABUnion();
      this.Ab.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("ab")]
  [Newtonsoft.Json.JsonConverter(typeof(ABUnion_JsonConverter))]
  public ABUnion Ab { get; set; }

  public ABTableT() {
    this.AbType = AB.NONE;
    this.Ab = null;
  }

  public static ABTableT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ABTableT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ABTableT DeserializeFromBinary(byte[] fbBuffer) {
    return ABTable.GetRootAsABTable(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ABTable.FinishABTableBuffer(fbb, ABTable.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

