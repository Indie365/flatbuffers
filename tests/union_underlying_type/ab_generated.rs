// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AB: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AB: i32 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AB: [AB; 3] = [
  AB::NONE,
  AB::A,
  AB::B,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AB(pub i32);
#[allow(non_upper_case_globals)]
impl AB {
  pub const NONE: Self = Self(0);
  pub const A: Self = Self(1);
  pub const B: Self = Self(2);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::A,
    Self::B,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::A => Some("A"),
      Self::B => Some("B"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for AB {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AB {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i32>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for AB {
    type Output = AB;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i32>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for AB {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i32::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i32::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AB {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AB {}
pub struct ABUnionTableOffset {}

#[allow(clippy::upper_case_acronyms)]
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub enum ABT {
  NONE,
  A(Box<AT>),
  B(Box<BT>),
}
impl Default for ABT {
  fn default() -> Self {
    Self::NONE
  }
}
impl ABT {
  pub fn ab_type(&self) -> AB {
    match self {
      Self::NONE => AB::NONE,
      Self::A(_) => AB::A,
      Self::B(_) => AB::B,
    }
  }
  pub fn pack(&self, fbb: &mut flatbuffers::FlatBufferBuilder) -> Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>> {
    match self {
      Self::NONE => None,
      Self::A(v) => Some(v.pack(fbb).as_union_value()),
      Self::B(v) => Some(v.pack(fbb).as_union_value()),
    }
  }
  /// If the union variant matches, return the owned AT, setting the union to NONE.
  pub fn take_a(&mut self) -> Option<Box<AT>> {
    if let Self::A(_) = self {
      let v = std::mem::replace(self, Self::NONE);
      if let Self::A(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the AT.
  pub fn as_a(&self) -> Option<&AT> {
    if let Self::A(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the AT.
  pub fn as_a_mut(&mut self) -> Option<&mut AT> {
    if let Self::A(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned BT, setting the union to NONE.
  pub fn take_b(&mut self) -> Option<Box<BT>> {
    if let Self::B(_) = self {
      let v = std::mem::replace(self, Self::NONE);
      if let Self::B(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the BT.
  pub fn as_b(&self) -> Option<&BT> {
    if let Self::B(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the BT.
  pub fn as_b_mut(&mut self) -> Option<&mut BT> {
    if let Self::B(v) = self { Some(v.as_mut()) } else { None }
  }
}
