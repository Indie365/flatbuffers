// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INCLUDETEST1_H_
#define FLATBUFFERS_GENERATED_INCLUDETEST1_H_

#include "flatbuffers/flatbuffers.h"

#include "include_test2_generated.h"

struct TableA;

inline const flatbuffers::TypeTable *TableATypeTable();

struct TableA FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TableATypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_B = 4
  };
  const MyGame::OtherNameSpace::TableB *b() const {
    return GetPointer<const MyGame::OtherNameSpace::TableB *>(VT_B);
  }
  MyGame::OtherNameSpace::TableB *mutable_b() {
    return GetPointer<MyGame::OtherNameSpace::TableB *>(VT_B);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_B) &&
           verifier.VerifyTable(b()) &&
           verifier.EndTable();
  }
};

struct TableABuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_b(flatbuffers::Offset<MyGame::OtherNameSpace::TableB> b) {
    fbb_.AddOffset(TableA::VT_B, b);
  }
  explicit TableABuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TableABuilder &operator=(const TableABuilder &);
  flatbuffers::Offset<TableA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TableA>(end);
    return o;
  }
};

inline flatbuffers::Offset<TableA> CreateTableA(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<MyGame::OtherNameSpace::TableB> b = 0) {
  TableABuilder builder_(_fbb);
  builder_.add_b(b);
  return builder_.Finish();
}

inline const flatbuffers::TypeTable *TableATypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MyGame::OtherNameSpace::TableBTypeTable
  };
  static const char * const names[] = {
    "b"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_INCLUDETEST1_H_
