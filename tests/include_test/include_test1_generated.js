// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var MyGame = MyGame || {};

/**
 * @const
 * @namespace
 */
MyGame.OtherNameSpace = MyGame.OtherNameSpace || {};

/**
 * @constructor
 */
function TableA() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {TableA}
 */
TableA.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {TableA=} obj
 * @returns {TableA}
 */
TableA.getRootAsTableA = function(bb, obj) {
  return (obj || new TableA).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {TableA=} obj
 * @returns {TableA}
 */
TableA.getSizePrefixedRootAsTableA = function(bb, obj) {
  return (obj || new TableA).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {MyGame.OtherNameSpace.TableB=} obj
 * @returns {MyGame.OtherNameSpace.TableB|null}
 */
TableA.prototype.b = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new MyGame.OtherNameSpace.TableB).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
TableA.startTableA = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bOffset
 */
TableA.addB = function(builder, bOffset) {
  builder.addFieldOffset(0, bOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
TableA.endTableA = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bOffset
 * @returns {flatbuffers.Offset}
 */
TableA.createTableA = function(builder, bOffset) {
  TableA.startTableA(builder);
  TableA.addB(builder, bOffset);
  return TableA.endTableA(builder);
}

// Exports for Node.js and RequireJS
this.TableA = TableA;
this.MyGame = MyGame;
