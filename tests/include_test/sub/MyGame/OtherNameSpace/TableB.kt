// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.OtherNameSpace

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class TableB : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TableB {
        __init(_i, _bb)
        return this
    }
    val a : TableA? get() = a(TableA())
    fun a(obj: TableA) : TableA? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_11_1()
        fun getRootAsTableB(_bb: ByteBuffer): TableB = getRootAsTableB(_bb, TableB())
        fun getRootAsTableB(_bb: ByteBuffer, obj: TableB): TableB {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTableB(builder: FlatBufferBuilder, aOffset: Int) : Int {
            builder.startTable(1)
            addA(builder, aOffset)
            return endTableB(builder)
        }
        fun startTableB(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addA(builder: FlatBufferBuilder, a: Int) = builder.addOffset(0, a, 0)
        fun endTableB(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
