// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var MyGame = MyGame || {};

/**
 * @const
 * @namespace
 */
MyGame.OtherNameSpace = MyGame.OtherNameSpace || {};

/**
 * @enum {number}
 */
MyGame.OtherNameSpace.FromInclude = {
  IncludeVal: 0
};

/**
 * @enum {string}
 */
MyGame.OtherNameSpace.FromIncludeName = {
  '0': 'IncludeVal'
};

/**
 * @constructor
 */
MyGame.OtherNameSpace.Unused = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.OtherNameSpace.Unused}
 */
MyGame.OtherNameSpace.Unused.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
MyGame.OtherNameSpace.Unused.prototype.a = function() {
  return this.bb.readInt32(this.bb_pos);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
MyGame.OtherNameSpace.Unused.prototype.mutate_a = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 0);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} a
 * @returns {flatbuffers.Offset}
 */
MyGame.OtherNameSpace.Unused.createUnused = function(builder, a) {
  builder.prep(4, 4);
  builder.writeInt32(a);
  return builder.offset();
};

/**
 * @constructor
 */
MyGame.OtherNameSpace.TableB = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.OtherNameSpace.TableB}
 */
MyGame.OtherNameSpace.TableB.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.OtherNameSpace.TableB=} obj
 * @returns {MyGame.OtherNameSpace.TableB}
 */
MyGame.OtherNameSpace.TableB.getRootAsTableB = function(bb, obj) {
  return (obj || new MyGame.OtherNameSpace.TableB).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.OtherNameSpace.TableB=} obj
 * @returns {MyGame.OtherNameSpace.TableB}
 */
MyGame.OtherNameSpace.TableB.getSizePrefixedRootAsTableB = function(bb, obj) {
  return (obj || new MyGame.OtherNameSpace.TableB).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {TableA=} obj
 * @returns {TableA|null}
 */
MyGame.OtherNameSpace.TableB.prototype.a = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new TableA).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MyGame.OtherNameSpace.TableB.startTableB = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} aOffset
 */
MyGame.OtherNameSpace.TableB.addA = function(builder, aOffset) {
  builder.addFieldOffset(0, aOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MyGame.OtherNameSpace.TableB.endTableB = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} aOffset
 * @returns {flatbuffers.Offset}
 */
MyGame.OtherNameSpace.TableB.createTableB = function(builder, aOffset) {
  MyGame.OtherNameSpace.TableB.startTableB(builder);
  MyGame.OtherNameSpace.TableB.addA(builder, aOffset);
  return MyGame.OtherNameSpace.TableB.endTableB(builder);
}

// Exports for Node.js and RequireJS
this.MyGame = MyGame;
