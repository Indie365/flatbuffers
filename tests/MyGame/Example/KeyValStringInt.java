// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class KeyValStringInt extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static KeyValStringInt getRootAsKeyValStringInt(ByteBuffer _bb) { return getRootAsKeyValStringInt(_bb, new KeyValStringInt()); }
  public static KeyValStringInt getRootAsKeyValStringInt(ByteBuffer _bb, KeyValStringInt obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public KeyValStringInt __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String key() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int val() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateVal(int val) { int o = __offset(6); if (o != 0) { bb.putInt(o + bb_pos, val); return true; } else { return false; } }

  public static int createKeyValStringInt(FlatBufferBuilder builder,
      int keyOffset,
      int val) {
    builder.startTable(2);
    KeyValStringInt.addVal(builder, val);
    KeyValStringInt.addKey(builder, keyOffset);
    return KeyValStringInt.endKeyValStringInt(builder);
  }

  public static void startKeyValStringInt(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static void addVal(FlatBufferBuilder builder, int val) { builder.addInt(1, val, 0); }
  public static int endKeyValStringInt(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public KeyValStringInt get(int j) { return get(new KeyValStringInt(), j); }
    public KeyValStringInt get(KeyValStringInt obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

