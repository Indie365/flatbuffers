// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

public class MonsterT {
  private MyGame.Example.Vec3T pos;
  private short mana;
  private short hp;
  private String name;
  private List<Integer> inventory;
  private int color;
  private MyGame.Example.AnyUnion test;
  private List<MyGame.Example.TestT> test4;
  private List<String> testarrayofstring;
  private List<MyGame.Example.MonsterT> testarrayoftables;
  private MyGame.Example.MonsterT enemy;
  private List<Integer> testnestedflatbuffer;
  private MyGame.Example.StatT testempty;
  private boolean testbool;
  private int testhashs32Fnv1;
  private long testhashu32Fnv1;
  private long testhashs64Fnv1;
  private long testhashu64Fnv1;
  private int testhashs32Fnv1a;
  private long testhashu32Fnv1a;
  private long testhashs64Fnv1a;
  private long testhashu64Fnv1a;
  private List<Boolean> testarrayofbools;
  private float testf;
  private float testf2;
  private float testf3;
  private List<String> testarrayofstring2;
  private List<MyGame.Example.AbilityT> testarrayofsortedstruct;
  private List<Integer> flex;
  private List<MyGame.Example.TestT> test5;
  private List<Long> vectorOfLongs;
  private List<Double> vectorOfDoubles;
  private MyGame.InParentNamespaceT parentNamespaceTest;
  private List<MyGame.Example.ReferrableT> vectorOfReferrables;
  private long singleWeakReference;
  private List<Long> vectorOfWeakReferences;
  private List<MyGame.Example.ReferrableT> vectorOfStrongReferrables;
  private long coOwningReference;
  private List<Long> vectorOfCoOwningReferences;
  private long nonOwningReference;
  private List<Long> vectorOfNonOwningReferences;
  private MyGame.Example.AnyUniqueAliasesUnion anyUnique;
  private MyGame.Example.AnyAmbiguousAliasesUnion anyAmbiguous;
  private List<Integer> vectorOfEnums;
  private byte signedEnum;
  private List<Integer> testrequirednestedflatbuffer;
  private List<MyGame.Example.StatT> scalarKeySortedTables;

  public MyGame.Example.Vec3T getPos() { return this.pos; }

  public void setPos(MyGame.Example.Vec3T pos) { this.pos = pos; }

  public short getMana() { return this.mana; }

  public void setMana(short mana) { this.mana = mana; }

  public short getHp() { return this.hp; }

  public void setHp(short hp) { this.hp = hp; }

  public String getName() { return this.name; }

  public void setName(String name) { this.name = name; }

  public List<Integer> getInventory() { return this.inventory; }

  public void setInventory(List<Integer> inventory) { this.inventory = inventory; }

  public int getColor() { return this.color; }

  public void setColor(int color) { this.color = color; }

  public MyGame.Example.AnyUnion getTest() { return this.test; }

  public void setTest(MyGame.Example.AnyUnion test) { this.test = test; }

  public List<MyGame.Example.TestT> getTest4() { return this.test4; }

  public void setTest4(List<MyGame.Example.TestT> test4) { this.test4 = test4; }

  public List<String> getTestarrayofstring() { return this.testarrayofstring; }

  public void setTestarrayofstring(List<String> testarrayofstring) { this.testarrayofstring = testarrayofstring; }

  public List<MyGame.Example.MonsterT> getTestarrayoftables() { return this.testarrayoftables; }

  public void setTestarrayoftables(List<MyGame.Example.MonsterT> testarrayoftables) { this.testarrayoftables = testarrayoftables; }

  public MyGame.Example.MonsterT getEnemy() { return this.enemy; }

  public void setEnemy(MyGame.Example.MonsterT enemy) { this.enemy = enemy; }

  public List<Integer> getTestnestedflatbuffer() { return this.testnestedflatbuffer; }

  public void setTestnestedflatbuffer(List<Integer> testnestedflatbuffer) { this.testnestedflatbuffer = testnestedflatbuffer; }

  public MyGame.Example.StatT getTestempty() { return this.testempty; }

  public void setTestempty(MyGame.Example.StatT testempty) { this.testempty = testempty; }

  public boolean getTestbool() { return this.testbool; }

  public void setTestbool(boolean testbool) { this.testbool = testbool; }

  public int getTesthashs32Fnv1() { return this.testhashs32Fnv1; }

  public void setTesthashs32Fnv1(int testhashs32Fnv1) { this.testhashs32Fnv1 = testhashs32Fnv1; }

  public long getTesthashu32Fnv1() { return this.testhashu32Fnv1; }

  public void setTesthashu32Fnv1(long testhashu32Fnv1) { this.testhashu32Fnv1 = testhashu32Fnv1; }

  public long getTesthashs64Fnv1() { return this.testhashs64Fnv1; }

  public void setTesthashs64Fnv1(long testhashs64Fnv1) { this.testhashs64Fnv1 = testhashs64Fnv1; }

  public long getTesthashu64Fnv1() { return this.testhashu64Fnv1; }

  public void setTesthashu64Fnv1(long testhashu64Fnv1) { this.testhashu64Fnv1 = testhashu64Fnv1; }

  public int getTesthashs32Fnv1a() { return this.testhashs32Fnv1a; }

  public void setTesthashs32Fnv1a(int testhashs32Fnv1a) { this.testhashs32Fnv1a = testhashs32Fnv1a; }

  public long getTesthashu32Fnv1a() { return this.testhashu32Fnv1a; }

  public void setTesthashu32Fnv1a(long testhashu32Fnv1a) { this.testhashu32Fnv1a = testhashu32Fnv1a; }

  public long getTesthashs64Fnv1a() { return this.testhashs64Fnv1a; }

  public void setTesthashs64Fnv1a(long testhashs64Fnv1a) { this.testhashs64Fnv1a = testhashs64Fnv1a; }

  public long getTesthashu64Fnv1a() { return this.testhashu64Fnv1a; }

  public void setTesthashu64Fnv1a(long testhashu64Fnv1a) { this.testhashu64Fnv1a = testhashu64Fnv1a; }

  public List<Boolean> getTestarrayofbools() { return this.testarrayofbools; }

  public void setTestarrayofbools(List<Boolean> testarrayofbools) { this.testarrayofbools = testarrayofbools; }

  public float getTestf() { return this.testf; }

  public void setTestf(float testf) { this.testf = testf; }

  public float getTestf2() { return this.testf2; }

  public void setTestf2(float testf2) { this.testf2 = testf2; }

  public float getTestf3() { return this.testf3; }

  public void setTestf3(float testf3) { this.testf3 = testf3; }

  public List<String> getTestarrayofstring2() { return this.testarrayofstring2; }

  public void setTestarrayofstring2(List<String> testarrayofstring2) { this.testarrayofstring2 = testarrayofstring2; }

  public List<MyGame.Example.AbilityT> getTestarrayofsortedstruct() { return this.testarrayofsortedstruct; }

  public void setTestarrayofsortedstruct(List<MyGame.Example.AbilityT> testarrayofsortedstruct) { this.testarrayofsortedstruct = testarrayofsortedstruct; }

  public List<Integer> getFlex() { return this.flex; }

  public void setFlex(List<Integer> flex) { this.flex = flex; }

  public List<MyGame.Example.TestT> getTest5() { return this.test5; }

  public void setTest5(List<MyGame.Example.TestT> test5) { this.test5 = test5; }

  public List<Long> getVectorOfLongs() { return this.vectorOfLongs; }

  public void setVectorOfLongs(List<Long> vectorOfLongs) { this.vectorOfLongs = vectorOfLongs; }

  public List<Double> getVectorOfDoubles() { return this.vectorOfDoubles; }

  public void setVectorOfDoubles(List<Double> vectorOfDoubles) { this.vectorOfDoubles = vectorOfDoubles; }

  public MyGame.InParentNamespaceT getParentNamespaceTest() { return this.parentNamespaceTest; }

  public void setParentNamespaceTest(MyGame.InParentNamespaceT parentNamespaceTest) { this.parentNamespaceTest = parentNamespaceTest; }

  public List<MyGame.Example.ReferrableT> getVectorOfReferrables() { return this.vectorOfReferrables; }

  public void setVectorOfReferrables(List<MyGame.Example.ReferrableT> vectorOfReferrables) { this.vectorOfReferrables = vectorOfReferrables; }

  public long getSingleWeakReference() { return this.singleWeakReference; }

  public void setSingleWeakReference(long singleWeakReference) { this.singleWeakReference = singleWeakReference; }

  public List<Long> getVectorOfWeakReferences() { return this.vectorOfWeakReferences; }

  public void setVectorOfWeakReferences(List<Long> vectorOfWeakReferences) { this.vectorOfWeakReferences = vectorOfWeakReferences; }

  public List<MyGame.Example.ReferrableT> getVectorOfStrongReferrables() { return this.vectorOfStrongReferrables; }

  public void setVectorOfStrongReferrables(List<MyGame.Example.ReferrableT> vectorOfStrongReferrables) { this.vectorOfStrongReferrables = vectorOfStrongReferrables; }

  public long getCoOwningReference() { return this.coOwningReference; }

  public void setCoOwningReference(long coOwningReference) { this.coOwningReference = coOwningReference; }

  public List<Long> getVectorOfCoOwningReferences() { return this.vectorOfCoOwningReferences; }

  public void setVectorOfCoOwningReferences(List<Long> vectorOfCoOwningReferences) { this.vectorOfCoOwningReferences = vectorOfCoOwningReferences; }

  public long getNonOwningReference() { return this.nonOwningReference; }

  public void setNonOwningReference(long nonOwningReference) { this.nonOwningReference = nonOwningReference; }

  public List<Long> getVectorOfNonOwningReferences() { return this.vectorOfNonOwningReferences; }

  public void setVectorOfNonOwningReferences(List<Long> vectorOfNonOwningReferences) { this.vectorOfNonOwningReferences = vectorOfNonOwningReferences; }

  public MyGame.Example.AnyUniqueAliasesUnion getAnyUnique() { return this.anyUnique; }

  public void setAnyUnique(MyGame.Example.AnyUniqueAliasesUnion anyUnique) { this.anyUnique = anyUnique; }

  public MyGame.Example.AnyAmbiguousAliasesUnion getAnyAmbiguous() { return this.anyAmbiguous; }

  public void setAnyAmbiguous(MyGame.Example.AnyAmbiguousAliasesUnion anyAmbiguous) { this.anyAmbiguous = anyAmbiguous; }

  public List<Integer> getVectorOfEnums() { return this.vectorOfEnums; }

  public void setVectorOfEnums(List<Integer> vectorOfEnums) { this.vectorOfEnums = vectorOfEnums; }

  public byte getSignedEnum() { return this.signedEnum; }

  public void setSignedEnum(byte signedEnum) { this.signedEnum = signedEnum; }

  public List<Integer> getTestrequirednestedflatbuffer() { return this.testrequirednestedflatbuffer; }

  public void setTestrequirednestedflatbuffer(List<Integer> testrequirednestedflatbuffer) { this.testrequirednestedflatbuffer = testrequirednestedflatbuffer; }

  public List<MyGame.Example.StatT> getScalarKeySortedTables() { return this.scalarKeySortedTables; }

  public void setScalarKeySortedTables(List<MyGame.Example.StatT> scalarKeySortedTables) { this.scalarKeySortedTables = scalarKeySortedTables; }


  public MonsterT() {
    this.pos = new MyGame.Example.Vec3T();
    this.mana = 150;
    this.hp = 100;
    this.name = null;
    this.inventory = null;
    this.color = 8;
    this.test = null;
    this.test4 = null;
    this.testarrayofstring = null;
    this.testarrayoftables = null;
    this.enemy = null;
    this.testnestedflatbuffer = null;
    this.testempty = null;
    this.testbool = false;
    this.testhashs32Fnv1 = 0;
    this.testhashu32Fnv1 = 0L;
    this.testhashs64Fnv1 = 0L;
    this.testhashu64Fnv1 = 0L;
    this.testhashs32Fnv1a = 0;
    this.testhashu32Fnv1a = 0L;
    this.testhashs64Fnv1a = 0L;
    this.testhashu64Fnv1a = 0L;
    this.testarrayofbools = null;
    this.testf = 3.14159f;
    this.testf2 = 3.0f;
    this.testf3 = 0.0f;
    this.testarrayofstring2 = null;
    this.testarrayofsortedstruct = null;
    this.flex = null;
    this.test5 = null;
    this.vectorOfLongs = null;
    this.vectorOfDoubles = null;
    this.parentNamespaceTest = null;
    this.vectorOfReferrables = null;
    this.singleWeakReference = 0L;
    this.vectorOfWeakReferences = null;
    this.vectorOfStrongReferrables = null;
    this.coOwningReference = 0L;
    this.vectorOfCoOwningReferences = null;
    this.nonOwningReference = 0L;
    this.vectorOfNonOwningReferences = null;
    this.anyUnique = null;
    this.anyAmbiguous = null;
    this.vectorOfEnums = null;
    this.signedEnum = -1;
    this.testrequirednestedflatbuffer = null;
    this.scalarKeySortedTables = null;
  }
  public static MonsterT deserializeFromBinary(byte[] fbBuffer) {
    return Monster.getRootAsMonster(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder(0x10000);
    Monster.finishMonsterBuffer(fbb, Monster.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}