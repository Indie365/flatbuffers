-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Example

local flatbuffers = require('flatbuffers')

local KeyValStringInt = {} -- the module
local KeyValStringInt_mt = {} -- the class metatable

function KeyValStringInt.New()
    local o = {}
    setmetatable(o, {__index = KeyValStringInt_mt})
    return o
end
function KeyValStringInt.GetRootAsKeyValStringInt(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = KeyValStringInt.New()
    o:Init(buf, n + offset)
    return o
end
function KeyValStringInt_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function KeyValStringInt_mt:Key()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function KeyValStringInt_mt:Val()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function KeyValStringInt.Start(builder) builder:StartObject(2) end
function KeyValStringInt.AddKey(builder, key) builder:PrependUOffsetTRelativeSlot(0, key, 0) end
function KeyValStringInt.AddVal(builder, val) builder:PrependInt32Slot(1, val, 0) end
function KeyValStringInt.End(builder) return builder:EndObject() end

return KeyValStringInt -- return the module