# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Example

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StringKey(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStringKey(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StringKey()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def StringKeyBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x4E\x53", size_prefixed=size_prefixed)

    # StringKey
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StringKey
    def K(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StringKeyStart(builder): builder.StartObject(1)
def StringKeyAddK(builder, k): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(k), 0)
def StringKeyEnd(builder): return builder.EndObject()


class StringKeyT(object):

    # StringKeyT
    def __init__(self):
        self.k = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stringKey = StringKey()
        stringKey.Init(buf, pos)
        return cls.InitFromObj(stringKey)

    @classmethod
    def InitFromObj(cls, stringKey):
        x = StringKeyT()
        x._UnPack(stringKey)
        return x

    # StringKeyT
    def _UnPack(self, stringKey):
        if stringKey is None:
            return
        self.k = stringKey.K()

    # StringKeyT
    def Pack(self, builder):
        if self.k is not None:
            k = builder.CreateString(self.k)
        StringKeyStart(builder)
        if self.k is not None:
            StringKeyAddK(builder, k)
        stringKey = StringKeyEnd(builder)
        return stringKey
