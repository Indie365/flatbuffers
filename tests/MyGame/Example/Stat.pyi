from __future__ import annotations

import flatbuffers
import numpy as np

import typing
from MyGame.Example.Stat import Stat

class Stat(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Stat: ...
  @classmethod
  def GetRootAsStat(cls, buf: bytes, offset: int) -> Stat: ...
  @classmethod
  def StatBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Id(self) -> typing.Optional[str]: ...
  def Val(self) -> int: ...
  def Count(self) -> int: ...
class StatT(object):
  id: typing.Optional[str]
  val: int
  count: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> StatT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> StatT: ...
  @classmethod
  def InitFromObj(cls, stat: Stat) -> StatT: ...
  def _UnPack(self, stat: Stat) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...

