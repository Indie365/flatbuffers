// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StringKeyT struct {
	K string
}

func (t *StringKeyT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	kOffset := builder.CreateString(t.K)
	StringKeyStart(builder)
	StringKeyAddK(builder, kOffset)
	return StringKeyEnd(builder)
}

func (rcv *StringKey) UnPackTo(t *StringKeyT) {
	t.K = string(rcv.K())
}

func (rcv *StringKey) UnPack() *StringKeyT {
	if rcv == nil { return nil }
	t := &StringKeyT{}
	rcv.UnPackTo(t)
	return t
}

type StringKey struct {
	_tab flatbuffers.Table
}

func GetRootAsStringKey(buf []byte, offset flatbuffers.UOffsetT) *StringKey {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StringKey{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStringKey(buf []byte, offset flatbuffers.UOffsetT) *StringKey {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StringKey{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StringKey) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StringKey) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StringKey) K() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StringKeyStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StringKeyAddK(builder *flatbuffers.Builder, k flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(k), 0)
}
func StringKeyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
