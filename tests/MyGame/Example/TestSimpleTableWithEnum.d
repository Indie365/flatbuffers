// automatically generated by the FlatBuffers compiler, do not modify

module MyGame.Example.TestSimpleTableWithEnum;

import std.typecons;
import flatbuffers;

import MyGame.Example.Color;
struct TestSimpleTableWithEnum {
	mixin Table!TestSimpleTableWithEnum;

  static TestSimpleTableWithEnum getRootAsTestSimpleTableWithEnum(ByteBuffer _bb) {  return TestSimpleTableWithEnum.init_(_bb.get!int(_bb.position()) + _bb.position(), _bb); }
	@property byte color() { uint o = __offset(4); return o != 0 ? _buffer.get!byte(o + _pos) : 2; }

	static uint createTestSimpleTableWithEnum(FlatBufferBuilder builder,byte color) {
		builder.startObject(1);
		TestSimpleTableWithEnum.addColor(builder, color);
		return TestSimpleTableWithEnum.endTestSimpleTableWithEnum(builder);
	}

	static void startTestSimpleTableWithEnum(FlatBufferBuilder builder) { builder.startObject(1); }
	static void addColor(FlatBufferBuilder builder, byte color) { builder.add!byte(0, color, 2); }
	static uint endTestSimpleTableWithEnum(FlatBufferBuilder builder) {
		uint o = builder.endObject();
		return o;
	}
}

