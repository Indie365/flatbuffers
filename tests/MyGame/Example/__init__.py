# automatically generated by the FlatBuffers compiler, do not modify

import flatbuffers
import enum
import operator
import struct

# localize performance sensitive globals
_getitem = operator.getitem
_tuple = tuple
_Enum = enum.Enum


class FromInclude(_Enum):
    IncludeVal = 0


def read_FromInclude(view, offset):
    return FromInclude(flatbuffers.read_long(view, offset))


class Color(_Enum):
    Red = 1
    Green = 2
    Blue = 8


def read_Color(view, offset):
    return Color(flatbuffers.read_byte(view, offset))


class Any(_Enum):
    NONE = 0
    Monster = 1


def read_Any(view, offset):
    return Any(flatbuffers.read_ubyte(view, offset))


class Test(flatbuffers.Struct):
    _FORMAT = struct.Struct("hbx")

    def __new__(cls, buf, offset):
        return tuple.__new__(cls, cls._FORMAT.unpack_from(buf, offset))

    @property
    def a(self):
        return _getitem(self, 0)

    @property
    def b(self):
        return _getitem(self, 1)


class Vec3(flatbuffers.Struct):
    _FORMAT = struct.Struct("fff4xdbxhbx2x")

    def __new__(cls, buf, offset):
        return tuple.__new__(cls, cls._FORMAT.unpack_from(buf, offset))

    @property
    def x(self):
        return _getitem(self, 0)

    @property
    def y(self):
        return _getitem(self, 1)

    @property
    def z(self):
        return _getitem(self, 2)

    @property
    def test1(self):
        return _getitem(self, 3)

    @property
    def test2(self):
        return Color(_getitem(self, 4))

    @property
    def test3(self):
        return _tuple.__new__(Test, _getitem(self, slice(5, 7)))


class Stat(flatbuffers.Table):
    @property
    def id(self):
        offset = self.get_offset(0)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        data_offset += flatbuffers.read_uoffset(self._buf, data_offset)
        return flatbuffers.read_string(self._buf, data_offset)

    @property
    def val(self):
        return self.read_long_field(1, 0)


class Monster(flatbuffers.Table):
    @property
    def pos(self):
        offset = self.get_offset(0)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        return Vec3(self._buf, data_offset)

    @property
    def mana(self):
        return self.read_short_field(1, 150)

    @property
    def hp(self):
        return self.read_short_field(2, 100)

    @property
    def name(self):
        offset = self.get_offset(3)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        data_offset += flatbuffers.read_uoffset(self._buf, data_offset)
        return flatbuffers.read_string(self._buf, data_offset)

    @property
    def inventory(self):
        offset = self.get_offset(5)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        return flatbuffers.read_vector("B", self._buf, data_offset)

    @property
    def color(self):
        return self.read_field(6, read_Color, 8)

    @property
    def test_type(self):
        return self.read_field(7, read_Any, 0)

    @property
    def test(self):
        tpe = self.test_type
        if tpe == Any.NONE:
            return None
        if tpe == Any.Monster:
            target = Monster
        offset = self.get_offset(8)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        data_offset += flatbuffers.read_uoffset(self._buf, data_offset)
        return target(self._buf, data_offset)

    @property
    def test4(self):
        offset = self.get_offset(9)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        return flatbuffers.StructVector(Test, 4, self._buf, data_offset)

    @property
    def testarrayofstring(self):
        offset = self.get_offset(10)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        return flatbuffers.IndirectVector(flatbuffers.read_string, self._buf, data_offset)

    @property
    def testarrayoftables(self):
        """
         an example documentation comment: this will end up in the generated code
         multiline too
        """

        offset = self.get_offset(11)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        return flatbuffers.IndirectVector(Monster, self._buf, data_offset)

    @property
    def enemy(self):
        offset = self.get_offset(12)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        data_offset += flatbuffers.read_uoffset(self._buf, data_offset)
        return Monster(self._buf, data_offset)

    @property
    def testnestedflatbuffer(self):
        offset = self.get_offset(13)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        return flatbuffers.read_vector("B", self._buf, data_offset)

    @property
    def testempty(self):
        offset = self.get_offset(14)
        if offset == 0:
            return None
        data_offset = self._offset + offset
        data_offset += flatbuffers.read_uoffset(self._buf, data_offset)
        return Stat(self._buf, data_offset)


def get_root_as_Monster(source):
    buf = source if type(source) is memoryview else memoryview(source)
    offset = flatbuffers.read_uoffset(buf, 0)
    return Monster(buf, offset)
