// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type Value byte

const (
	ValueNONE    Value = 0
	ValueMonster Value = 1
)

var EnumNamesValue = map[Value]string{
	ValueNONE:    "NONE",
	ValueMonster: "Monster",
}

var EnumValuesValue = map[string]Value{
	"NONE":    ValueNONE,
	"Monster": ValueMonster,
}

func (v Value) String() string {
	if s, ok := EnumNamesValue[v]; ok {
		return s
	}
	return "Value(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ValueT struct {
	Type Value
	Value interface{}
}

func (t *ValueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ValueMonster:
		return t.Value.(*MonsterT).Pack(builder)
	}
	return 0
}

func (rcv Value) UnPack(table flatbuffers.Table) *ValueT {
	switch rcv {
	case ValueMonster:
		var x Monster
		x.Init(table.Bytes, table.Pos)
		return &ValueT{ Type: ValueMonster, Value: x.UnPack() }
	}
	return nil
}
