# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Example

import flatbuffers

class TwoMaps(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTwoMaps(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TwoMaps()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def TwoMapsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x4E\x53", size_prefixed=size_prefixed)

    # TwoMaps
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TwoMaps
    def MapFromStringToInt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KeyValStringInt import KeyValStringInt
            obj = KeyValStringInt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TwoMaps
    def MapFromStringToIntLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TwoMaps
    def MapFromStringToBool(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KeyValStringBool import KeyValStringBool
            obj = KeyValStringBool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TwoMaps
    def MapFromStringToBoolLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TwoMapsStart(builder): builder.StartObject(2)
def TwoMapsAddMapFromStringToInt(builder, mapFromStringToInt): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mapFromStringToInt), 0)
def TwoMapsStartMapFromStringToIntVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TwoMapsAddMapFromStringToBool(builder, mapFromStringToBool): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mapFromStringToBool), 0)
def TwoMapsStartMapFromStringToBoolVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TwoMapsEnd(builder): return builder.EndObject()
