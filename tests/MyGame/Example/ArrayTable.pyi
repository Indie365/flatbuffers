from __future__ import annotations

import flatbuffers
import numpy as np

import typing
from MyGame.Example.ArrayStruct import ArrayStruct, ArrayStructT
from MyGame.Example.ArrayTable import ArrayTable

class ArrayTable(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ArrayTable: ...
  @classmethod
  def GetRootAsArrayTable(cls, buf: bytes, offset: int) -> ArrayTable: ...
  @classmethod
  def ArrayTableBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def A(self) -> typing.Optional[ArrayStruct]: ...
class ArrayTableT(object):
  a: typing.Optional[ArrayStructT]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ArrayTableT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ArrayTableT: ...
  @classmethod
  def InitFromObj(cls, arrayTable: ArrayTable) -> ArrayTableT: ...
  def _UnPack(self, arrayTable: ArrayTable) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...

