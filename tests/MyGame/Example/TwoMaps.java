// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TwoMaps extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static TwoMaps getRootAsTwoMaps(ByteBuffer _bb) { return getRootAsTwoMaps(_bb, new TwoMaps()); }
  public static TwoMaps getRootAsTwoMaps(ByteBuffer _bb, TwoMaps obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TwoMaps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Example.KeyValStringInt mapFromStringToInt(int j) { return mapFromStringToInt(new MyGame.Example.KeyValStringInt(), j); }
  public MyGame.Example.KeyValStringInt mapFromStringToInt(MyGame.Example.KeyValStringInt obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int mapFromStringToIntLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Example.KeyValStringInt.Vector mapFromStringToIntVector() { return mapFromStringToIntVector(new MyGame.Example.KeyValStringInt.Vector()); }
  public MyGame.Example.KeyValStringInt.Vector mapFromStringToIntVector(MyGame.Example.KeyValStringInt.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public MyGame.Example.KeyValStringBool mapFromStringToBool(int j) { return mapFromStringToBool(new MyGame.Example.KeyValStringBool(), j); }
  public MyGame.Example.KeyValStringBool mapFromStringToBool(MyGame.Example.KeyValStringBool obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int mapFromStringToBoolLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Example.KeyValStringBool.Vector mapFromStringToBoolVector() { return mapFromStringToBoolVector(new MyGame.Example.KeyValStringBool.Vector()); }
  public MyGame.Example.KeyValStringBool.Vector mapFromStringToBoolVector(MyGame.Example.KeyValStringBool.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTwoMaps(FlatBufferBuilder builder,
      int map_from_string_to_intOffset,
      int map_from_string_to_boolOffset) {
    builder.startTable(2);
    TwoMaps.addMapFromStringToBool(builder, map_from_string_to_boolOffset);
    TwoMaps.addMapFromStringToInt(builder, map_from_string_to_intOffset);
    return TwoMaps.endTwoMaps(builder);
  }

  public static void startTwoMaps(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addMapFromStringToInt(FlatBufferBuilder builder, int mapFromStringToIntOffset) { builder.addOffset(0, mapFromStringToIntOffset, 0); }
  public static int createMapFromStringToIntVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMapFromStringToIntVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMapFromStringToBool(FlatBufferBuilder builder, int mapFromStringToBoolOffset) { builder.addOffset(1, mapFromStringToBoolOffset, 0); }
  public static int createMapFromStringToBoolVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMapFromStringToBoolVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTwoMaps(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TwoMaps get(int j) { return get(new TwoMaps(), j); }
    public TwoMaps get(TwoMaps obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

