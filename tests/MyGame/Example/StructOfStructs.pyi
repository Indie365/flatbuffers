from __future__ import annotations

import flatbuffers
import numpy as np

import typing
from MyGame.Example.Ability import Ability, AbilityT
from MyGame.Example.StructOfStructs import StructOfStructs
from MyGame.Example.Test import Test, TestT

class StructOfStructs(object):
  @classmethod
  def SizeOf(cls) -> int: ...

  def Init(self, buf: bytes, pos: int) -> None: ...
  def A(self, obj: Ability) -> Ability: ...
  def B(self, obj: Test) -> Test: ...
  def C(self, obj: Ability) -> Ability: ...
class StructOfStructsT(object):
  a: typing.Optional[AbilityT]
  b: typing.Optional[TestT]
  c: typing.Optional[AbilityT]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> StructOfStructsT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> StructOfStructsT: ...
  @classmethod
  def InitFromObj(cls, structOfStructs: StructOfStructs) -> StructOfStructsT: ...
  def _UnPack(self, structOfStructs: StructOfStructs) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...

