-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Example

local flatbuffers = require('flatbuffers')

local TwoMaps = {} -- the module
local TwoMaps_mt = {} -- the class metatable

function TwoMaps.New()
    local o = {}
    setmetatable(o, {__index = TwoMaps_mt})
    return o
end
function TwoMaps.GetRootAsTwoMaps(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = TwoMaps.New()
    o:Init(buf, n + offset)
    return o
end
function TwoMaps_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function TwoMaps_mt:MapFromStringToInt(j)
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('MyGame.Example.KeyValStringInt').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TwoMaps_mt:MapFromStringToIntLength()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TwoMaps_mt:MapFromStringToBool(j)
    local o = self.view:Offset(6)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('MyGame.Example.KeyValStringBool').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TwoMaps_mt:MapFromStringToBoolLength()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TwoMaps.Start(builder) builder:StartObject(2) end
function TwoMaps.AddMapFromStringToInt(builder, mapFromStringToInt) builder:PrependUOffsetTRelativeSlot(0, mapFromStringToInt, 0) end
function TwoMaps.StartMapFromStringToIntVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function TwoMaps.AddMapFromStringToBool(builder, mapFromStringToBool) builder:PrependUOffsetTRelativeSlot(1, mapFromStringToBool, 0) end
function TwoMaps.StartMapFromStringToBoolVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function TwoMaps.End(builder) return builder:EndObject() end

return TwoMaps -- return the module