// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Example
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct StringKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StringKey GetRootAsStringKey(ByteBuffer _bb) { return GetRootAsStringKey(_bb, new StringKey()); }
  public static StringKey GetRootAsStringKey(ByteBuffer _bb, StringKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StringKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string K { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<MyGame.Example.StringKey> CreateStringKey(FlatBufferBuilder builder,
      StringOffset kOffset = default(StringOffset)) {
    builder.StartTable(1);
    StringKey.AddK(builder, kOffset);
    return StringKey.EndStringKey(builder);
  }

  public static void StartStringKey(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddK(FlatBufferBuilder builder, StringOffset kOffset) { builder.AddOffset(0, kOffset.Value, 0); }
  public static Offset<MyGame.Example.StringKey> EndStringKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // k
    return new Offset<MyGame.Example.StringKey>(o);
  }

  public static VectorOffset CreateSortedVectorOfStringKey(FlatBufferBuilder builder, Offset<StringKey>[] offsets) {
    Array.Sort(offsets, (Offset<StringKey> o1, Offset<StringKey> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static StringKey? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new StringKey().__assign(tableOffset, bb);
      }
    }
    return null;
  }
  public StringKeyT UnPack() {
    var _o = new StringKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StringKeyT _o) {
    _o.K = this.K;
  }
  public static Offset<MyGame.Example.StringKey> Pack(FlatBufferBuilder builder, StringKeyT _o) {
    if (_o == null) return default(Offset<MyGame.Example.StringKey>);
    var _k = _o.K == null ? default(StringOffset) : builder.CreateString(_o.K);
    return CreateStringKey(
      builder,
      _k);
  }
};

public class StringKeyT
{
  [Newtonsoft.Json.JsonProperty("k")]
  public string K { get; set; }

  public StringKeyT() {
    this.K = null;
  }
}


}
