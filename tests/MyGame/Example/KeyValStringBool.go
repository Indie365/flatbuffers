// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KeyValStringBool struct {
	_tab flatbuffers.Table
}

func GetRootAsKeyValStringBool(buf []byte, offset flatbuffers.UOffsetT) *KeyValStringBool {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KeyValStringBool{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KeyValStringBool) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KeyValStringBool) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KeyValStringBool) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KeyValStringBool) Val() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *KeyValStringBool) MutateVal(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func KeyValStringBoolStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KeyValStringBoolAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func KeyValStringBoolAddVal(builder *flatbuffers.Builder, val bool) {
	builder.PrependBoolSlot(1, val, false)
}
func KeyValStringBoolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
