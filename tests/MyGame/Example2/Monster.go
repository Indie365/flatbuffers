// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MonsterT struct {
}

// MonsterT object pack function
func (t *MonsterT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}

	// pack process all field

	MonsterStart(builder)
	return MonsterEnd(builder)
}

// MonsterT object unpack function
func (rcv *Monster) UnPackTo(t *MonsterT) {
}

func (rcv *Monster) UnPack() *MonsterT {
	if rcv == nil {
		return nil
	}
	t := &MonsterT{}
	rcv.UnPackTo(t)
	return t
}

type Monster struct {
	_tab flatbuffers.Table
}

// GetRootAsMonster shortcut to access root table
func GetRootAsMonster(buf []byte, offset flatbuffers.UOffsetT) *Monster {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Monster{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsMonster shortcut to access table in vector of  unions
func GetTableVectorAsMonster(table *flatbuffers.Table) *Monster {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Monster{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsMonster shortcut to access table in single union field
func GetTableAsMonster(table *flatbuffers.Table) *Monster {
	x := &Monster{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Monster) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Monster) Table() flatbuffers.Table {
	return rcv._tab
}

func MonsterStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}

func MonsterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
