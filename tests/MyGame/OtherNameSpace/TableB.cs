// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.OtherNameSpace
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TableB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static TableB GetRootAsTableB(ByteBuffer _bb) { return GetRootAsTableB(_bb, new TableB()); }
  public static TableB GetRootAsTableB(ByteBuffer _bb, TableB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TableB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TableA? A { get { int o = __p.__offset(4); return o != 0 ? (TableA?)(new TableA()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<MyGame.OtherNameSpace.TableB> CreateTableB(FlatBufferBuilder builder,
      Offset<TableA> aOffset = default(Offset<TableA>)) {
    builder.StartTable(1);
    TableB.AddA(builder, aOffset);
    return TableB.EndTableB(builder);
  }

  public static void StartTableB(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddA(FlatBufferBuilder builder, Offset<TableA> aOffset) { builder.AddOffset(0, aOffset.Value, 0); }
  public static Offset<MyGame.OtherNameSpace.TableB> EndTableB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.OtherNameSpace.TableB>(o);
  }
  public TableBT UnPack() {
    var _o = new TableBT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TableBT _o) {
    _o.A = this.A.HasValue ? this.A.Value.UnPack() : null;
  }
  public static Offset<MyGame.OtherNameSpace.TableB> Pack(FlatBufferBuilder builder, TableBT _o) {
    if (_o == null) return default(Offset<MyGame.OtherNameSpace.TableB>);
    var _a = _o.A == null ? default(Offset<TableA>) : TableA.Pack(builder, _o.A);
    return CreateTableB(
      builder,
      _a);
  }
}

public class TableBT
{
  [Newtonsoft.Json.JsonProperty("a")]
  public TableAT A { get; set; }

  public TableBT() {
    this.A = null;
  }
}


}
