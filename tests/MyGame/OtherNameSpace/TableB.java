// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.OtherNameSpace;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TableB extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static TableB getRootAsTableB(ByteBuffer _bb) { return getRootAsTableB(_bb, new TableB()); }
  public static TableB getRootAsTableB(ByteBuffer _bb, TableB obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TableB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TableA a() { return a(new TableA()); }
  public TableA a(TableA obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTableB(FlatBufferBuilder builder,
      int aOffset) {
    builder.startTable(1);
    TableB.addA(builder, aOffset);
    return TableB.endTableB(builder);
  }

  public static void startTableB(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addA(FlatBufferBuilder builder, int aOffset) { builder.addOffset(0, aOffset, 0); }
  public static int endTableB(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TableB get(int j) { return get(new TableB(), j); }
    public TableB get(TableB obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TableBT unpack() {
    TableBT _o = new TableBT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TableBT _o) {
    if (a() != null) _o.setA(a().unpack());
    else _o.setA(null);
  }
  public static int pack(FlatBufferBuilder builder, TableBT _o) {
    if (_o == null) return 0;
    int _a = _o.getA() == null ? 0 : TableA.pack(builder, _o.getA());
    return createTableB(
      builder,
      _a);
  }
}

