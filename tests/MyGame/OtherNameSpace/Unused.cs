// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.OtherNameSpace
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Unused : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Unused __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int A { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public void MutateA(int a) { __p.bb.PutInt(__p.bb_pos + 0, a); }

  public static Offset<MyGame.OtherNameSpace.Unused> CreateUnused(FlatBufferBuilder builder, int A) {
    builder.Prep(4, 4);
    builder.PutInt(A);
    return new Offset<MyGame.OtherNameSpace.Unused>(builder.Offset);
  }
  public UnusedT UnPack() {
    var _o = new UnusedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UnusedT _o) {
    _o.A = this.A;
  }
  public static Offset<MyGame.OtherNameSpace.Unused> Pack(FlatBufferBuilder builder, UnusedT _o) {
    if (_o == null) return default(Offset<MyGame.OtherNameSpace.Unused>);
    return CreateUnused(
      builder,
      _o.A);
  }
}

public class UnusedT
{
  [Newtonsoft.Json.JsonProperty("a")]
  public int A { get; set; }

  public UnusedT() {
    this.A = 0;
  }
}


}
