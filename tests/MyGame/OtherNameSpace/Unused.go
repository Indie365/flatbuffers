// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OtherNameSpace

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UnusedT struct {
	A int32 `json:"a"`
}

func (t *UnusedT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateUnused(builder, t.A)
}
func (rcv *Unused) UnPackTo(t *UnusedT) {
	t.A = rcv.A()
}

func (rcv *Unused) UnPack() *UnusedT {
	if rcv == nil { return nil }
	t := &UnusedT{}
	rcv.UnPackTo(t)
	return t
}

type Unused struct {
	_tab flatbuffers.Struct
}

func (rcv *Unused) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Unused) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Unused) A() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Unused) MutateA(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func CreateUnused(builder *flatbuffers.Builder, a int32) flatbuffers.UOffsetT {
	builder.Prep(4, 4)
	builder.PrependInt32(a)
	return builder.Offset()
}
