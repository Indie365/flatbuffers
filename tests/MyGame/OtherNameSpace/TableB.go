// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OtherNameSpace

import (
	flatbuffers "github.com/google/flatbuffers/go"

	TableA "TableA"
)

type TableBT struct {
	A *TableA.TableAT `json:"a"`
}

func (t *TableBT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	aOffset := t.A.Pack(builder)
	TableBStart(builder)
	TableBAddA(builder, aOffset)
	return TableBEnd(builder)
}

func (rcv *TableB) UnPackTo(t *TableBT) {
	t.A = rcv.A(nil).UnPack()
}

func (rcv *TableB) UnPack() *TableBT {
	if rcv == nil { return nil }
	t := &TableBT{}
	rcv.UnPackTo(t)
	return t
}

type TableB struct {
	_tab flatbuffers.Table
}

func GetRootAsTableB(buf []byte, offset flatbuffers.UOffsetT) *TableB {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TableB{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTableB(buf []byte, offset flatbuffers.UOffsetT) *TableB {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TableB{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TableB) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TableB) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TableB) A(obj *TableA.TableA) *TableA.TableA {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TableA.TableA)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func TableBStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TableBAddA(builder *flatbuffers.Builder, a flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(a), 0)
}
func TableBEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
