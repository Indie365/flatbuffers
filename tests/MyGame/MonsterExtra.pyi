from __future__ import annotations

import flatbuffers
import numpy as np

import typing
from MyGame.MonsterExtra import MonsterExtra

class MonsterExtra(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MonsterExtra: ...
  @classmethod
  def GetRootAsMonsterExtra(cls, buf: bytes, offset: int) -> MonsterExtra: ...
  @classmethod
  def MonsterExtraBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def D0(self) -> float: ...
  def D1(self) -> float: ...
  def D2(self) -> float: ...
  def D3(self) -> float: ...
  def F0(self) -> float: ...
  def F1(self) -> float: ...
  def F2(self) -> float: ...
  def F3(self) -> float: ...
  def Dvec(self, i: int) -> float: ...
  def DvecAsNumpy(self) -> np.ndarray: ...
  def DvecLength(self) -> int: ...
  def DvecIsNone(self) -> bool: ...
  def Fvec(self, i: int) -> float: ...
  def FvecAsNumpy(self) -> np.ndarray: ...
  def FvecLength(self) -> int: ...
  def FvecIsNone(self) -> bool: ...
class MonsterExtraT(object):
  d0: float
  d1: float
  d2: float
  d3: float
  f0: float
  f1: float
  f2: float
  f3: float
  dvec: typing.List[float]
  fvec: typing.List[float]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> MonsterExtraT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> MonsterExtraT: ...
  @classmethod
  def InitFromObj(cls, monsterExtra: MonsterExtra) -> MonsterExtraT: ...
  def _UnPack(self, monsterExtra: MonsterExtra) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
  def __eq__(self, other: MonsterExtraT) -> bool: ...

