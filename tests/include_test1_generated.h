// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INCLUDETEST1_H_
#define FLATBUFFERS_GENERATED_INCLUDETEST1_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct TableA;
struct TableABuilder;
struct TableAT;

bool operator==(const TableAT &lhs, const TableAT &rhs);
bool operator!=(const TableAT &lhs, const TableAT &rhs);

inline const flatbuffers::TypeTable *TableATypeTable();

struct TableAT : public flatbuffers::NativeTable {
  typedef TableA TableType;
  flatbuffers::unique_ptr<MyGame::OtherNameSpace::TableBT> b{};
  TableAT() = default;
  TableAT(const TableAT &o);
  TableAT(TableAT&&) FLATBUFFERS_NOEXCEPT = default;
  TableAT &operator=(TableAT o) FLATBUFFERS_NOEXCEPT;
};

struct TableA FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TableAT NativeTableType;
  typedef TableABuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TableATypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_B = 4
  };
  const MyGame::OtherNameSpace::TableB *b() const {
    return GetPointer<const MyGame::OtherNameSpace::TableB *>(VT_B);
  }
  MyGame::OtherNameSpace::TableB *mutable_b() {
    return GetPointer<MyGame::OtherNameSpace::TableB *>(VT_B);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_B) &&
           verifier.VerifyTable(b()) &&
           verifier.EndTable();
  }
  TableAT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TableAT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TableA> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TableAT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TableABuilder {
  typedef TableA Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_b(flatbuffers::Offset<MyGame::OtherNameSpace::TableB> b) {
    fbb_.AddOffset(TableA::VT_B, b);
  }
  explicit TableABuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TableA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TableA>(end);
    return o;
  }
};

inline flatbuffers::Offset<TableA> CreateTableA(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<MyGame::OtherNameSpace::TableB> b = 0) {
  TableABuilder builder_(_fbb);
  builder_.add_b(b);
  return builder_.Finish();
}

flatbuffers::Offset<TableA> CreateTableA(flatbuffers::FlatBufferBuilder &_fbb, const TableAT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const TableAT &lhs, const TableAT &rhs) {
  return
      ((lhs.b == rhs.b) || (lhs.b && rhs.b && *lhs.b == *rhs.b));
}

inline bool operator!=(const TableAT &lhs, const TableAT &rhs) {
    return !(lhs == rhs);
}


inline TableAT::TableAT(const TableAT &o)
      : b((o.b) ? new MyGame::OtherNameSpace::TableBT(*o.b) : nullptr) {
}

inline TableAT &TableAT::operator=(TableAT o) FLATBUFFERS_NOEXCEPT {
  std::swap(b, o.b);
  return *this;
}

inline TableAT *TableA::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TableAT>(new TableAT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TableA::UnPackTo(TableAT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = b(); if (_e) { if(_o->b) { _e->UnPackTo(_o->b.get(), _resolver); } else { _o->b = flatbuffers::unique_ptr<MyGame::OtherNameSpace::TableBT>(_e->UnPack(_resolver)); } } else if (_o->b) { _o->b.reset(); } }
}

inline flatbuffers::Offset<TableA> TableA::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TableAT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTableA(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TableA> CreateTableA(flatbuffers::FlatBufferBuilder &_fbb, const TableAT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TableAT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _b = _o->b ? CreateTableB(_fbb, _o->b.get(), _rehasher) : 0;
  return CreateTableA(
      _fbb,
      _b);
}

inline const flatbuffers::TypeTable *TableATypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MyGame::OtherNameSpace::TableBTypeTable
  };
  static const char * const names[] = {
    "b"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_INCLUDETEST1_H_
