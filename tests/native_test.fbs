native_include "custom_native.h";

namespace TestN;

struct Complex (native_type:"std::complex<double>")  {
  i:double;
  q:double;
}

struct Comp {
  i:double;
  q:double;
}

enum BundleSize: byte
{
  Size2,
  Size3,
  Size6
}

table Mat (native_type:"MyMat") {
  rows: int;
  data: [Complex];
}

union MyUnion { Mat}

table Foo {
  enumData:BundleSize;
  bitData:Mat;
  iqData:[Complex]; // native_type feature
  iqSample:Complex;
  iqSample2:Comp;
  newInt: int;
  variant: MyUnion;
}

namespace TestN.NamespaceFoo;

table Foo {
  foo:TestN.Foo;
}

namespace TestN.NamespaceBar;

table Foo {
  foo2:TestN.Foo;
}

namespace TestN;

root_type Foo;