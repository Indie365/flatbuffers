// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: multinamespaces

#include "multinamespaces_generated.h"
#include "multinamespaces.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace a {

static const char* ServiceAB_method_names[] = {
  "/a.ServiceAB/MethodAA",
  "/a.ServiceAB/MethodAB",
  "/a.ServiceAB/MethodBA",
  "/a.ServiceAB/MethodBB",
};

std::unique_ptr< ServiceAB::Stub> ServiceAB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ServiceAB::Stub> stub(new ServiceAB::Stub(channel));
  return stub;
}

ServiceAB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_MethodAA_(ServiceAB_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MethodAB_(ServiceAB_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MethodBA_(ServiceAB_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MethodBB_(ServiceAB_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status ServiceAB::Stub::MethodAA(::grpc::ClientContext* context, const flatbuffers::grpc::Message<A>& request, flatbuffers::grpc::Message<A>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MethodAA_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<A>>* ServiceAB::Stub::AsyncMethodAARaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<A>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<A>>::Create(channel_.get(), cq, rpcmethod_MethodAA_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<A>>* ServiceAB::Stub::PrepareAsyncMethodAARaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<A>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<A>>::Create(channel_.get(), cq, rpcmethod_MethodAA_, context, request, false);
}

::grpc::Status ServiceAB::Stub::MethodAB(::grpc::ClientContext* context, const flatbuffers::grpc::Message<A>& request, flatbuffers::grpc::Message<b::B>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MethodAB_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<b::B>>* ServiceAB::Stub::AsyncMethodABRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<A>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<b::B>>::Create(channel_.get(), cq, rpcmethod_MethodAB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<b::B>>* ServiceAB::Stub::PrepareAsyncMethodABRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<A>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<b::B>>::Create(channel_.get(), cq, rpcmethod_MethodAB_, context, request, false);
}

::grpc::Status ServiceAB::Stub::MethodBA(::grpc::ClientContext* context, const flatbuffers::grpc::Message<b::B>& request, flatbuffers::grpc::Message<A>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MethodBA_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<A>>* ServiceAB::Stub::AsyncMethodBARaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<b::B>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<A>>::Create(channel_.get(), cq, rpcmethod_MethodBA_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<A>>* ServiceAB::Stub::PrepareAsyncMethodBARaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<b::B>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<A>>::Create(channel_.get(), cq, rpcmethod_MethodBA_, context, request, false);
}

::grpc::Status ServiceAB::Stub::MethodBB(::grpc::ClientContext* context, const flatbuffers::grpc::Message<b::B>& request, flatbuffers::grpc::Message<b::B>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MethodBB_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<b::B>>* ServiceAB::Stub::AsyncMethodBBRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<b::B>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<b::B>>::Create(channel_.get(), cq, rpcmethod_MethodBB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<b::B>>* ServiceAB::Stub::PrepareAsyncMethodBBRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<b::B>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<b::B>>::Create(channel_.get(), cq, rpcmethod_MethodBB_, context, request, false);
}

ServiceAB::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceAB_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceAB::Service, flatbuffers::grpc::Message<A>, flatbuffers::grpc::Message<A>>(
          std::mem_fn(&ServiceAB::Service::MethodAA), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceAB_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceAB::Service, flatbuffers::grpc::Message<A>, flatbuffers::grpc::Message<b::B>>(
          std::mem_fn(&ServiceAB::Service::MethodAB), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceAB_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceAB::Service, flatbuffers::grpc::Message<b::B>, flatbuffers::grpc::Message<A>>(
          std::mem_fn(&ServiceAB::Service::MethodBA), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceAB_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceAB::Service, flatbuffers::grpc::Message<b::B>, flatbuffers::grpc::Message<b::B>>(
          std::mem_fn(&ServiceAB::Service::MethodBB), this)));
}

ServiceAB::Service::~Service() {
}

::grpc::Status ServiceAB::Service::MethodAA(::grpc::ServerContext* context, const flatbuffers::grpc::Message<A>* request, flatbuffers::grpc::Message<A>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceAB::Service::MethodAB(::grpc::ServerContext* context, const flatbuffers::grpc::Message<A>* request, flatbuffers::grpc::Message<b::B>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceAB::Service::MethodBA(::grpc::ServerContext* context, const flatbuffers::grpc::Message<b::B>* request, flatbuffers::grpc::Message<A>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceAB::Service::MethodBB(::grpc::ServerContext* context, const flatbuffers::grpc::Message<b::B>* request, flatbuffers::grpc::Message<b::B>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace a

