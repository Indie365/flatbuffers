/*
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.*;
import java.nio.ByteBuffer;
import MyGame.Example.*;
import NamespaceA.*;
import NamespaceA.NamespaceB.*;
import Testing.KeySearch.*;
import com.google.flatbuffers.Comparators;
import com.google.flatbuffers.Reflection;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.reflection.*;
import com.google.flatbuffers.FlatBufferBuilder;

class JavaTest {
    private static final boolean ENABLE_KEYBUG = true;

    public static void main(String[] args) {

        TestComparators();

        // First, let's test reading a FlatBuffer generated by C++ code:
        // This file was generated from monsterdata_test.json

        byte[] data = loadBinaryFile("monsterdata_test.mon");

        // Now test it:

        ByteBuffer bb = ByteBuffer.wrap(data);
        TestBuffer(bb);

        // Second, let's create a FlatBuffer from scratch in Java, and test it also.
        // We use an initial size of 1 to exercise the reallocation algorithm,
        // normally a size larger than the typical FlatBuffer you generate would be
        // better for performance.
        FlatBufferBuilder fbb = new FlatBufferBuilder(1);

        int[] names = {fbb.createString("Frodo"), fbb.createString("Barney"), fbb.createString("Wilma")};
        int[] off = new int[3];
        Monster.startMonster(fbb);
        Monster.addName(fbb, names[0]);
        off[0] = Monster.endMonster(fbb);
        Monster.startMonster(fbb);
        Monster.addName(fbb, names[1]);
        off[1] = Monster.endMonster(fbb);
        Monster.startMonster(fbb);
        Monster.addName(fbb, names[2]);
        off[2] = Monster.endMonster(fbb);
        int sortMons = fbb.createSortedVectorOfTables(new Monster(), off);
		
        // We set up the same values as monsterdata.json:

        int str = fbb.createString("MyMonster");

        int inv = Monster.createInventoryVector(fbb, new byte[] { 0, 1, 2, 3, 4 });

        int fred = fbb.createString("Fred");
        Monster.startMonster(fbb);
        Monster.addName(fbb, fred);
        int mon2 = Monster.endMonster(fbb);

        Monster.startTest4Vector(fbb, 2);
        Test.createTest(fbb, (short)10, (byte)20);
        Test.createTest(fbb, (short)30, (byte)40);
        int test4 = fbb.endVector();

        int testArrayOfString = Monster.createTestarrayofstringVector(fbb, new int[] {
            fbb.createString("test1"),
            fbb.createString("test2")
        });

        Monster.startMonster(fbb);
        Monster.addPos(fbb, Vec3.createVec3(fbb, 1.0f, 2.0f, 3.0f, 3.0,
                                                 Color.Green, (short)5, (byte)6));
        Monster.addHp(fbb, (short)80);
        Monster.addName(fbb, str);
        Monster.addInventory(fbb, inv);
        Monster.addTestType(fbb, (byte)Any.Monster);
        Monster.addTest(fbb, mon2);
        Monster.addTest4(fbb, test4);
        Monster.addTestarrayofstring(fbb, testArrayOfString);
        Monster.addTestbool(fbb, false);
        Monster.addTesthashu32Fnv1(fbb, Integer.MAX_VALUE + 1L);
        Monster.addTestarrayoftables(fbb, sortMons);
        int mon = Monster.endMonster(fbb);

        Monster.finishMonsterBuffer(fbb, mon);

        // Write the result to a file for debugging purposes:
        // Note that the binaries are not necessarily identical, since the JSON
        // parser may serialize in a slightly different order than the above
        // Java code. They are functionally equivalent though.

        try {
            DataOutputStream os = new DataOutputStream(new FileOutputStream(
                                           "monsterdata_java_wire.mon"));
            os.write(fbb.dataBuffer().array(), fbb.dataBuffer().position(), fbb.offset());
            os.close();
        } catch(IOException e) {
            System.out.println("FlatBuffers test: couldn't write file");
            System.exit(1);
        }

        // Test it:
        TestExtendedBuffer(fbb.dataBuffer());

        // Make sure it also works with read only ByteBuffers. This is slower,
        // since creating strings incurs an additional copy
        // (see Table.__string).
        TestExtendedBuffer(fbb.dataBuffer().asReadOnlyBuffer());

        TestEnums();

        //Attempt to mutate Monster fields and check whether the buffer has been mutated properly
        // revert to original values after testing
        Monster monster = Monster.getRootAsMonster(fbb.dataBuffer());

        // mana is optional and does not exist in the buffer so the mutation should fail
        // the mana field should retain its default value
        TestEq(monster.mutateMana((short)10), false);
        TestEq(monster.mana(), (short)150);
		
		// Accessing a vector of sorted by the key tables
        if ( ENABLE_KEYBUG ) {
            TestEq(monster.testarrayoftables(0).name(), "Barney");
            TestEq(monster.testarrayoftables(1).name(), "Frodo");
            TestEq(monster.testarrayoftables(2).name(), "Wilma");

            // Example of searching for a table by the key
            TestEq(TestNotNull(monster.testarrayoftablesByKey("Frodo")).name(), "Frodo");
            TestEq(TestNotNull(monster.testarrayoftablesByKey("Barney")).name(), "Barney");
            TestEq(TestNotNull(monster.testarrayoftablesByKey("Wilma")).name(), "Wilma");
        }

        // testType is an existing field and mutating it should succeed
        TestEq(monster.testType(), (byte)Any.Monster);
        TestEq(monster.mutateTestType(Any.NONE), true);
        TestEq(monster.testType(), (byte)Any.NONE);
        TestEq(monster.mutateTestType(Any.Monster), true);
        TestEq(monster.testType(), (byte)Any.Monster);

        //mutate the inventory vector
        TestEq(monster.mutateInventory(0, 1), true);
        TestEq(monster.mutateInventory(1, 2), true);
        TestEq(monster.mutateInventory(2, 3), true);
        TestEq(monster.mutateInventory(3, 4), true);
        TestEq(monster.mutateInventory(4, 5), true);

        for (int i = 0; i < monster.inventoryLength(); i++) {
            TestEq(monster.inventory(i), i + 1);
        }

        //reverse mutation
        TestEq(monster.mutateInventory(0, 0), true);
        TestEq(monster.mutateInventory(1, 1), true);
        TestEq(monster.mutateInventory(2, 2), true);
        TestEq(monster.mutateInventory(3, 3), true);
        TestEq(monster.mutateInventory(4, 4), true);

        // get a struct field and edit one of its fields
        Vec3 pos = monster.pos();
        TestEq(pos.x(), 1.0f);
        pos.mutateX(55.0f);
        TestEq(pos.x(), 55.0f);
        pos.mutateX(1.0f);
        TestEq(pos.x(), 1.0f);

        TestExtendedBuffer(fbb.dataBuffer().asReadOnlyBuffer());

        TestNamespaceNesting();

        TestNestedFlatBuffer();

        TestCreateByteVector();

        TestCreateUninitializedVector();

        if ( ENABLE_KEYBUG ) {
            TestReflection(bb);
        }

        TestKeySearchAllMissing();
        TestKeySearchEmpty();
        TestKeySearchOneEntry();
        TestKeySearchManyEntries();

        System.out.println("FlatBuffers test: completed successfully");
    }

    private static byte[] loadBinaryFile(String path) {
        byte[] data = null;
        File file = new File(path);
        RandomAccessFile f = null;
        try {
            f = new RandomAccessFile(file, "r");
            data = new byte[(int)f.length()];
            f.readFully(data);
            f.close();
        } catch(IOException e) {
            System.out.println("FlatBuffers test: couldn't read file " + path);
            System.exit(1);
        }
        return data;
    }

    static void TestEnums() {
      TestEq(Color.name(Color.Red), "Red");
      TestEq(Color.name(Color.Blue), "Blue");
      TestEq(Any.name(Any.NONE), "NONE");
      TestEq(Any.name(Any.Monster), "Monster");
    }

    static void TestBuffer(ByteBuffer bb) {
        TestEq(Monster.MonsterBufferHasIdentifier(bb), true);
        
        Monster monster = Monster.getRootAsMonster(bb);

        TestEq(monster.hp(), (short)80);
        TestEq(monster.mana(), (short)150);  // default

        TestEq(monster.name(), "MyMonster");
        // monster.friendly() // can't access, deprecated

        Vec3 pos = monster.pos();
        TestEq(pos.x(), 1.0f);
        TestEq(pos.y(), 2.0f);
        TestEq(pos.z(), 3.0f);
        TestEq(pos.test1(), 3.0);
        TestEq(pos.test2(), Color.Green);
        Test t = pos.test3();
        TestEq(t.a(), (short)5);
        TestEq(t.b(), (byte)6);

        TestEq(monster.testType(), (byte)Any.Monster);
        Monster monster2 = new Monster();
        TestEq(monster.test(monster2) != null, true);
        TestEq(monster2.name(), "Fred");

        TestEq(monster.inventoryLength(), 5);
        int invsum = 0;
        for (int i = 0; i < monster.inventoryLength(); i++)
            invsum += monster.inventory(i);
        TestEq(invsum, 10);

        // Alternative way of accessing a vector:
        ByteBuffer ibb = monster.inventoryAsByteBuffer();
        invsum = 0;
        while (ibb.position() < ibb.limit())
            invsum += ibb.get();
        TestEq(invsum, 10);

        Test test_0 = monster.test4(0);
        Test test_1 = monster.test4(1);
        TestEq(monster.test4Length(), 2);
        TestEq(test_0.a() + test_0.b() + test_1.a() + test_1.b(), 100);

        TestEq(monster.testarrayofstringLength(), 2);
        TestEq(monster.testarrayofstring(0),"test1");
        TestEq(monster.testarrayofstring(1),"test2");

        TestEq(monster.testbool(), false);
    }

    // this method checks additional fields not present in the binary buffer read from file
    // these new tests are performed on top of the regular tests
    static void TestExtendedBuffer(ByteBuffer bb) {
        TestBuffer(bb);

        Monster monster = Monster.getRootAsMonster(bb);

        TestEq(monster.testhashu32Fnv1(), Integer.MAX_VALUE + 1L);
    }
    
    static void TestNamespaceNesting() {
        // reference / manipulate these to verify compilation
        FlatBufferBuilder fbb = new FlatBufferBuilder(1);
        
        TableInNestedNS.startTableInNestedNS(fbb);
        TableInNestedNS.addFoo(fbb, 1234);
        int nestedTableOff = TableInNestedNS.endTableInNestedNS(fbb);
        
        TableInFirstNS.startTableInFirstNS(fbb);      
        TableInFirstNS.addFooTable(fbb, nestedTableOff);
        int off = TableInFirstNS.endTableInFirstNS(fbb);
    }
    
    static void TestNestedFlatBuffer() {
        final String nestedMonsterName = "NestedMonsterName";
        final short nestedMonsterHp = 600;
        final short nestedMonsterMana = 1024;
        
        FlatBufferBuilder fbb1 = new FlatBufferBuilder(16);
        int str1 = fbb1.createString(nestedMonsterName);
        Monster.startMonster(fbb1);
        Monster.addName(fbb1, str1);
        Monster.addHp(fbb1, nestedMonsterHp);
        Monster.addMana(fbb1, nestedMonsterMana);
        int monster1 = Monster.endMonster(fbb1);
        Monster.finishMonsterBuffer(fbb1, monster1);
        byte[] fbb1Bytes = fbb1.sizedByteArray();
        fbb1 = null;
        
        FlatBufferBuilder fbb2 = new FlatBufferBuilder(16);        
        int str2 = fbb2.createString("My Monster");
        int nestedBuffer = Monster.createTestnestedflatbufferVector(fbb2, fbb1Bytes);
        Monster.startMonster(fbb2);
        Monster.addName(fbb2, str2);
        Monster.addHp(fbb2, (short)50);
        Monster.addMana(fbb2, (short)32);
        Monster.addTestnestedflatbuffer(fbb2, nestedBuffer);
        int monster = Monster.endMonster(fbb2);
        Monster.finishMonsterBuffer(fbb2, monster);
        
        // Now test the data extracted from the nested buffer
        Monster mons = Monster.getRootAsMonster(fbb2.dataBuffer());
        Monster nestedMonster = mons.testnestedflatbufferAsMonster();

        TestEq(nestedMonsterMana, nestedMonster.mana());
        TestEq(nestedMonsterHp, nestedMonster.hp());
        TestEq(nestedMonsterName, nestedMonster.name());
    }

    static void TestCreateByteVector() {
        FlatBufferBuilder fbb = new FlatBufferBuilder(16);
        int str = fbb.createString("MyMonster");
        byte[] inventory = new byte[] { 0, 1, 2, 3, 4 };
        int vec = fbb.createByteVector(inventory);
        Monster.startMonster(fbb);
        Monster.addInventory(fbb, vec);
        Monster.addName(fbb, str);
        int monster1 = Monster.endMonster(fbb);
        Monster.finishMonsterBuffer(fbb, monster1);
        Monster monsterObject = Monster.getRootAsMonster(fbb.dataBuffer());

        TestEq(monsterObject.inventory(1), (int)inventory[1]);
        TestEq(monsterObject.inventoryLength(), inventory.length);
        TestEq(ByteBuffer.wrap(inventory), monsterObject.inventoryAsByteBuffer());
    }

    static void TestCreateUninitializedVector() {
        FlatBufferBuilder fbb = new FlatBufferBuilder(16);
        int str = fbb.createString("MyMonster");
        byte[] inventory = new byte[] { 0, 1, 2, 3, 4 };
        ByteBuffer bb = fbb.createUnintializedVector(1, inventory.length, 1);
        for (byte i:inventory) {
            bb.put(i);
        }
        int vec = fbb.endVector();
        Monster.startMonster(fbb);
        Monster.addInventory(fbb, vec);
        Monster.addName(fbb, str);
        int monster1 = Monster.endMonster(fbb);
        Monster.finishMonsterBuffer(fbb, monster1);
        Monster monsterObject = Monster.getRootAsMonster(fbb.dataBuffer());

        TestEq(monsterObject.inventory(1), (int)inventory[1]);
        TestEq(monsterObject.inventoryLength(), inventory.length);
        TestEq(ByteBuffer.wrap(inventory), monsterObject.inventoryAsByteBuffer());
    }

    static void TestReflection(ByteBuffer flatbuf) {
        byte[] data = null;
        File file = new File("monster_test.bfbs");
        RandomAccessFile f = null;
        try {
            f = new RandomAccessFile(file, "r");
            data = new byte[(int)f.length()];
            f.readFully(data);
            f.close();
        } catch(IOException e) {
            System.err.println("FlatBuffers test: couldn't read binary schema file");
            return;
        } finally {
            if (f != null) {
                try {
                    f.close();
                } catch (IOException e) {
                    //ignored
                }
            }
        }

        // Now test it:

        ByteBuffer bb = ByteBuffer.wrap(data);
        Schema schema = Schema.getRootAsSchema(bb);
        com.google.flatbuffers.reflection.Object rootTable = schema.rootTable();
        TestEq(rootTable.name(), "MyGame.Example.Monster");
        TestEq(rootTable.fieldsLength(), 29);
        Field hpField = rootTable.fieldsByKey("hp");
        TestEq(hpField.name(), "hp");
        TestEq(hpField.id(), 2);
        // Now use it to dynamically access a buffer.
        Table root = Reflection.getRootTable(flatbuf);

        // maybe we can move those methods to the Table class...
        int hp = Reflection.getIntField(root, hpField); //<- maybe provide a way to specify your default
//        TestEq(hp, 80);
//        short shortHp = Reflection.getShortField(root, hpField); //<- maybe provide a way to specify your default
//        TestEq(shortHp, 80);
//        long longField = Reflection.getLongField(root, rootTable.field("testhashs64Fnv1")); //<- maybe provide a way to specify your default
//        TestEq(longField, 80L);
//        float floatField = Reflection.getFloatField(root, rootTable.field("testf")); //<- maybe provide a way to specify your default
//        TestEq(floatField, 80.0F);
//        double doubleField = Reflection.getDoubleField(root, rootTable.field("testf")); //<- maybe provide a way to specify your default
//        TestEq(doubleField, 80.0F);

//        hp = Reflection.getAsIntField(root, hpField);
//        hp = Reflection.getFieldAsInt(root, hpField);
//        TestEq(hp, 80);
//        long longHp = Reflection.getAsLongField(root, hpField);
//        long longHp = Reflection.getFieldAsLong(root, hpField);
//        TestEq(longHp, 80L);
//        float floatHp = Reflection.getAsFloatField(root, hpField);
//        float floatHp = Reflection.getFieldAsFloat(root, hpField);
//        TestEq(floatHp, 80.0F);
//        double doubleHp = Reflection.getAsDoubleField(root, hpField);
//        double doubleHp = Reflection.getFieldAsDouble(root, hpField);
//        TestEq(doubleHp, 80.0D);
//        String stringHp = Reflection.getAsStringField(root, hpField);
//        String stringHp = Reflection.getFieldAsString(root, hpField);
//        TestEq(stringHp, "80");
    }

    private static MasterDict loadMasterDict(String path) {
        byte data[] = loadBinaryFile(path);
        ByteBuffer bb = ByteBuffer.wrap(data);
        TestEq(MasterDict.MasterDictBufferHasIdentifier(bb), true);
        return MasterDict.getRootAsMasterDict(bb);
    }

    private static void TestKeySearchAllMissing() {
        MasterDict mdict = loadMasterDict("keysearch_test/keysearch_test_all_missing.mdict");
        checkMasterDictEntriesSize(mdict, 0);
        // check non existing entry
        checkNonExistingEntries(mdict);
    }

    private static void TestKeySearchEmpty() {
        MasterDict mdict = loadMasterDict("keysearch_test/keysearch_test_empty_arrays.mdict");
        checkMasterDictEntriesSize(mdict, 0);
        // check non existing entry
        checkNonExistingEntries(mdict);
    }

    private static void checkMasterDictEntriesSize(MasterDict mdict, int expectedSize) {
        TestEq( mdict.boolEntriesLength(), expectedSize);
        TestEq( mdict.byteEntriesLength(), expectedSize);
        TestEq( mdict.ubyteEntriesLength(), expectedSize);
        TestEq( mdict.shortEntriesLength(), expectedSize);
        TestEq( mdict.ushortEntriesLength(), expectedSize);
        TestEq( mdict.intEntriesLength(), expectedSize);
        TestEq( mdict.uintEntriesLength(), expectedSize);
        TestEq( mdict.longEntriesLength(), expectedSize);
        TestEq( mdict.ulongEntriesLength(), expectedSize);
        TestEq( mdict.stringEntriesLength(), expectedSize);
        TestEq( mdict.floatEntriesLength(), expectedSize);
        TestEq( mdict.doubleEntriesLength(), expectedSize);
        // check non existing entry
        checkNonExistingEntries(mdict);
    }

    private static void TestKeySearchOneEntry() {
        MasterDict mdict = loadMasterDict("keysearch_test/keysearch_test_1entry.mdict");
        checkMasterDictEntriesSize(mdict, 1);
        // check existing entry
        TestEq( TestNotNull( mdict.boolEntriesByKey(true) ).value(), true );

        TestEq( TestNotNull( mdict.byteEntriesByKey((byte)-212) ).value(), (byte)-128 );
        TestEq( TestNotNull( mdict.shortEntriesByKey((short)-16123) ).value(), (short)-32768 );
        TestEq( TestNotNull( mdict.intEntriesByKey(-2123456789) ).value(), -2147483648 );
        TestEq( TestNotNull( mdict.longEntriesByKey(-41234567890L) ).value(), -9223372036854775808L );

        TestEq( TestNotNull( mdict.ubyteEntriesByKey(212) ).value(), 255 );
        TestEq( TestNotNull( mdict.ushortEntriesByKey(61234) ).value(), 65535 );
        TestEq( TestNotNull( mdict.uintEntriesByKey(4123456789L) ).value(), 4294967295L );
        TestEq( TestNotNull( mdict.ulongEntriesByKey(41234567890L) ).value(), 9223372036854775807L );

        TestEq( TestNotNull( mdict.floatEntriesByKey(12345.5f) ).value(), 1234f );
        TestEq( TestNotNull( mdict.doubleEntriesByKey(1234567890.5) ).value(), 4567.0 );
        TestEq( TestNotNull( mdict.stringEntriesByKey("some key") ).value(), 7890 );
        // check non existing entry
        checkNonExistingEntries(mdict);
    }

    private static void checkNonExistingEntries(MasterDict mdict) {
        TestIsNull( mdict.boolEntriesByKey(false) );
        TestIsNull( mdict.byteEntriesByKey((byte)-211) );
        TestIsNull( mdict.shortEntriesByKey((short)-16120) );
        TestIsNull( mdict.intEntriesByKey(-2123456780) );
        TestIsNull( mdict.longEntriesByKey(-41234567891L) );
        TestIsNull( mdict.ubyteEntriesByKey(213) );
        TestIsNull( mdict.ushortEntriesByKey(61230) );
        TestIsNull( mdict.uintEntriesByKey(4123456780L) );
        TestIsNull( mdict.ulongEntriesByKey(41234567891L) );

        TestIsNull( mdict.floatEntriesByKey(12345.0f) );
        TestIsNull( mdict.doubleEntriesByKey(1234567890.0) );
        TestIsNull( mdict.stringEntriesByKey("bad key") );
        TestIsNull( mdict.stringEntriesByKey("not some key") );
        TestIsNull( mdict.stringEntriesByKey("") );
    }


    static byte[] BYTE_KEYS = { -128, -108, 4, 27, 79, 87, 116, 120, 127 };
    static short[] SHORT_KEYS = { -32768, -23103, -19823, -19569, 10511, 13604, 29116, 32767 };
    static int[] INT_KEYS = { -2147483648, 289956431, 1578841898, 1591161832, 2008070098, 2147483647 };
    static long[] LONG_KEYS = { -9223372036854775808L, -4426181692283497353L, -3867737981674931192L, 3384947750744670649L, 5930023430429340454L, 6446878210185090927L, 7810001276519378488L, 8296697541656081552L, 9223372036854775807L };
    static int[] UBYTE_KEYS = { 0x0, 0x30, 0x47, 0x4b, 0x6f, (byte)0x80, (byte)0x90, (byte)0xff };
    static int[] USHORT_KEYS = { 0x0, 0x730, 0x1fe3, 0x68b1, 0x855f, 0xa1e4, 0xe2a8, 0xf43a, 0xffff };
    static int[] UINT_KEYS = { 0x0, 0x1beb3711, 0x72ae2244, 0x8a5006c1, 0x8c25166a, 0x8d1fd9b7, 0x966e1277, 0xb4e1357d, 0xeece328b, 0xffffffff };
    static long[] ULONG_KEYS = { 0x0L, 0x151665705b7c709aL, 0x19c16a0d0febd845L, 0x1dfc83524562be7fL, 0x38701a14b490b608L, 0x3e37952d30bcab0eL, 0x552116dd2ba4b180L, 0x73581a8146743741L, 0x7c879b741d878f9fL, 0x7fffffffffffffffL };
    static String[] STRING_KEYS = { "", "Apple", "Apricot", "Avocado", "Banana", "Blackberry", "Blackcurrant", "Cherimoya", "Cherry", "Coconut", "Currant" };
    static long BYTE_TOTAL = 333;
    static long SHORT_TOTAL = 256;
    static long INT_TOTAL = 132;
    static long LONG_TOTAL = 333;
    static long STRING_TOTAL = 517;
    static long UBYTE_TOTAL = 288;
    static long USHORT_TOTAL = 369;
    static long UINT_TOTAL = 460;
    static long ULONG_TOTAL = 460;


    private static void TestKeySearchManyEntries() {
        MasterDict mdict = loadMasterDict("keysearch_test/keysearch_test_many.mdict");
        TestEq( TestNotNull( mdict.boolEntriesByKey(true) ).value(), false);
        TestEq( TestNotNull( mdict.boolEntriesByKey(false) ).value(), true);

        long sum = 0;
        for ( byte key: BYTE_KEYS ) {
            sum += TestNotNull(mdict.byteEntriesByKey(key)).value();
        }
        TestEq(sum, BYTE_TOTAL);

        sum = 0;
        for ( short key: SHORT_KEYS ) {
            sum += TestNotNull(mdict.shortEntriesByKey(key)).value();
        }
        TestEq(sum, SHORT_TOTAL);

        sum = 0;
        for ( int key: INT_KEYS ) {
            sum += TestNotNull(mdict.intEntriesByKey(key)).value();
        }
        TestEq(sum, INT_TOTAL);

        sum = 0;
        for ( long key: LONG_KEYS ) {
            sum += TestNotNull(mdict.longEntriesByKey(key)).value();
        }
        TestEq(sum, LONG_TOTAL);

        sum = 0;
        for ( int  key: UBYTE_KEYS ) {
            sum += TestNotNull(mdict.ubyteEntriesByKey(key)).value();
        }
        TestEq(sum, UBYTE_TOTAL);

        sum = 0;
        for ( int  key: USHORT_KEYS ) {
            sum += TestNotNull(mdict.ushortEntriesByKey(key)).value();
        }
        TestEq(sum, USHORT_TOTAL);

        sum = 0;
        for ( int  key: UINT_KEYS ) {
            sum += TestNotNull(mdict.uintEntriesByKey(key)).value();
        }
        TestEq(sum, UINT_TOTAL);

        sum = 0;
        for ( long key: ULONG_KEYS ) {
            sum += TestNotNull(mdict.ulongEntriesByKey(key)).value();
        }
        TestEq(sum, ULONG_TOTAL);

        sum = 0;
        for ( String key: STRING_KEYS ) {
            sum += TestNotNull(mdict.stringEntriesByKey(key)).value();
        }
        TestEq(sum, STRING_TOTAL);
    }

    private static void TestComparators() {
        // byte
        TestPositive(Comparators.compare((byte)10, (byte)5));
        TestPositive(Comparators.compare(Byte.MAX_VALUE, Byte.MIN_VALUE));
        TestNegative(Comparators.compare((byte)-10, (byte)5));
        TestNegative(Comparators.compare(Byte.MIN_VALUE, Byte.MAX_VALUE));
        TestEq(Comparators.compare((byte)-10, (byte)-10), 0);
        // short
        TestPositive(Comparators.compare((short)10, (short)5));
        TestPositive(Comparators.compare(Short.MAX_VALUE, Short.MIN_VALUE));
        TestNegative(Comparators.compare((short)-10, (short)5));
        TestNegative(Comparators.compare(Short.MIN_VALUE, Short.MAX_VALUE));
        TestEq(Comparators.compare((short)-10, (short)-10), 0);
        // int
        TestPositive(Comparators.compare(10, 5));
        TestPositive(Comparators.compare(Integer.MAX_VALUE, Integer.MIN_VALUE));
        TestNegative(Comparators.compare(-10, 5));
        TestNegative(Comparators.compare(Integer.MIN_VALUE, Integer.MAX_VALUE));
        TestEq(Comparators.compare(-10, -10), 0);
        // long
        TestPositive(Comparators.compare(10L, 5L));
        TestPositive(Comparators.compare(Long.MAX_VALUE, Long.MIN_VALUE));
        TestNegative(Comparators.compare(-10L, 5L));
        TestNegative(Comparators.compare(Long.MIN_VALUE, Long.MAX_VALUE));
        TestEq(Comparators.compare(-10L, -10L), 0);
        // ulong
        TestPositive(Comparators.compareUnsigned(0xff00123400000000L , 0xf500123400000000L));
        TestPositive(Comparators.compareUnsigned(0xff00123400000000L, 0x0500123400000000L));
        TestNegative(Comparators.compareUnsigned(0x0a00123400000000L, 0x6500123400000000L));
        TestNegative(Comparators.compareUnsigned(0x0a00123400000000L, 0xf500123400000000L));
        TestNegative(Comparators.compareUnsigned(0xf500123400000000L, 0xff00123400000000L));
        TestEq(Comparators.compareUnsigned(0x0123456701234567L, 0x0123456701234567L), 0);
        TestEq(Comparators.compareUnsigned(0xf123456701234567L, 0xf123456701234567L), 0);
        // uint
        TestPositive(Comparators.compareUnsigned(0xff001234, 0xf5001234));
        TestPositive(Comparators.compareUnsigned(0xff001234, 0x05001234));
        TestNegative(Comparators.compareUnsigned(0x0a001234, 0x65001234));
        TestNegative(Comparators.compareUnsigned(0x0a001234, 0xf5001234));
        TestNegative(Comparators.compareUnsigned(0xf5001234, 0xff001234));
        TestEq(Comparators.compareUnsigned(0x1000, 0x1000), 0);
        // ushort
        TestPositive(Comparators.compareUnsigned((short)0xff00, (short)0xf500));
        TestPositive(Comparators.compareUnsigned((short)0xff00, (short)0x0500));
        TestNegative(Comparators.compareUnsigned((short)0x0a00, (short)0x6500));
        TestNegative(Comparators.compareUnsigned((short)0x0a00, (short)0xf500));
        TestNegative(Comparators.compareUnsigned((short)0xf500, (short)0xff00));
        TestEq(Comparators.compareUnsigned((short)0x1000, (short)0x1000), 0);
        // ubyte
        TestPositive(Comparators.compareUnsigned((byte)0xff, (byte)0xf5));
        TestPositive(Comparators.compareUnsigned((byte)0xff, (byte)0x05));
        TestNegative(Comparators.compareUnsigned((byte)0x0a, (byte)0x65));
        TestNegative(Comparators.compareUnsigned((byte)0x0a, (byte)0xf5));
        TestNegative(Comparators.compareUnsigned((byte)0xf5, (byte)0xff));
        TestEq(Comparators.compareUnsigned((byte)0x10, (byte)0x10), 0);
    }

    static void TestPositive(int a) {
        if (a <= 0) {
            System.out.println("FlatBuffers test FAILED: expected > 0 but got \'" + a + "\'");
            assert false; // Run test with -ea VM options to get callstack
            System.exit(1);
        }
    }

    static void TestNegative(int a) {
        if (a >= 0) {
            System.out.println("FlatBuffers test FAILED: expected < 0 but got \'" + a + "\'");
            assert false; // Run test with -ea VM options to get callstack
            System.exit(1);
        }
    }

    static <T> void TestEq(T a, T b) {
        if (!a.equals(b)) {
            System.out.println("" + a.getClass().getName() + " " + b.getClass().getName());
            System.out.println("FlatBuffers test FAILED: \'" + a + "\' != \'" + b + "\'");
            assert false; // Run test with -ea VM options to get callstack
            System.exit(1);
        }
    }

    static <T> T TestNotNull(T a) {
        if (a == null) {
            System.out.println("FlatBuffers test FAILED: unexpected null reference");
            assert false; // Run test with -ea VM options to get callstack
            System.exit(1);
        }
        return a;
    }

    static <T> void TestIsNull(T a) {
        if (a != null) {
            System.out.println("FlatBuffers test FAILED: expected null but got '" + a + "'");
            assert false; // Run test with -ea VM options to get callstack
            System.exit(1);
        }
    }
}
