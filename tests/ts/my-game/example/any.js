// automatically generated by the FlatBuffers compiler, do not modify
import { Monster as MyGame_Example2_Monster, monsterVerify as myGameExample2MonsterVerify } from '../../my-game/example2/monster.js';
import { Monster, monsterVerify } from '../../my-game/example/monster.js';
import { TestSimpleTableWithEnum, testSimpleTableWithEnumVerify } from '../../my-game/example/test-simple-table-with-enum.js';
export var Any;
(function (Any) {
    Any[Any["NONE"] = 0] = "NONE";
    Any[Any["Monster"] = 1] = "Monster";
    Any[Any["TestSimpleTableWithEnum"] = 2] = "TestSimpleTableWithEnum";
    Any[Any["MyGame_Example2_Monster"] = 3] = "MyGame_Example2_Monster";
})(Any || (Any = {}));
export function unionToAny(type, accessor) {
    switch (Any[type]) {
        case 'NONE': return null;
        case 'Monster': return accessor(new Monster());
        case 'TestSimpleTableWithEnum': return accessor(new TestSimpleTableWithEnum());
        case 'MyGame_Example2_Monster': return accessor(new MyGame_Example2_Monster());
        default: return null;
    }
}
export function unionListToAny(type, accessor, index) {
    switch (Any[type]) {
        case 'NONE': return null;
        case 'Monster': return accessor(index, new Monster());
        case 'TestSimpleTableWithEnum': return accessor(index, new TestSimpleTableWithEnum());
        case 'MyGame_Example2_Monster': return accessor(index, new MyGame_Example2_Monster());
        default: return null;
    }
}
export function anyVerify(verifier, typeId, tablePos) {
    let result = false;
    switch (Any[typeId]) {
        case 'Monster':
            result = monsterVerify(verifier, tablePos);
            break;
        case 'TestSimpleTableWithEnum':
            result = testSimpleTableWithEnumVerify(verifier, tablePos);
            break;
        case 'MyGame_Example2_Monster':
            result = myGameExample2MonsterVerify(verifier, tablePos);
            break;
        default: result = true;
    }
    return result;
}
