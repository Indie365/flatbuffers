// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Color } from '../../my-game/example/color';
import { Test, TestT } from '../../my-game/example/test';


/**
 * @constructor
 */
export class Vec3 {
  /**
   * @type flatbuffers.ByteBuffer
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type number
   */
  bb_pos = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Vec3
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Vec3 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

/**
 * @returns number
 */
x():number {
  return this.bb!.readFloat32(this.bb_pos);
}

/**
 * @param number value
 * @returns boolean
 */
mutate_x(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 0, value);
  return true;
}

/**
 * @returns number
 */
y():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
}

/**
 * @param number value
 * @returns boolean
 */
mutate_y(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 4, value);
  return true;
}

/**
 * @returns number
 */
z():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
}

/**
 * @param number value
 * @returns boolean
 */
mutate_z(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 8, value);
  return true;
}

/**
 * @returns number
 */
test1():number {
  return this.bb!.readFloat64(this.bb_pos + 16);
}

/**
 * @param number value
 * @returns boolean
 */
mutate_test1(value:number):boolean {
  this.bb!.writeFloat64(this.bb_pos + 16, value);
  return true;
}

/**
 * @returns Color
 */
test2():Color {
  return /** @type MyGame.Example.Color */ (this.bb!.readUint8(this.bb_pos + 24));
}

/**
 * @param Color value
 * @returns boolean
 */
mutate_test2(value:Color):boolean {
  this.bb!.writeUint8(this.bb_pos + 24, value);
  return true;
}

/**
 * @param Test= obj
 * @returns Test|null
 */
test3(obj?:Test):Test|null {
  return (obj || new Test()).__init(this.bb_pos + 26, this.bb!);
}

/**
 * @returns string
 */
static getFullyQualifiedName():string {
  return 'MyGame.Example.Vec3';
}

/**
 * @returns number
 */
static sizeOf():number {
  return 32;
}

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @param number test1
 * @param Color test2
 * @param number test3_a
 * @param number test3_b
 * @returns flatbuffers.Offset
 */
static createVec3(builder:flatbuffers.Builder, x: number, y: number, z: number, test1: number, test2: Color, test3_a: number, test3_b: number):flatbuffers.Offset {
  builder.prep(8, 32);
  builder.pad(2);
  builder.prep(2, 4);
  builder.pad(1);
  builder.writeInt8(test3_b);
  builder.writeInt16(test3_a);
  builder.pad(1);
  builder.writeInt8(test2);
  builder.writeFloat64(test1);
  builder.pad(4);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
}


/**
 * @returns Vec3T
 */
unpack(): Vec3T {
  return new Vec3T(
    this.x(),
    this.y(),
    this.z(),
    this.test1(),
    this.test2(),
    (this.test3() !== null ? this.test3()!.unpack() : null)
  );
}

/**
 * @param Vec3T _o
 */
unpackTo(_o: Vec3T): void {
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.test1 = this.test1();
  _o.test2 = this.test2();
  _o.test3 = (this.test3() !== null ? this.test3()!.unpack() : null);
}
}

export class Vec3T {
/**
 * @constructor
 * @param number x
 * @param number y
 * @param number z
 * @param number test1
 * @param Color test2
 * @param TestT|null test3
 */
constructor(
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public test1: number = 0.0,
  public test2: Color = /** @type MyGame.Example.Color} */ (0),
  public test3: TestT|null = null
){}

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Vec3.createVec3(builder,
    this.x,
    this.y,
    this.z,
    this.test1,
    this.test2,
    (this.test3 === null ? 0 : this.test3.a!),
    (this.test3 === null ? 0 : this.test3.b!)
  );
}
}
