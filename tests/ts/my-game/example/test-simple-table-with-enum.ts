// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Color } from '../../my-game/example/color';


/**
 * @constructor
 */
export class TestSimpleTableWithEnum {
  /**
   * @type flatbuffers.ByteBuffer
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type number
   */
  bb_pos = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TestSimpleTableWithEnum
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TestSimpleTableWithEnum {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TestSimpleTableWithEnum= obj
 * @returns TestSimpleTableWithEnum
 */
static getRootAsTestSimpleTableWithEnum(bb:flatbuffers.ByteBuffer, obj?:TestSimpleTableWithEnum):TestSimpleTableWithEnum {
  return (obj || new TestSimpleTableWithEnum()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TestSimpleTableWithEnum= obj
 * @returns TestSimpleTableWithEnum
 */
static getSizePrefixedRootAsTestSimpleTableWithEnum(bb:flatbuffers.ByteBuffer, obj?:TestSimpleTableWithEnum):TestSimpleTableWithEnum {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TestSimpleTableWithEnum()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * @returns Color
 */
color():Color {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /** @type MyGame.Example.Color */ (this.bb!.readUint8(this.bb_pos + offset)) : Color.Green;
}

/**
 * @param Color value
 * @returns boolean
 */
mutate_color(value:Color):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint8(this.bb_pos + offset, value);
  return true;
}

/**
 * @returns string
 */
static getFullyQualifiedName():string {
  return 'MyGame.Example.TestSimpleTableWithEnum';
}

/**
 * @param flatbuffers.Builder builder
 */
static startTestSimpleTableWithEnum(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

/**
 * @param flatbuffers.Builder builder
 * @param Color color
 */
static addColor(builder:flatbuffers.Builder, color:Color) {
  builder.addFieldInt8(0, color, Color.Green);
}

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTestSimpleTableWithEnum(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTestSimpleTableWithEnum(builder:flatbuffers.Builder, color:Color):flatbuffers.Offset {
  TestSimpleTableWithEnum.startTestSimpleTableWithEnum(builder);
  TestSimpleTableWithEnum.addColor(builder, color);
  return TestSimpleTableWithEnum.endTestSimpleTableWithEnum(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):TestSimpleTableWithEnum {
  return TestSimpleTableWithEnum.getRootAsTestSimpleTableWithEnum(new flatbuffers.ByteBuffer(buffer))
}

/**
 * @returns TestSimpleTableWithEnumT
 */
unpack(): TestSimpleTableWithEnumT {
  return new TestSimpleTableWithEnumT(
    this.color()
  );
}

/**
 * @param TestSimpleTableWithEnumT _o
 */
unpackTo(_o: TestSimpleTableWithEnumT): void {
  _o.color = this.color();
}
}

export class TestSimpleTableWithEnumT {
/**
 * @constructor
 * @param Color color
 */
constructor(
  public color: Color = Color.Green
){}

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TestSimpleTableWithEnum.createTestSimpleTableWithEnum(builder,
    this.color
  );
}
}
