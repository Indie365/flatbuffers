// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TableA extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static TableA getRootAsTableA(ByteBuffer _bb) { return getRootAsTableA(_bb, new TableA()); }
  public static TableA getRootAsTableA(ByteBuffer _bb, TableA obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TableA __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.OtherNameSpace.TableB b() { return b(new MyGame.OtherNameSpace.TableB()); }
  public MyGame.OtherNameSpace.TableB b(MyGame.OtherNameSpace.TableB obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTableA(FlatBufferBuilder builder,
      int bOffset) {
    builder.startTable(1);
    TableA.addB(builder, bOffset);
    return TableA.endTableA(builder);
  }

  public static void startTableA(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addB(FlatBufferBuilder builder, int bOffset) { builder.addOffset(0, bOffset, 0); }
  public static int endTableA(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TableA get(int j) { return get(new TableA(), j); }
    public TableA get(TableA obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TableAT unpack() {
    TableAT _o = new TableAT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TableAT _o) {
    if (b() != null) _o.setB(b().unpack());
    else _o.setB(null);
  }
  public static int pack(FlatBufferBuilder builder, TableAT _o) {
    if (_o == null) return 0;
    int _b = _o.getB() == null ? 0 : MyGame.OtherNameSpace.TableB.pack(builder, _o.getB());
    return createTableA(
      builder,
      _b);
  }
}

