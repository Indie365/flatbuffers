// automatically generated by the FlatBuffers compiler, do not modify
"use strict";
exports.__esModule = true;
/**
 * @enum
 */
var MyGame;
(function (MyGame) {
    var Example;
    (function (Example) {
        var Color;
        (function (Color) {
            Color[Color["Red"] = 1] = "Red";
            Color[Color["Green"] = 2] = "Green";
            Color[Color["Blue"] = 8] = "Blue";
        })(Color = Example.Color || (Example.Color = {}));
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
;
/**
 * @enum
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var Any;
        (function (Any) {
            Any[Any["NONE"] = 0] = "NONE";
            Any[Any["Monster"] = 1] = "Monster";
            Any[Any["TestSimpleTableWithEnum"] = 2] = "TestSimpleTableWithEnum";
            Any[Any["MyGame_Example2_Monster"] = 3] = "MyGame_Example2_Monster";
        })(Any = Example.Any || (Example.Any = {}));
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
;
/**
 * @constructor
 */
(function (MyGame) {
    var Example2;
    (function (Example2) {
        var Monster = (function () {
            function Monster() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {Monster}
             */
            Monster.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param {flatbuffers.ByteBuffer} bb
             * @param {Monster=} obj
             * @returns {Monster}
             */
            Monster.getRootAsMonster = function (bb, obj) {
                return (obj || new Monster).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             */
            Monster.startMonster = function (builder) {
                builder.startObject(0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @returns {flatbuffers.Offset}
             */
            Monster.endMonster = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            return Monster;
        }());
        Example2.Monster = Monster;
    })(Example2 = MyGame.Example2 || (MyGame.Example2 = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
/**
 * @constructor
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var Test = (function () {
            function Test() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {Test}
             */
            Test.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @returns {number}
             */
            Test.prototype.a = function () {
                return this.bb.readInt16(this.bb_pos);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Test.prototype.mutate_a = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 0);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt16(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Test.prototype.b = function () {
                return this.bb.readInt8(this.bb_pos + 2);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Test.prototype.mutate_b = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 2);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt8(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} a
             * @param {number} b
             * @returns {flatbuffers.Offset}
             */
            Test.createTest = function (builder, a, b) {
                builder.prep(2, 4);
                builder.pad(1);
                builder.writeInt8(b);
                builder.writeInt16(a);
                return builder.offset();
            };
            ;
            return Test;
        }());
        Example.Test = Test;
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
/**
 * @constructor
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var TestSimpleTableWithEnum = (function () {
            function TestSimpleTableWithEnum() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {TestSimpleTableWithEnum}
             */
            TestSimpleTableWithEnum.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param {flatbuffers.ByteBuffer} bb
             * @param {TestSimpleTableWithEnum=} obj
             * @returns {TestSimpleTableWithEnum}
             */
            TestSimpleTableWithEnum.getRootAsTestSimpleTableWithEnum = function (bb, obj) {
                return (obj || new TestSimpleTableWithEnum).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @returns {MyGame.Example.Color}
             */
            TestSimpleTableWithEnum.prototype.color = function () {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? (this.bb.readInt8(this.bb_pos + offset)) : MyGame.Example.Color.Green;
            };
            ;
            /**
             * @param {MyGame.Example.Color} value
             * @returns {boolean}
             */
            TestSimpleTableWithEnum.prototype.mutate_color = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt8(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             */
            TestSimpleTableWithEnum.startTestSimpleTableWithEnum = function (builder) {
                builder.startObject(1);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {MyGame.Example.Color} color
             */
            TestSimpleTableWithEnum.addColor = function (builder, color) {
                builder.addFieldInt8(0, color, MyGame.Example.Color.Green);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @returns {flatbuffers.Offset}
             */
            TestSimpleTableWithEnum.endTestSimpleTableWithEnum = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            return TestSimpleTableWithEnum;
        }());
        Example.TestSimpleTableWithEnum = TestSimpleTableWithEnum;
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
/**
 * @constructor
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var Vec3 = (function () {
            function Vec3() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {Vec3}
             */
            Vec3.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @returns {number}
             */
            Vec3.prototype.x = function () {
                return this.bb.readFloat32(this.bb_pos);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Vec3.prototype.mutate_x = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 0);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Vec3.prototype.y = function () {
                return this.bb.readFloat32(this.bb_pos + 4);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Vec3.prototype.mutate_y = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Vec3.prototype.z = function () {
                return this.bb.readFloat32(this.bb_pos + 8);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Vec3.prototype.mutate_z = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Vec3.prototype.test1 = function () {
                return this.bb.readFloat64(this.bb_pos + 16);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Vec3.prototype.mutate_test1 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 16);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat64(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {MyGame.Example.Color}
             */
            Vec3.prototype.test2 = function () {
                return (this.bb.readInt8(this.bb_pos + 24));
            };
            ;
            /**
             * @param {MyGame.Example.Color} value
             * @returns {boolean}
             */
            Vec3.prototype.mutate_test2 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 24);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt8(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {MyGame.Example.Test=} obj
             * @returns {MyGame.Example.Test}
             */
            Vec3.prototype.test3 = function (obj) {
                return (obj || new MyGame.Example.Test).__init(this.bb_pos + 26, this.bb);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} x
             * @param {number} y
             * @param {number} z
             * @param {number} test1
             * @param {MyGame.Example.Color} test2
             * @param {number} test3_a
             * @param {number} test3_b
             * @returns {flatbuffers.Offset}
             */
            Vec3.createVec3 = function (builder, x, y, z, test1, test2, test3_a, test3_b) {
                builder.prep(16, 32);
                builder.pad(2);
                builder.prep(2, 4);
                builder.pad(1);
                builder.writeInt8(test3_b);
                builder.writeInt16(test3_a);
                builder.pad(1);
                builder.writeInt8(test2);
                builder.writeFloat64(test1);
                builder.pad(4);
                builder.writeFloat32(z);
                builder.writeFloat32(y);
                builder.writeFloat32(x);
                return builder.offset();
            };
            ;
            return Vec3;
        }());
        Example.Vec3 = Vec3;
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
/**
 * @constructor
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var Ability = (function () {
            function Ability() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {Ability}
             */
            Ability.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @returns {number}
             */
            Ability.prototype.id = function () {
                return this.bb.readUint32(this.bb_pos);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Ability.prototype.mutate_id = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 0);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Ability.prototype.distance = function () {
                return this.bb.readUint32(this.bb_pos + 4);
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Ability.prototype.mutate_distance = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} id
             * @param {number} distance
             * @returns {flatbuffers.Offset}
             */
            Ability.createAbility = function (builder, id, distance) {
                builder.prep(4, 8);
                builder.writeInt32(distance);
                builder.writeInt32(id);
                return builder.offset();
            };
            ;
            return Ability;
        }());
        Example.Ability = Ability;
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
/**
 * @constructor
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var Stat = (function () {
            function Stat() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {Stat}
             */
            Stat.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param {flatbuffers.ByteBuffer} bb
             * @param {Stat=} obj
             * @returns {Stat}
             */
            Stat.getRootAsStat = function (bb, obj) {
                return (obj || new Stat).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            Stat.prototype.id = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            /**
             * @returns {flatbuffers.Long}
             */
            Stat.prototype.val = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
            };
            ;
            /**
             * @param {flatbuffers.Long} value
             * @returns {boolean}
             */
            Stat.prototype.mutate_val = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt64(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Stat.prototype.count = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Stat.prototype.mutate_count = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint16(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             */
            Stat.startStat = function (builder) {
                builder.startObject(3);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} idOffset
             */
            Stat.addId = function (builder, idOffset) {
                builder.addFieldOffset(0, idOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Long} val
             */
            Stat.addVal = function (builder, val) {
                builder.addFieldInt64(1, val, builder.createLong(0, 0));
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} count
             */
            Stat.addCount = function (builder, count) {
                builder.addFieldInt16(2, count, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @returns {flatbuffers.Offset}
             */
            Stat.endStat = function (builder) {
                var offset = builder.endObject();
                return offset;
            };
            ;
            return Stat;
        }());
        Example.Stat = Stat;
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
/**
 * an example documentation comment: monster object
 *
 * @constructor
 */
(function (MyGame) {
    var Example;
    (function (Example) {
        var Monster = (function () {
            function Monster() {
                /**
                 * @type {flatbuffers.ByteBuffer}
                 */
                this.bb = null;
                /**
                 * @type {number}
                 */
                this.bb_pos = 0;
            }
            /**
             * @param {number} i
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {Monster}
             */
            Monster.prototype.__init = function (i, bb) {
                this.bb_pos = i;
                this.bb = bb;
                return this;
            };
            ;
            /**
             * @param {flatbuffers.ByteBuffer} bb
             * @param {Monster=} obj
             * @returns {Monster}
             */
            Monster.getRootAsMonster = function (bb, obj) {
                return (obj || new Monster).__init(bb.readInt32(bb.position()) + bb.position(), bb);
            };
            ;
            /**
             * @param {flatbuffers.ByteBuffer} bb
             * @returns {boolean}
             */
            Monster.bufferHasIdentifier = function (bb) {
                return bb.__has_identifier('MONS');
            };
            ;
            /**
             * @param {MyGame.Example.Vec3=} obj
             * @returns {MyGame.Example.Vec3}
             */
            Monster.prototype.pos = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 4);
                return offset ? (obj || new MyGame.Example.Vec3).__init(this.bb_pos + offset, this.bb) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.mana = function () {
                var offset = this.bb.__offset(this.bb_pos, 6);
                return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_mana = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 6);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt16(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.hp = function () {
                var offset = this.bb.__offset(this.bb_pos, 8);
                return offset ? this.bb.readInt16(this.bb_pos + offset) : 100;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_hp = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 8);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt16(this.bb_pos + offset, value);
                return true;
            };
            ;
            Monster.prototype.name = function (optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 10);
                return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
            };
            ;
            /**
             * @param {number} index
             * @returns {number}
             */
            Monster.prototype.inventory = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 14);
                return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.inventoryLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 14);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns {Uint8Array}
             */
            Monster.prototype.inventoryArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 14);
                return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @returns {MyGame.Example.Color}
             */
            Monster.prototype.color = function () {
                var offset = this.bb.__offset(this.bb_pos, 16);
                return offset ? (this.bb.readInt8(this.bb_pos + offset)) : MyGame.Example.Color.Blue;
            };
            ;
            /**
             * @param {MyGame.Example.Color} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_color = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 16);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt8(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {MyGame.Example.Any}
             */
            Monster.prototype.testType = function () {
                var offset = this.bb.__offset(this.bb_pos, 18);
                return offset ? (this.bb.readUint8(this.bb_pos + offset)) : MyGame.Example.Any.NONE;
            };
            ;
            /**
             * @param {MyGame.Example.Any} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_test_type = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 18);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint8(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {flatbuffers.Table} obj
             * @returns {?flatbuffers.Table}
             */
            Monster.prototype.test = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 20);
                return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
            };
            ;
            /**
             * @param {number} index
             * @param {MyGame.Example.Test=} obj
             * @returns {MyGame.Example.Test}
             */
            Monster.prototype.test4 = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? (obj || new MyGame.Example.Test).__init(this.bb.__vector(this.bb_pos + offset) + index * 4, this.bb) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.test4Length = function () {
                var offset = this.bb.__offset(this.bb_pos, 22);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            Monster.prototype.testarrayofstring = function (index, optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testarrayofstringLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 24);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * an example documentation comment: this will end up in the generated code
             * multiline too
             *
             * @param {number} index
             * @param {MyGame.Example.Monster=} obj
             * @returns {MyGame.Example.Monster}
             */
            Monster.prototype.testarrayoftables = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 26);
                return offset ? (obj || new MyGame.Example.Monster).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testarrayoftablesLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 26);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {MyGame.Example.Monster=} obj
             * @returns {MyGame.Example.Monster}
             */
            Monster.prototype.enemy = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 28);
                return offset ? (obj || new MyGame.Example.Monster).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * @param {number} index
             * @returns {number}
             */
            Monster.prototype.testnestedflatbuffer = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 30);
                return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testnestedflatbufferLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 30);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns {Uint8Array}
             */
            Monster.prototype.testnestedflatbufferArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 30);
                return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @param {MyGame.Example.Stat=} obj
             * @returns {MyGame.Example.Stat}
             */
            Monster.prototype.testempty = function (obj) {
                var offset = this.bb.__offset(this.bb_pos, 32);
                return offset ? (obj || new MyGame.Example.Stat).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
            };
            ;
            /**
             * @returns {boolean}
             */
            Monster.prototype.testbool = function () {
                var offset = this.bb.__offset(this.bb_pos, 34);
                return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
            };
            ;
            /**
             * @param {boolean} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testbool = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 34);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt8(this.bb_pos + offset, +value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testhashs32Fnv1 = function () {
                var offset = this.bb.__offset(this.bb_pos, 36);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashs32_fnv1 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 36);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testhashu32Fnv1 = function () {
                var offset = this.bb.__offset(this.bb_pos, 38);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashu32_fnv1 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 38);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {flatbuffers.Long}
             */
            Monster.prototype.testhashs64Fnv1 = function () {
                var offset = this.bb.__offset(this.bb_pos, 40);
                return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
            };
            ;
            /**
             * @param {flatbuffers.Long} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashs64_fnv1 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 40);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt64(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {flatbuffers.Long}
             */
            Monster.prototype.testhashu64Fnv1 = function () {
                var offset = this.bb.__offset(this.bb_pos, 42);
                return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
            };
            ;
            /**
             * @param {flatbuffers.Long} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashu64_fnv1 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 42);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint64(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testhashs32Fnv1a = function () {
                var offset = this.bb.__offset(this.bb_pos, 44);
                return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashs32_fnv1a = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 44);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testhashu32Fnv1a = function () {
                var offset = this.bb.__offset(this.bb_pos, 46);
                return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashu32_fnv1a = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 46);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {flatbuffers.Long}
             */
            Monster.prototype.testhashs64Fnv1a = function () {
                var offset = this.bb.__offset(this.bb_pos, 48);
                return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
            };
            ;
            /**
             * @param {flatbuffers.Long} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashs64_fnv1a = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 48);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeInt64(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {flatbuffers.Long}
             */
            Monster.prototype.testhashu64Fnv1a = function () {
                var offset = this.bb.__offset(this.bb_pos, 50);
                return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
            };
            ;
            /**
             * @param {flatbuffers.Long} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testhashu64_fnv1a = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 50);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeUint64(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @param {number} index
             * @returns {boolean}
             */
            Monster.prototype.testarrayofbools = function (index) {
                var offset = this.bb.__offset(this.bb_pos, 52);
                return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testarrayofboolsLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 52);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @returns {Int8Array}
             */
            Monster.prototype.testarrayofboolsArray = function () {
                var offset = this.bb.__offset(this.bb_pos, 52);
                return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testf = function () {
                var offset = this.bb.__offset(this.bb_pos, 54);
                return offset ? this.bb.readFloat32(this.bb_pos + offset) : 3.14159;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testf = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 54);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testf2 = function () {
                var offset = this.bb.__offset(this.bb_pos, 56);
                return offset ? this.bb.readFloat32(this.bb_pos + offset) : 3.0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testf2 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 56);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat32(this.bb_pos + offset, value);
                return true;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testf3 = function () {
                var offset = this.bb.__offset(this.bb_pos, 58);
                return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
            };
            ;
            /**
             * @param {number} value
             * @returns {boolean}
             */
            Monster.prototype.mutate_testf3 = function (value) {
                var offset = this.bb.__offset(this.bb_pos, 58);
                if (offset === 0) {
                    return false;
                }
                this.bb.writeFloat32(this.bb_pos + offset, value);
                return true;
            };
            ;
            Monster.prototype.testarrayofstring2 = function (index, optionalEncoding) {
                var offset = this.bb.__offset(this.bb_pos, 60);
                return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testarrayofstring2Length = function () {
                var offset = this.bb.__offset(this.bb_pos, 60);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {number} index
             * @param {MyGame.Example.Ability=} obj
             * @returns {MyGame.Example.Ability}
             */
            Monster.prototype.testarrayofsortedstruct = function (index, obj) {
                var offset = this.bb.__offset(this.bb_pos, 62);
                return offset ? (obj || new MyGame.Example.Ability).__init(this.bb.__vector(this.bb_pos + offset) + index * 8, this.bb) : null;
            };
            ;
            /**
             * @returns {number}
             */
            Monster.prototype.testarrayofsortedstructLength = function () {
                var offset = this.bb.__offset(this.bb_pos, 62);
                return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             */
            Monster.startMonster = function (builder) {
                builder.startObject(30);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} posOffset
             */
            Monster.addPos = function (builder, posOffset) {
                builder.addFieldStruct(0, posOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} mana
             */
            Monster.addMana = function (builder, mana) {
                builder.addFieldInt16(1, mana, 150);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} hp
             */
            Monster.addHp = function (builder, hp) {
                builder.addFieldInt16(2, hp, 100);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} nameOffset
             */
            Monster.addName = function (builder, nameOffset) {
                builder.addFieldOffset(3, nameOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} inventoryOffset
             */
            Monster.addInventory = function (builder, inventoryOffset) {
                builder.addFieldOffset(5, inventoryOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {Array.<number>} data
             * @returns {flatbuffers.Offset}
             */
            Monster.createInventoryVector = function (builder, data) {
                if (!data) {
                    return null;
                }
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startInventoryVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {MyGame.Example.Color} color
             */
            Monster.addColor = function (builder, color) {
                builder.addFieldInt8(6, color, MyGame.Example.Color.Blue);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {MyGame.Example.Any} testType
             */
            Monster.addTestType = function (builder, testType) {
                builder.addFieldInt8(7, testType, MyGame.Example.Any.NONE);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testOffset
             */
            Monster.addTest = function (builder, testOffset) {
                builder.addFieldOffset(8, testOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} test4Offset
             */
            Monster.addTest4 = function (builder, test4Offset) {
                builder.addFieldOffset(9, test4Offset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTest4Vector = function (builder, numElems) {
                builder.startVector(4, numElems, 2);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testarrayofstringOffset
             */
            Monster.addTestarrayofstring = function (builder, testarrayofstringOffset) {
                builder.addFieldOffset(10, testarrayofstringOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {Array.<flatbuffers.Offset>} data
             * @returns {flatbuffers.Offset}
             */
            Monster.createTestarrayofstringVector = function (builder, data) {
                if (!data) {
                    return null;
                }
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTestarrayofstringVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testarrayoftablesOffset
             */
            Monster.addTestarrayoftables = function (builder, testarrayoftablesOffset) {
                builder.addFieldOffset(11, testarrayoftablesOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {Array.<flatbuffers.Offset>} data
             * @returns {flatbuffers.Offset}
             */
            Monster.createTestarrayoftablesVector = function (builder, data) {
                if (!data) {
                    return null;
                }
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTestarrayoftablesVector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} enemyOffset
             */
            Monster.addEnemy = function (builder, enemyOffset) {
                builder.addFieldOffset(12, enemyOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testnestedflatbufferOffset
             */
            Monster.addTestnestedflatbuffer = function (builder, testnestedflatbufferOffset) {
                builder.addFieldOffset(13, testnestedflatbufferOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {Array.<number>} data
             * @returns {flatbuffers.Offset}
             */
            Monster.createTestnestedflatbufferVector = function (builder, data) {
                if (!data) {
                    return null;
                }
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTestnestedflatbufferVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testemptyOffset
             */
            Monster.addTestempty = function (builder, testemptyOffset) {
                builder.addFieldOffset(14, testemptyOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {boolean} testbool
             */
            Monster.addTestbool = function (builder, testbool) {
                builder.addFieldInt8(15, +testbool, +false);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testhashs32Fnv1
             */
            Monster.addTesthashs32Fnv1 = function (builder, testhashs32Fnv1) {
                builder.addFieldInt32(16, testhashs32Fnv1, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testhashu32Fnv1
             */
            Monster.addTesthashu32Fnv1 = function (builder, testhashu32Fnv1) {
                builder.addFieldInt32(17, testhashu32Fnv1, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Long} testhashs64Fnv1
             */
            Monster.addTesthashs64Fnv1 = function (builder, testhashs64Fnv1) {
                builder.addFieldInt64(18, testhashs64Fnv1, builder.createLong(0, 0));
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Long} testhashu64Fnv1
             */
            Monster.addTesthashu64Fnv1 = function (builder, testhashu64Fnv1) {
                builder.addFieldInt64(19, testhashu64Fnv1, builder.createLong(0, 0));
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testhashs32Fnv1a
             */
            Monster.addTesthashs32Fnv1a = function (builder, testhashs32Fnv1a) {
                builder.addFieldInt32(20, testhashs32Fnv1a, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testhashu32Fnv1a
             */
            Monster.addTesthashu32Fnv1a = function (builder, testhashu32Fnv1a) {
                builder.addFieldInt32(21, testhashu32Fnv1a, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Long} testhashs64Fnv1a
             */
            Monster.addTesthashs64Fnv1a = function (builder, testhashs64Fnv1a) {
                builder.addFieldInt64(22, testhashs64Fnv1a, builder.createLong(0, 0));
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Long} testhashu64Fnv1a
             */
            Monster.addTesthashu64Fnv1a = function (builder, testhashu64Fnv1a) {
                builder.addFieldInt64(23, testhashu64Fnv1a, builder.createLong(0, 0));
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testarrayofboolsOffset
             */
            Monster.addTestarrayofbools = function (builder, testarrayofboolsOffset) {
                builder.addFieldOffset(24, testarrayofboolsOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {Array.<boolean>} data
             * @returns {flatbuffers.Offset}
             */
            Monster.createTestarrayofboolsVector = function (builder, data) {
                if (!data) {
                    return null;
                }
                builder.startVector(1, data.length, 1);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addInt8(+data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTestarrayofboolsVector = function (builder, numElems) {
                builder.startVector(1, numElems, 1);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testf
             */
            Monster.addTestf = function (builder, testf) {
                builder.addFieldFloat32(25, testf, 3.14159);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testf2
             */
            Monster.addTestf2 = function (builder, testf2) {
                builder.addFieldFloat32(26, testf2, 3.0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} testf3
             */
            Monster.addTestf3 = function (builder, testf3) {
                builder.addFieldFloat32(27, testf3, 0.0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testarrayofstring2Offset
             */
            Monster.addTestarrayofstring2 = function (builder, testarrayofstring2Offset) {
                builder.addFieldOffset(28, testarrayofstring2Offset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {Array.<flatbuffers.Offset>} data
             * @returns {flatbuffers.Offset}
             */
            Monster.createTestarrayofstring2Vector = function (builder, data) {
                if (!data) {
                    return null;
                }
                builder.startVector(4, data.length, 4);
                for (var i = data.length - 1; i >= 0; i--) {
                    builder.addOffset(data[i]);
                }
                return builder.endVector();
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTestarrayofstring2Vector = function (builder, numElems) {
                builder.startVector(4, numElems, 4);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} testarrayofsortedstructOffset
             */
            Monster.addTestarrayofsortedstruct = function (builder, testarrayofsortedstructOffset) {
                builder.addFieldOffset(29, testarrayofsortedstructOffset, 0);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {number} numElems
             */
            Monster.startTestarrayofsortedstructVector = function (builder, numElems) {
                builder.startVector(8, numElems, 4);
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @returns {flatbuffers.Offset}
             */
            Monster.endMonster = function (builder) {
                var offset = builder.endObject();
                builder.requiredField(offset, 10); // name
                return offset;
            };
            ;
            /**
             * @param {flatbuffers.Builder} builder
             * @param {flatbuffers.Offset} offset
             */
            Monster.finishMonsterBuffer = function (builder, offset) {
                builder.finish(offset, 'MONS');
            };
            ;
            return Monster;
        }());
        Example.Monster = Monster;
    })(Example = MyGame.Example || (MyGame.Example = {}));
})(MyGame = exports.MyGame || (exports.MyGame = {}));
