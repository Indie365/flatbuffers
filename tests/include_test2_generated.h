// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INCLUDETEST2_MYGAME_OTHERNAMESPACE_H_
#define FLATBUFFERS_GENERATED_INCLUDETEST2_MYGAME_OTHERNAMESPACE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MyGame {
namespace OtherNameSpace {

struct Unused;

struct TableB;
struct TableBBuilder;
struct TableBT;

bool operator==(const Unused &lhs, const Unused &rhs);
bool operator!=(const Unused &lhs, const Unused &rhs);
bool operator==(const TableBT &lhs, const TableBT &rhs);
bool operator!=(const TableBT &lhs, const TableBT &rhs);

inline const flatbuffers::TypeTable *UnusedTypeTable();

inline const flatbuffers::TypeTable *TableBTypeTable();

enum FromInclude : int64_t {
  FromInclude_IncludeVal = 0,
  FromInclude_MIN = FromInclude_IncludeVal,
  FromInclude_MAX = FromInclude_IncludeVal
};

inline const FromInclude (&EnumValuesFromInclude())[1] {
  static const FromInclude values[] = {
    FromInclude_IncludeVal
  };
  return values;
}

inline const char * const *EnumNamesFromInclude() {
  static const char * const names[2] = {
    "IncludeVal",
    nullptr
  };
  return names;
}

inline const char *EnumNameFromInclude(FromInclude e) {
  if (flatbuffers::IsOutRange(e, FromInclude_IncludeVal, FromInclude_IncludeVal)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFromInclude()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Unused FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t a_;

 public:
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UnusedTypeTable();
  }
  Unused()
      : a_(0) {
  }
  Unused(int32_t _a)
      : a_(flatbuffers::EndianScalar(_a)) {
  }
  int32_t a() const {
    return flatbuffers::EndianScalar(a_);
  }
  void mutate_a(int32_t _a) {
    flatbuffers::WriteScalar(&a_, _a);
  }
};
FLATBUFFERS_STRUCT_END(Unused, 4);

inline bool operator==(const Unused &lhs, const Unused &rhs) {
  return
      (lhs.a() == rhs.a());
}

inline bool operator!=(const Unused &lhs, const Unused &rhs) {
    return !(lhs == rhs);
}


struct TableBT : public flatbuffers::NativeTable {
  typedef TableB TableType;
  flatbuffers::unique_ptr<TableAT> a{};
  TableBT() = default;
  TableBT(const TableBT &o);
  TableBT(TableBT&&) FLATBUFFERS_NOEXCEPT = default;
  TableBT &operator=(TableBT o) FLATBUFFERS_NOEXCEPT;
};

struct TableB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TableBT NativeTableType;
  typedef TableBBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TableBTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A = 4
  };
  const TableA *a() const {
    return GetPointer<const TableA *>(VT_A);
  }
  TableA *mutable_a() {
    return GetPointer<TableA *>(VT_A);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_A) &&
           verifier.VerifyTable(a()) &&
           verifier.EndTable();
  }
  TableBT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TableBT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TableB> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TableBT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TableBBuilder {
  typedef TableB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(flatbuffers::Offset<TableA> a) {
    fbb_.AddOffset(TableB::VT_A, a);
  }
  explicit TableBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TableB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TableB>(end);
    return o;
  }
};

inline flatbuffers::Offset<TableB> CreateTableB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TableA> a = 0) {
  TableBBuilder builder_(_fbb);
  builder_.add_a(a);
  return builder_.Finish();
}

flatbuffers::Offset<TableB> CreateTableB(flatbuffers::FlatBufferBuilder &_fbb, const TableBT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const TableBT &lhs, const TableBT &rhs) {
  return
      ((lhs.a == rhs.a) || (lhs.a && rhs.a && *lhs.a == *rhs.a));
}

inline bool operator!=(const TableBT &lhs, const TableBT &rhs) {
    return !(lhs == rhs);
}


inline TableBT::TableBT(const TableBT &o)
      : a((o.a) ? new TableAT(*o.a) : nullptr) {
}

inline TableBT &TableBT::operator=(TableBT o) FLATBUFFERS_NOEXCEPT {
  std::swap(a, o.a);
  return *this;
}

inline TableBT *TableB::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TableBT>(new TableBT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TableB::UnPackTo(TableBT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = a(); if (_e) { if(_o->a) { _e->UnPackTo(_o->a.get(), _resolver); } else { _o->a = flatbuffers::unique_ptr<TableAT>(_e->UnPack(_resolver)); } } else if (_o->a) { _o->a.reset(); } }
}

inline flatbuffers::Offset<TableB> TableB::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TableBT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTableB(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TableB> CreateTableB(flatbuffers::FlatBufferBuilder &_fbb, const TableBT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TableBT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _a = _o->a ? CreateTableA(_fbb, _o->a.get(), _rehasher) : 0;
  return MyGame::OtherNameSpace::CreateTableB(
      _fbb,
      _a);
}

inline const flatbuffers::TypeTable *FromIncludeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_LONG, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    MyGame::OtherNameSpace::FromIncludeTypeTable
  };
  static const char * const names[] = {
    "IncludeVal"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *UnusedTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const int64_t values[] = { 0, 4 };
  static const char * const names[] = {
    "a"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 1, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TableBTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    TableATypeTable
  };
  static const char * const names[] = {
    "a"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace OtherNameSpace
}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_INCLUDETEST2_MYGAME_OTHERNAMESPACE_H_
