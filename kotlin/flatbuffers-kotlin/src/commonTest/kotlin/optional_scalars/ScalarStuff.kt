// automatically generated by the FlatBuffers compiler, do not modify

package optional_scalars

import com.google.flatbuffers.kotlin.*
@Suppress("unused")
class ScalarStuff : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : ScalarStuff = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : ScalarStuff = init(i, buffer)

    val justI8 : Byte get() = lookupField(4, 0 ) { bb.get(it + bufferPos) }

    val maybeI8 : Byte? get() = lookupField(6, null ) { bb.get(it + bufferPos) }

    val defaultI8 : Byte get() = lookupField(8, 42 ) { bb.get(it + bufferPos) }

    val justU8 : UByte get() = lookupField(10, 0u ) { bb.get(it + bufferPos).toUByte() }

    val maybeU8 : UByte? get() = lookupField(12, null ) { bb.get(it + bufferPos).toUByte() }

    val defaultU8 : UByte get() = lookupField(14, 42u ) { bb.get(it + bufferPos).toUByte() }

    val justI16 : Short get() = lookupField(16, 0 ) { bb.getShort(it + bufferPos) }

    val maybeI16 : Short? get() = lookupField(18, null ) { bb.getShort(it + bufferPos) }

    val defaultI16 : Short get() = lookupField(20, 42 ) { bb.getShort(it + bufferPos) }

    val justU16 : UShort get() = lookupField(22, 0u ) { bb.getShort(it + bufferPos).toUShort() }

    val maybeU16 : UShort? get() = lookupField(24, null ) { bb.getShort(it + bufferPos).toUShort() }

    val defaultU16 : UShort get() = lookupField(26, 42u ) { bb.getShort(it + bufferPos).toUShort() }

    val justI32 : Int get() = lookupField(28, 0 ) { bb.getInt(it + bufferPos) }

    val maybeI32 : Int? get() = lookupField(30, null ) { bb.getInt(it + bufferPos) }

    val defaultI32 : Int get() = lookupField(32, 42 ) { bb.getInt(it + bufferPos) }

    val justU32 : UInt get() = lookupField(34, 0u ) { bb.getInt(it + bufferPos).toUInt() }

    val maybeU32 : UInt? get() = lookupField(36, null ) { bb.getInt(it + bufferPos).toUInt() }

    val defaultU32 : UInt get() = lookupField(38, 42u ) { bb.getInt(it + bufferPos).toUInt() }

    val justI64 : Long get() = lookupField(40, 0L ) { bb.getLong(it + bufferPos) }

    val maybeI64 : Long? get() = lookupField(42, null ) { bb.getLong(it + bufferPos) }

    val defaultI64 : Long get() = lookupField(44, 42L ) { bb.getLong(it + bufferPos) }

    val justU64 : ULong get() = lookupField(46, 0UL ) { bb.getLong(it + bufferPos).toULong() }

    val maybeU64 : ULong? get() = lookupField(48, null ) { bb.getLong(it + bufferPos).toULong() }

    val defaultU64 : ULong get() = lookupField(50, 42UL ) { bb.getLong(it + bufferPos).toULong() }

    val justF32 : Float get() = lookupField(52, 0.0f ) { bb.getFloat(it + bufferPos) }

    val maybeF32 : Float? get() = lookupField(54, null ) { bb.getFloat(it + bufferPos) }

    val defaultF32 : Float get() = lookupField(56, 42.0f ) { bb.getFloat(it + bufferPos) }

    val justF64 : Double get() = lookupField(58, 0.0 ) { bb.getDouble(it + bufferPos) }

    val maybeF64 : Double? get() = lookupField(60, null ) { bb.getDouble(it + bufferPos) }

    val defaultF64 : Double get() = lookupField(62, 42.0 ) { bb.getDouble(it + bufferPos) }

    val justBool : Boolean get() = lookupField(64, false ) { 0.toByte() != bb.get(it + bufferPos) }

    val maybeBool : Boolean? get() = lookupField(66, null ) { 0.toByte() != bb.get(it + bufferPos) }

    val defaultBool : Boolean get() = lookupField(68, true ) { 0.toByte() != bb.get(it + bufferPos) }

    val justEnum : Byte get() = lookupField(70, 0 ) { bb.get(it + bufferPos) }

    val maybeEnum : Byte? get() = lookupField(72, null ) { bb.get(it + bufferPos) }

    val defaultEnum : Byte get() = lookupField(74, 1 ) { bb.get(it + bufferPos) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : ScalarStuff = asRoot(buffer, ScalarStuff())
        fun asRoot(buffer: ReadWriteBuffer, obj: ScalarStuff) : ScalarStuff = obj.assign(buffer.getInt(buffer.limit) + buffer.limit, buffer)

        fun ScalarStuffBufferHasIdentifier(buffer: ReadWriteBuffer) : Boolean = hasIdentifier(buffer, "NULL")

        fun createScalarStuff(builder: FlatBufferBuilder, justI8: Byte, maybeI8: Byte?, defaultI8: Byte, justU8: UByte, maybeU8: UByte?, defaultU8: UByte, justI16: Short, maybeI16: Short?, defaultI16: Short, justU16: UShort, maybeU16: UShort?, defaultU16: UShort, justI32: Int, maybeI32: Int?, defaultI32: Int, justU32: UInt, maybeU32: UInt?, defaultU32: UInt, justI64: Long, maybeI64: Long?, defaultI64: Long, justU64: ULong, maybeU64: ULong?, defaultU64: ULong, justF32: Float, maybeF32: Float?, defaultF32: Float, justF64: Double, maybeF64: Double?, defaultF64: Double, justBool: Boolean, maybeBool: Boolean?, defaultBool: Boolean, justEnum: Byte, maybeEnum: Byte?, defaultEnum: Byte) : Int {
            builder.startTable(36)
            addDefaultF64(builder, defaultF64)
            maybeF64?.run { addMaybeF64(builder, maybeF64) }
            addJustF64(builder, justF64)
            addDefaultU64(builder, defaultU64)
            maybeU64?.run { addMaybeU64(builder, maybeU64) }
            addJustU64(builder, justU64)
            addDefaultI64(builder, defaultI64)
            maybeI64?.run { addMaybeI64(builder, maybeI64) }
            addJustI64(builder, justI64)
            addDefaultF32(builder, defaultF32)
            maybeF32?.run { addMaybeF32(builder, maybeF32) }
            addJustF32(builder, justF32)
            addDefaultU32(builder, defaultU32)
            maybeU32?.run { addMaybeU32(builder, maybeU32) }
            addJustU32(builder, justU32)
            addDefaultI32(builder, defaultI32)
            maybeI32?.run { addMaybeI32(builder, maybeI32) }
            addJustI32(builder, justI32)
            addDefaultU16(builder, defaultU16)
            maybeU16?.run { addMaybeU16(builder, maybeU16) }
            addJustU16(builder, justU16)
            addDefaultI16(builder, defaultI16)
            maybeI16?.run { addMaybeI16(builder, maybeI16) }
            addJustI16(builder, justI16)
            addDefaultEnum(builder, defaultEnum)
            maybeEnum?.run { addMaybeEnum(builder, maybeEnum) }
            addJustEnum(builder, justEnum)
            addDefaultBool(builder, defaultBool)
            maybeBool?.run { addMaybeBool(builder, maybeBool) }
            addJustBool(builder, justBool)
            addDefaultU8(builder, defaultU8)
            maybeU8?.run { addMaybeU8(builder, maybeU8) }
            addJustU8(builder, justU8)
            addDefaultI8(builder, defaultI8)
            maybeI8?.run { addMaybeI8(builder, maybeI8) }
            addJustI8(builder, justI8)
            return endScalarStuff(builder)
        }
        fun startScalarStuff(builder: FlatBufferBuilder) = builder.startTable(36)

        fun addJustI8(builder: FlatBufferBuilder, justI8: Byte) = builder.addByte(0, justI8, 0)

        fun addMaybeI8(builder: FlatBufferBuilder, maybeI8: Byte) = builder.addByte(1, maybeI8, 0)

        fun addDefaultI8(builder: FlatBufferBuilder, defaultI8: Byte) = builder.addByte(2, defaultI8, 42)

        fun addJustU8(builder: FlatBufferBuilder, justU8: UByte) = builder.addByte(3, justU8.toByte(), 0)

        fun addMaybeU8(builder: FlatBufferBuilder, maybeU8: UByte) = builder.addByte(4, maybeU8.toByte(), 0)

        fun addDefaultU8(builder: FlatBufferBuilder, defaultU8: UByte) = builder.addByte(5, defaultU8.toByte(), 42)

        fun addJustI16(builder: FlatBufferBuilder, justI16: Short) = builder.addShort(6, justI16, 0)

        fun addMaybeI16(builder: FlatBufferBuilder, maybeI16: Short) = builder.addShort(7, maybeI16, 0)

        fun addDefaultI16(builder: FlatBufferBuilder, defaultI16: Short) = builder.addShort(8, defaultI16, 42)

        fun addJustU16(builder: FlatBufferBuilder, justU16: UShort) = builder.addShort(9, justU16.toShort(), 0)

        fun addMaybeU16(builder: FlatBufferBuilder, maybeU16: UShort) = builder.addShort(10, maybeU16.toShort(), 0)

        fun addDefaultU16(builder: FlatBufferBuilder, defaultU16: UShort) = builder.addShort(11, defaultU16.toShort(), 42)

        fun addJustI32(builder: FlatBufferBuilder, justI32: Int) = builder.addInt(12, justI32, 0)

        fun addMaybeI32(builder: FlatBufferBuilder, maybeI32: Int) = builder.addInt(13, maybeI32, 0)

        fun addDefaultI32(builder: FlatBufferBuilder, defaultI32: Int) = builder.addInt(14, defaultI32, 42)

        fun addJustU32(builder: FlatBufferBuilder, justU32: UInt) = builder.addInt(15, justU32.toInt(), 0)

        fun addMaybeU32(builder: FlatBufferBuilder, maybeU32: UInt) = builder.addInt(16, maybeU32.toInt(), 0)

        fun addDefaultU32(builder: FlatBufferBuilder, defaultU32: UInt) = builder.addInt(17, defaultU32.toInt(), 42)

        fun addJustI64(builder: FlatBufferBuilder, justI64: Long) = builder.addLong(18, justI64, 0L)

        fun addMaybeI64(builder: FlatBufferBuilder, maybeI64: Long) = builder.addLong(19, maybeI64, 0)

        fun addDefaultI64(builder: FlatBufferBuilder, defaultI64: Long) = builder.addLong(20, defaultI64, 42L)

        fun addJustU64(builder: FlatBufferBuilder, justU64: ULong) = builder.addLong(21, justU64.toLong(), 0)

        fun addMaybeU64(builder: FlatBufferBuilder, maybeU64: ULong) = builder.addLong(22, maybeU64.toLong(), 0)

        fun addDefaultU64(builder: FlatBufferBuilder, defaultU64: ULong) = builder.addLong(23, defaultU64.toLong(), 42)

        fun addJustF32(builder: FlatBufferBuilder, justF32: Float) = builder.addFloat(24, justF32, 0.0)

        fun addMaybeF32(builder: FlatBufferBuilder, maybeF32: Float) = builder.addFloat(25, maybeF32, 0.0)

        fun addDefaultF32(builder: FlatBufferBuilder, defaultF32: Float) = builder.addFloat(26, defaultF32, 42.0)

        fun addJustF64(builder: FlatBufferBuilder, justF64: Double) = builder.addDouble(27, justF64, 0.0)

        fun addMaybeF64(builder: FlatBufferBuilder, maybeF64: Double) = builder.addDouble(28, maybeF64, 0.0)

        fun addDefaultF64(builder: FlatBufferBuilder, defaultF64: Double) = builder.addDouble(29, defaultF64, 42.0)

        fun addJustBool(builder: FlatBufferBuilder, justBool: Boolean) = builder.addBoolean(30, justBool, false)

        fun addMaybeBool(builder: FlatBufferBuilder, maybeBool: Boolean) = builder.addBoolean(31, maybeBool, false)

        fun addDefaultBool(builder: FlatBufferBuilder, defaultBool: Boolean) = builder.addBoolean(32, defaultBool, true)

        fun addJustEnum(builder: FlatBufferBuilder, justEnum: Byte) = builder.addByte(33, justEnum, 0)

        fun addMaybeEnum(builder: FlatBufferBuilder, maybeEnum: Byte) = builder.addByte(34, maybeEnum, 0)

        fun addDefaultEnum(builder: FlatBufferBuilder, defaultEnum: Byte) = builder.addByte(35, defaultEnum, 1)

        fun endScalarStuff(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }

        fun finishScalarStuffBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "NULL")

        fun finishSizePrefixedScalarStuffBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "NULL")
    }
}
