// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example

import com.google.flatbuffers.kotlin.*
@Suppress("unused")
class Referrable : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : Referrable = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : Referrable = init(i, buffer)

    val id : ULong get() = lookupField(4, 0UL ) { bb.getULong(it + bufferPos) }

    override fun keysCompare(o1: Int, o2: Int, buffer: ReadWriteBuffer) : Int {
        val a = buffer.getULong(offset(4, o1, buffer))
        val b = buffer.getULong(offset(4, o2, buffer))
        return (a - b).toInt().sign()
    }
    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : Referrable = asRoot(buffer, Referrable())
        fun asRoot(buffer: ReadWriteBuffer, obj: Referrable) : Referrable = obj.assign(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createReferrable(builder: FlatBufferBuilder, id: ULong) : Int {
            builder.startTable(1)
            addId(builder, id)
            return endReferrable(builder)
        }
        fun startReferrable(builder: FlatBufferBuilder) = builder.startTable(1)

        fun addId(builder: FlatBufferBuilder, id: ULong)  {
            builder.add(id)
            builder.slot(0)
        }

        fun endReferrable(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }

        fun lookupByKey(obj: Referrable?, vectorLocation: Int, key: ULong, bb: ReadWriteBuffer) : Referrable? {
            var span = bb.getInt(vectorLocation - 4)
            var start = 0
            while (span != 0) {
                var middle = span / 2
                val tableOffset = indirect(vectorLocation + 4 * (start + middle), bb)
                val value = bb.getULong(offset(4, bb.capacity - tableOffset, bb))
                val comp = value.compareTo(key)
                when {
                    comp > 0 -> span = middle
                    comp < 0 -> {
                        middle++
                        start += middle
                        span -= middle
                    }
                    else -> {
                        return (obj ?: Referrable()).assign(tableOffset, bb)
                    }
                }
            }
            return null
        }
    }
}
