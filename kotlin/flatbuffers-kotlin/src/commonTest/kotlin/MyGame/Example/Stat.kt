// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example

import com.google.flatbuffers.kotlin.*
@Suppress("unused")
class Stat : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : Stat = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : Stat = init(i, buffer)

    val id : String? get() = lookupField(4, null ) { string(it + bufferPos) }
    fun idAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 4, 1)

    val val_ : Long get() = lookupField(6, 0L ) { bb.getLong(it + bufferPos) }

    val count : UShort get() = lookupField(8, 0u ) { bb.getUShort(it + bufferPos) }

    override fun keysCompare(o1: Offset<*>, o2: Offset<*>, buffer: ReadWriteBuffer) : Int {
        val a = buffer.getUShort(offset(8, o1, buffer))
        val b = buffer.getUShort(offset(8, o2, buffer))
        return (a - b).toInt().sign()
    }
    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : Stat = asRoot(buffer, Stat())
        fun asRoot(buffer: ReadWriteBuffer, obj: Stat) : Stat = obj.assign(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createStat(builder: FlatBufferBuilder, idOffset: Offset<String>, val_: Long, count: UShort) : Offset<Stat> {
            builder.startTable(3)
            addVal_(builder, val_)
            addId(builder, idOffset)
            addCount(builder, count)
            return endStat(builder)
        }
        fun startStat(builder: FlatBufferBuilder) = builder.startTable(3)

        fun addId(builder: FlatBufferBuilder, id: Offset<String>) = builder.addOffset(0, id, null)

        fun addVal_(builder: FlatBufferBuilder, val_: Long) = builder.add(1, val_, 0L)

        fun addCount(builder: FlatBufferBuilder, count: UShort)  {
            builder.add(count)
            builder.slot(2)
        }

        fun endStat(builder: FlatBufferBuilder) : Offset<Stat> {
            val o: Offset<Stat> = builder.endTable()
            return o
        }

        fun lookupByKey(obj: Stat?, vectorLocation: Int, key: UShort, bb: ReadWriteBuffer) : Stat? {
            var span = bb.getInt(vectorLocation - 4)
            var start = 0
            while (span != 0) {
                var middle = span / 2
                val tableOffset = indirect(vectorLocation + 4 * (start + middle), bb)
                val value = bb.getUShort(offset(8, (bb.capacity - tableOffset).toOffset<Int>(), bb))
                val comp = value.compareTo(key)
                when {
                    comp > 0 -> span = middle
                    comp < 0 -> {
                        middle++
                        start += middle
                        span -= middle
                    }
                    else -> {
                        return (obj ?: Stat()).assign(tableOffset, bb)
                    }
                }
            }
            return null
        }
    }
}
