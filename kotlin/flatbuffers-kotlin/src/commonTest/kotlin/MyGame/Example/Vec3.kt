// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example

import com.google.flatbuffers.kotlin.*
@Suppress("unused")
class Vec3 : Struct() {

    fun init(i: Int, buffer: ReadWriteBuffer) : Vec3 = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : Vec3 = init(i, buffer)

    val x : Float get() = bb.getFloat(bufferPos + 0)

    val y : Float get() = bb.getFloat(bufferPos + 4)

    val z : Float get() = bb.getFloat(bufferPos + 8)

    val test1 : Double get() = bb.getDouble(bufferPos + 16)

    val test2 : UByte get() = bb.get(bufferPos + 24).toUByte()

    val test3 : MyGame.Example.Test? get() = test3(MyGame.Example.Test())
    fun test3(obj: MyGame.Example.Test) : MyGame.Example.Test? = obj.assign(bufferPos + 26, bb)

    companion object {

        fun createVec3(builder: FlatBufferBuilder, x: Float, y: Float, z: Float, test1: Double, test2: UByte, test3_a: Short, test3_b: Byte) : Int {
            builder.prep(8, 32)
            builder.pad(2)
            builder.prep(2, 4)
            builder.pad(1)
            builder.putByte(test3_b)
            builder.putShort(test3_a)
            builder.pad(1)
            builder.putByte(test2.toByte())
            builder.putDouble(test1)
            builder.pad(4)
            builder.putFloat(z)
            builder.putFloat(y)
            builder.putFloat(x)
            return builder.offset()
        }
    }
}
