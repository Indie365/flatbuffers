// automatically generated by the FlatBuffers compiler, do not modify

package DictionaryLookup

import com.google.flatbuffers.kotlin.*
import kotlin.math.sign
@Suppress("unused")
class LongFloatEntry : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : LongFloatEntry = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : LongFloatEntry = init(i, buffer)

    val key : Long get() = lookupField(4, 0L ) { bb.getLong(it + bufferPos) }

    val value : Float get() = lookupField(6, 0.0f ) { bb.getFloat(it + bufferPos) }

    override fun keysCompare(o1: Int, o2: Int, buffer: ReadWriteBuffer) : Int {
        val val_1 = buffer.getLong(offset(4, o1, buffer))
        val val_2 = buffer.getLong(offset(4, o2, buffer))
        return (val_1 - val_2).sign
    }
    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : LongFloatEntry = asRoot(buffer, LongFloatEntry())
        fun asRoot(buffer: ReadWriteBuffer, obj: LongFloatEntry) : LongFloatEntry = obj.assign(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createLongFloatEntry(builder: FlatBufferBuilder, key: Long, value: Float) : Int {
            builder.startTable(2)
            addKey(builder, key)
            addValue(builder, value)
            return endLongFloatEntry(builder)
        }
        fun startLongFloatEntry(builder: FlatBufferBuilder) = builder.startTable(2)

        fun addKey(builder: FlatBufferBuilder, key: Long)  {
            builder.addLong(key)
            builder.slot(0)
        }

        fun addValue(builder: FlatBufferBuilder, value: Float) = builder.addFloat(1, value, 0.0)

        fun endLongFloatEntry(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }

        fun lookupByKey(obj: LongFloatEntry?, vectorLocation: Int, key: Long, bb: ReadWriteBuffer) : LongFloatEntry? {
            var span = bb.getInt(vectorLocation - 4)
            var start = 0
            while (span != 0) {
                var middle = span / 2
                val tableOffset = indirect(vectorLocation + 4 * (start + middle), bb)
                val value = bb.getLong(offset(4, bb.capacity - tableOffset, bb))
                val comp = value.compareTo(key)
                when {
                    comp > 0 -> span = middle
                    comp < 0 -> {
                        middle++
                        start += middle
                        span -= middle
                    }
                    else -> {
                        return (obj ?: LongFloatEntry()).assign(tableOffset, bb)
                    }
                }
            }
            return null
        }
    }
}
