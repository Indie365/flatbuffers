// automatically generated by the FlatBuffers compiler, do not modify

package NamespaceC

import com.google.flatbuffers.kotlin.*
@Suppress("unused")
class TableInC : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : TableInC = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : TableInC = init(i, buffer)

    val referToA1 : NamespaceA.TableInFirstNS? get() = referToA1(NamespaceA.TableInFirstNS())
    fun referToA1(obj: NamespaceA.TableInFirstNS) : NamespaceA.TableInFirstNS? = lookupField(4, null ) { obj.assign(indirect(it + bufferPos), bb) }

    val referToA2 : NamespaceA.SecondTableInA? get() = referToA2(NamespaceA.SecondTableInA())
    fun referToA2(obj: NamespaceA.SecondTableInA) : NamespaceA.SecondTableInA? = lookupField(6, null ) { obj.assign(indirect(it + bufferPos), bb) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : TableInC = asRoot(buffer, TableInC())
        fun asRoot(buffer: ReadWriteBuffer, obj: TableInC) : TableInC = obj.assign(buffer.getInt(buffer.limit) + buffer.limit, buffer)


        fun createTableInC(builder: FlatBufferBuilder, referToA1Offset: Int, referToA2Offset: Int) : Int {
            builder.startTable(2)
            addReferToA2(builder, referToA2Offset)
            addReferToA1(builder, referToA1Offset)
            return endTableInC(builder)
        }
        fun startTableInC(builder: FlatBufferBuilder) = builder.startTable(2)

        fun addReferToA1(builder: FlatBufferBuilder, referToA1: Int) = builder.addOffset(0, referToA1, 0)

        fun addReferToA2(builder: FlatBufferBuilder, referToA2: Int) = builder.addOffset(1, referToA2, 0)

        fun endTableInC(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
