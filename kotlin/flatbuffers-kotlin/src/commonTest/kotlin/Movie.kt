// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.kotlin.*
@Suppress("unused")
class Movie : Table() {

    fun init(i: Int, buffer: ReadWriteBuffer) : Movie = reset(i, buffer)
    fun assign(i: Int, buffer: ReadWriteBuffer) : Movie = init(i, buffer)

    val mainCharacterType : UByte get() = lookupField(4, 0u ) { bb.getUByte(it + bufferPos) }

    fun mainCharacter(obj: Table) : Table? = lookupField(6, null ) { union(obj, it + bufferPos) }

    fun charactersType(j: Int) : UByte = lookupField(8, 0u ) { bb.getUByte(vector(it) + j * 1) }
    val charactersTypeLength : Int get() = lookupField(8, 0 ) { vectorLength(it) }
    fun charactersTypeAsBuffer() : ReadBuffer = vectorAsBuffer(bb, 8, 1)

    fun characters(obj: Table, j: Int) : Table? = lookupField(10, null ) { union(obj, vector(it) + j * 4) }
    val charactersLength : Int get() = lookupField(10, 0 ) { vectorLength(it) }

    companion object {
        fun validateVersion() = VERSION_2_0_8

        fun asRoot(buffer: ReadWriteBuffer) : Movie = asRoot(buffer, Movie())
        fun asRoot(buffer: ReadWriteBuffer, obj: Movie) : Movie = obj.assign(buffer.getInt(buffer.limit) + buffer.limit, buffer)

        fun MovieBufferHasIdentifier(buffer: ReadWriteBuffer) : Boolean = hasIdentifier(buffer, "MOVI")

        fun createMovie(builder: FlatBufferBuilder, mainCharacterType: UByte, mainCharacterOffset: Int, charactersTypeOffset: Int, charactersOffset: Int) : Int {
            builder.startTable(4)
            addCharacters(builder, charactersOffset)
            addCharactersType(builder, charactersTypeOffset)
            addMainCharacter(builder, mainCharacterOffset)
            addMainCharacterType(builder, mainCharacterType)
            return endMovie(builder)
        }
        fun startMovie(builder: FlatBufferBuilder) = builder.startTable(4)

        fun addMainCharacterType(builder: FlatBufferBuilder, mainCharacterType: UByte) = builder.add(0, mainCharacterType, 0)

        fun addMainCharacter(builder: FlatBufferBuilder, mainCharacter: Int) = builder.addOffset(1, mainCharacter, 0)

        fun addCharactersType(builder: FlatBufferBuilder, charactersType: Int) = builder.addOffset(2, charactersType, 0)

        fun createCharactersTypeVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.add(data[i])
            }
            return builder.endVector()
        }

        fun startCharactersTypeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)

        fun addCharacters(builder: FlatBufferBuilder, characters: Int) = builder.addOffset(3, characters, 0)

        fun createCharactersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }

        fun startCharactersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)

        fun endMovie(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }

        fun finishMovieBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MOVI")

        fun finishSizePrefixedMovieBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MOVI")
    }
}
