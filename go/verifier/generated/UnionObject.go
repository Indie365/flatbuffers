// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type UnionObject byte

const (
	UnionObjectNONE       UnionObject = 0
	UnionObjectComplex    UnionObject = 1
	UnionObjectUByteSlice UnionObject = 2
)

var EnumNamesUnionObject = map[UnionObject]string{
	UnionObjectNONE:       "NONE",
	UnionObjectComplex:    "Complex",
	UnionObjectUByteSlice: "UByteSlice",
}

var EnumValuesUnionObject = map[string]UnionObject{
	"NONE":       UnionObjectNONE,
	"Complex":    UnionObjectComplex,
	"UByteSlice": UnionObjectUByteSlice,
}

func (v UnionObject) String() string {
	if s, ok := EnumNamesUnionObject[v]; ok {
		return s
	}
	return "UnionObject(" + strconv.FormatInt(int64(v), 10) + ")"
}

type UnionObjectT struct {
	Type UnionObject
	Value interface{}
}

func (t *UnionObjectT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case UnionObjectComplex:
		return t.Value.(*ComplexT).Pack(builder)
	case UnionObjectUByteSlice:
		return t.Value.(*UByteSliceT).Pack(builder)
	}
	return 0
}

func (rcv UnionObject) UnPack(table flatbuffers.Table) *UnionObjectT {
	switch rcv {
	case UnionObjectComplex:
		x := Complex{_tab: table}
		return &UnionObjectT{ Type: UnionObjectComplex, Value: x.UnPack() }
	case UnionObjectUByteSlice:
		x := UByteSlice{_tab: table}
		return &UnionObjectT{ Type: UnionObjectUByteSlice, Value: x.UnPack() }
	}
	return nil
}
