// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GunT struct {
	Name string
	Damage int16
	Time int64
}

func (t *GunT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	GunStart(builder)
	GunAddName(builder, nameOffset)
	GunAddDamage(builder, t.Damage)
	GunAddTime(builder, t.Time)
	return GunEnd(builder)
}

func (rcv *Gun) UnPackTo(t *GunT) {
	t.Name = string(rcv.Name())
	t.Damage = rcv.Damage()
	t.Time = rcv.Time()
}

func (rcv *Gun) UnPack() *GunT {
	if rcv == nil { return nil }
	t := &GunT{}
	rcv.UnPackTo(t)
	return t
}

type Gun struct {
	_tab flatbuffers.Table
}

func GetRootAsGun(buf []byte, offset flatbuffers.UOffsetT) *Gun {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Gun{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Gun) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Gun) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Gun) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Gun) Damage() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Gun) MutateDamage(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *Gun) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Gun) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func GunStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GunAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func GunAddDamage(builder *flatbuffers.Builder, damage int16) {
	builder.PrependInt16Slot(1, damage, 0)
}
func GunAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(2, time, 0)
}
func GunEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
