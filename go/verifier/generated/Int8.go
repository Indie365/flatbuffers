// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Int8T struct {
	Field int8
}

func (t *Int8T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	Int8Start(builder)
	Int8AddField(builder, t.Field)
	return Int8End(builder)
}

func (rcv *Int8) UnPackTo(t *Int8T) {
	t.Field = rcv.Field()
}

func (rcv *Int8) UnPack() *Int8T {
	if rcv == nil { return nil }
	t := &Int8T{}
	rcv.UnPackTo(t)
	return t
}

type Int8 struct {
	_tab flatbuffers.Table
}

func GetRootAsInt8(buf []byte, offset flatbuffers.UOffsetT) *Int8 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Int8{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Int8) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Int8) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Int8) Field() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Int8) MutateField(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func Int8Start(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func Int8AddField(builder *flatbuffers.Builder, field int8) {
	builder.PrependInt8Slot(0, field, 0)
}
func Int8End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
