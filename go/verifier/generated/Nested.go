// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NestedT struct {
	Field1 int8
	Field3 EnumType
	Field4 []byte
	Field5 *UnionObjectT
}

func (t *NestedT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	field4Offset := flatbuffers.UOffsetT(0)
	if t.Field4 != nil {
		field4Offset = builder.CreateByteString(t.Field4)
	}
	field5Offset := t.Field5.Pack(builder)
	
	NestedStart(builder)
	NestedAddField1(builder, t.Field1)
	NestedAddField3(builder, t.Field3)
	NestedAddField4(builder, field4Offset)
	if t.Field5 != nil {
		NestedAddField5Type(builder, t.Field5.Type)
	}
	NestedAddField5(builder, field5Offset)
	return NestedEnd(builder)
}

func (rcv *Nested) UnPackTo(t *NestedT) {
	t.Field1 = rcv.Field1()
	t.Field3 = rcv.Field3()
	t.Field4 = rcv.Field4Bytes()
	field5Table := flatbuffers.Table{}
	if rcv.Field5(&field5Table) {
		t.Field5 = rcv.Field5Type().UnPack(field5Table)
	}
}

func (rcv *Nested) UnPack() *NestedT {
	if rcv == nil { return nil }
	t := &NestedT{}
	rcv.UnPackTo(t)
	return t
}

type Nested struct {
	_tab flatbuffers.Table
}

func GetRootAsNested(buf []byte, offset flatbuffers.UOffsetT) *Nested {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Nested{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Nested) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Nested) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Nested) Field1() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Nested) MutateField1(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *Nested) Field3() EnumType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return EnumType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Nested) MutateField3(n EnumType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *Nested) Field4(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Nested) Field4Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Nested) Field4Bytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Nested) MutateField4(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Nested) Field5Type() UnionObject {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return UnionObject(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Nested) MutateField5Type(n UnionObject) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *Nested) Field5(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func NestedStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func NestedAddField1(builder *flatbuffers.Builder, field1 int8) {
	builder.PrependInt8Slot(0, field1, 0)
}
func NestedAddField3(builder *flatbuffers.Builder, field3 EnumType) {
	builder.PrependByteSlot(2, byte(field3), 0)
}
func NestedAddField4(builder *flatbuffers.Builder, field4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(field4), 0)
}
func NestedStartField4Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func NestedAddField5Type(builder *flatbuffers.Builder, field5Type UnionObject) {
	builder.PrependByteSlot(4, byte(field5Type), 0)
}
func NestedAddField5(builder *flatbuffers.Builder, field5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(field5), 0)
}
func NestedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
