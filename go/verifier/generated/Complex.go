// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ComplexT struct {
	Field1 int8
	Field2 int16
	Field3 int32
	Field4 int64
	Field6 []byte
	Field7 EnumType
}

func (t *ComplexT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	field6Offset := flatbuffers.UOffsetT(0)
	if t.Field6 != nil {
		field6Offset = builder.CreateByteString(t.Field6)
	}
	ComplexStart(builder)
	ComplexAddField1(builder, t.Field1)
	ComplexAddField2(builder, t.Field2)
	ComplexAddField3(builder, t.Field3)
	ComplexAddField4(builder, t.Field4)
	ComplexAddField6(builder, field6Offset)
	ComplexAddField7(builder, t.Field7)
	return ComplexEnd(builder)
}

func (rcv *Complex) UnPackTo(t *ComplexT) {
	t.Field1 = rcv.Field1()
	t.Field2 = rcv.Field2()
	t.Field3 = rcv.Field3()
	t.Field4 = rcv.Field4()
	t.Field6 = rcv.Field6Bytes()
	t.Field7 = rcv.Field7()
}

func (rcv *Complex) UnPack() *ComplexT {
	if rcv == nil { return nil }
	t := &ComplexT{}
	rcv.UnPackTo(t)
	return t
}

type Complex struct {
	_tab flatbuffers.Table
}

func GetRootAsComplex(buf []byte, offset flatbuffers.UOffsetT) *Complex {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Complex{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Complex) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Complex) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Complex) Field1() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Complex) MutateField1(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *Complex) Field2() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Complex) MutateField2(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *Complex) Field3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Complex) MutateField3(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Complex) Field4() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Complex) MutateField4(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Complex) Field6(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Complex) Field6Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Complex) Field6Bytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Complex) MutateField6(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Complex) Field7() EnumType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return EnumType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Complex) MutateField7(n EnumType) bool {
	return rcv._tab.MutateByteSlot(16, byte(n))
}

func ComplexStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ComplexAddField1(builder *flatbuffers.Builder, field1 int8) {
	builder.PrependInt8Slot(0, field1, 0)
}
func ComplexAddField2(builder *flatbuffers.Builder, field2 int16) {
	builder.PrependInt16Slot(1, field2, 0)
}
func ComplexAddField3(builder *flatbuffers.Builder, field3 int32) {
	builder.PrependInt32Slot(2, field3, 0)
}
func ComplexAddField4(builder *flatbuffers.Builder, field4 int64) {
	builder.PrependInt64Slot(3, field4, 0)
}
func ComplexAddField6(builder *flatbuffers.Builder, field6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(field6), 0)
}
func ComplexStartField6Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ComplexAddField7(builder *flatbuffers.Builder, field7 EnumType) {
	builder.PrependByteSlot(6, byte(field7), 0)
}
func ComplexEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
