// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, non_constant_identifier_names

library my_game.sample;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Color {
  final int value;
  const Color._(this.value);

  factory Color.fromValue(int value) {
    if (value == null) return null;
    if (value < minValue || maxValue < value) {
      throw new RangeError.range(value, minValue, maxValue);
    }
    return values[value - minValue];
  }

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => minValue <= value && value <= maxValue;

  static const Color Red = const Color._(0);
  static const Color Green = const Color._(1);
  static const Color Blue = const Color._(2);
  static get values => [Red,Green,Blue,];

  static const fb.Reader<Color> reader = const _ColorReader();

  @override
  String toString() {
    return 'Color{value: $value}';
  }
}

class _ColorReader extends fb.Reader<Color> {
  const _ColorReader();

  @override
  int get size => 1;

  @override
  Color read(fb.BufferContext bc, int offset) =>
      new Color.fromValue(const fb.Int8Reader().read(bc, offset));
}

class EquipmentTypeId {
  final int value;
  const EquipmentTypeId._(this.value);

  factory EquipmentTypeId.fromValue(int value) {
    if (value == null) return null;
    if (value < minValue || maxValue < value) {
      throw new RangeError.range(value, minValue, maxValue);
    }
    return values[value - minValue];
  }

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => minValue <= value && value <= maxValue;

  static const EquipmentTypeId NONE = const EquipmentTypeId._(0);
  static const EquipmentTypeId Weapon = const EquipmentTypeId._(1);
  static get values => [NONE,Weapon,];

  static const fb.Reader<EquipmentTypeId> reader = const _EquipmentTypeIdReader();

  @override
  String toString() {
    return 'EquipmentTypeId{value: $value}';
  }
}

class _EquipmentTypeIdReader extends fb.Reader<EquipmentTypeId> {
  const _EquipmentTypeIdReader();

  @override
  int get size => 1;

  @override
  EquipmentTypeId read(fb.BufferContext bc, int offset) =>
      new EquipmentTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

/// Vec3
abstract class Vec3 {
  double get x;
  double get y;
  double get z;

  factory Vec3(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Vec3> reader = const _Vec3Reader();

}

class _Vec3Impl implements Vec3 {
  final fb.BufferContext _bc;
  final int _bcOffset;

  _Vec3Impl(this._bc, this._bcOffset);

  double _x;
  @override
  double get x {
    _x ??= const fb.Float32Reader().read(_bc, _bcOffset + 0);
    return _x;
  }

  double _y;
  @override
  double get y {
    _y ??= const fb.Float32Reader().read(_bc, _bcOffset + 4);
    return _y;
  }

  double _z;
  @override
  double get z {
    _z ??= const fb.Float32Reader().read(_bc, _bcOffset + 8);
    return _z;
  }

  @override
  String toString() {
    return 'Vec3{x: $x, y: $y, z: $z}';
  }
}

class _Vec3Reader extends fb.StructReader<_Vec3Impl> {
  const _Vec3Reader();

  @override
  int get size => 12;

  @override
  _Vec3Impl createObject(fb.BufferContext bc, int offset) => 
    new _Vec3Impl(bc, offset);
}

class Vec3Builder extends fb.BuilderHelper {
  final double _x;
  final double _y;
  final double _z;

  Vec3Builder({
    double x,
    double y,
    double z,
  })
      : _x = x,
        _y = y,
        _z = z;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder, { bool internStrings = false }) {
    assert(fbBuilder != null);

    fbBuilder.putFloat32(_z);
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes() {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset);
  }
}
/// Monster
abstract class Monster {
  Vec3 get pos;
  int get mana;
  int get hp;
  String get name;
  List<int> get inventory;
  Color get color;
  List<Weapon> get weapons;
  EquipmentTypeId get equippedType;
  dynamic get equipped;

  factory Monster(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Monster> reader = const _MonsterReader();

}

class _MonsterImpl implements Monster {
  final fb.BufferContext _bc;
  final int _bcOffset;

  _MonsterImpl(this._bc, this._bcOffset);

  Vec3 _pos;
  @override
  Vec3 get pos {
    _pos ??= 
        Vec3.reader.vTableGet(_bc, _bcOffset, 4, null);
    return _pos;
  }

  int _mana;
  @override
  int get mana {
    _mana ??= 
        const fb.Int16Reader().vTableGet(_bc, _bcOffset, 6, 150);
    return _mana;
  }

  int _hp;
  @override
  int get hp {
    _hp ??= 
        const fb.Int16Reader().vTableGet(_bc, _bcOffset, 8, 100);
    return _hp;
  }

  String _name;
  @override
  String get name {
    _name ??= 
        const fb.StringReader().vTableGet(_bc, _bcOffset, 10, null);
    return _name;
  }

  List<int> _inventory;
  @override
  List<int> get inventory {
    _inventory ??= 
        const fb.ListReader<int>(const fb.Uint8Reader()).vTableGet(_bc, _bcOffset, 14, null);
    return _inventory;
  }

  Color _color;
  @override
  Color get color {
    _color ??= new Color.fromValue(
        const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 2));
    return _color;
  }

  List<Weapon> _weapons;
  @override
  List<Weapon> get weapons {
    _weapons ??= 
        const fb.ListReader<Weapon>(Weapon.reader).vTableGet(_bc, _bcOffset, 18, null);
    return _weapons;
  }

  EquipmentTypeId _equippedType;
  @override
  EquipmentTypeId get equippedType {
    _equippedType ??= new EquipmentTypeId.fromValue(
        const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 20, null));
    return _equippedType;
  }

  dynamic _equipped;
  @override
  dynamic get equipped {
    switch (equippedType?.value) {
      case 1: return Weapon.reader.vTableGet(_bc, _bcOffset, 22, null);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'Monster{pos: $pos, mana: $mana, hp: $hp, name: $name, inventory: $inventory, color: $color, weapons: $weapons, equippedType: $equippedType, equipped: $equipped}';
  }
}

class _MonsterReader extends fb.TableReader<_MonsterImpl> {
  const _MonsterReader();

  @override
  _MonsterImpl createObject(fb.BufferContext bc, int offset) => 
    new _MonsterImpl(bc, offset);
}

class MonsterBuilder extends fb.BuilderHelper {
  final Vec3Builder _pos;
  final int _mana;
  final int _hp;
  final String _name;
  final List<int> _inventory;
  final Color _color;
  final List<WeaponBuilder> _weapons;
  final EquipmentTypeId _equippedType;
  final dynamic _equipped;

  MonsterBuilder({
    Vec3Builder pos,
    int mana,
    int hp,
    String name,
    List<int> inventory,
    Color color,
    List<WeaponBuilder> weapons,
    EquipmentTypeId equippedType,
    dynamic equipped,
  })
      : _pos = pos,
        _mana = mana,
        _hp = hp,
        _name = name,
        _inventory = inventory,
        _color = color,
        _weapons = weapons,
        _equippedType = equippedType,
        _equipped = equipped;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder, { bool internStrings = false }) {
    assert(fbBuilder != null);
    final int offset_name = fbBuilder.writeString(_name, intern: internStrings);
    final int offset_inventory = _inventory?.isNotEmpty == true
        ? fbBuilder.writeListUint8(_inventory)
        : null;
    final int offset_weapons = _weapons?.isNotEmpty == true
        ? fbBuilder.writeList(_weapons.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;
    final int offset_equipped = _equipped?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (_pos != null) {
      fbBuilder.addStruct(0, _pos.finish(fbBuilder));
    }
    fbBuilder.addInt16(1, _mana);
    fbBuilder.addInt16(2, _hp);
    if (offset_name != null) {
      fbBuilder.addOffset(3, offset_name);
    }
    if (offset_inventory != null) {
      fbBuilder.addOffset(5, offset_inventory);
    }
    fbBuilder.addInt8(6, _color?.value);
    if (offset_weapons != null) {
      fbBuilder.addOffset(7, offset_weapons);
    }
    fbBuilder.addUint8(8, _equippedType?.value);
    if (offset_equipped != null) {
      fbBuilder.addOffset(9, offset_equipped);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes() {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset);
  }
}
/// Weapon
abstract class Weapon {
  String get name;
  int get damage;

  factory Weapon(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Weapon> reader = const _WeaponReader();

}

class _WeaponImpl implements Weapon {
  final fb.BufferContext _bc;
  final int _bcOffset;

  _WeaponImpl(this._bc, this._bcOffset);

  String _name;
  @override
  String get name {
    _name ??= 
        const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
    return _name;
  }

  int _damage;
  @override
  int get damage {
    _damage ??= 
        const fb.Int16Reader().vTableGet(_bc, _bcOffset, 6, null);
    return _damage;
  }

  @override
  String toString() {
    return 'Weapon{name: $name, damage: $damage}';
  }
}

class _WeaponReader extends fb.TableReader<_WeaponImpl> {
  const _WeaponReader();

  @override
  _WeaponImpl createObject(fb.BufferContext bc, int offset) => 
    new _WeaponImpl(bc, offset);
}

class WeaponBuilder extends fb.BuilderHelper {
  final String _name;
  final int _damage;

  WeaponBuilder({
    String name,
    int damage,
  })
      : _name = name,
        _damage = damage;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder, { bool internStrings = false }) {
    assert(fbBuilder != null);
    final int offset_name = fbBuilder.writeString(_name, intern: internStrings);

    fbBuilder.startTable();
    if (offset_name != null) {
      fbBuilder.addOffset(0, offset_name);
    }
    fbBuilder.addInt16(1, _damage);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes() {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset);
  }
}
