# automatically generated by the FlatBuffers compiler, do not modify

# namespace: reflection

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Type(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Type()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def TypeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x46\x42\x53", size_prefixed=size_prefixed)


    @classmethod
    def VerifyType(cls, buf, offset=0, size_prefixed=False):
        return flatbuffers.NewVerifier(buf, offset).VerifyBuffer(b"\x42\x46\x42\x53", size_prefixed, TypeVerify)

    # Type
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type
    def BaseType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Type
    def Element(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Type
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # Type
    def FixedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # The size (octets) of the `base_type` field.
    # Type
    def BaseSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 4

    # The size (octets) of the `element` field, if present.
    # Type
    def ElementSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TypeStart(builder):
    builder.StartObject(6)

def Start(builder):
    TypeStart(builder)

def TypeAddBaseType(builder, baseType):
    builder.PrependInt8Slot(0, baseType, 0)

def AddBaseType(builder, baseType):
    TypeAddBaseType(builder, baseType)

def TypeAddElement(builder, element):
    builder.PrependInt8Slot(1, element, 0)

def AddElement(builder, element):
    TypeAddElement(builder, element)

def TypeAddIndex(builder, index):
    builder.PrependInt32Slot(2, index, -1)

def AddIndex(builder, index):
    TypeAddIndex(builder, index)

def TypeAddFixedLength(builder, fixedLength):
    builder.PrependUint16Slot(3, fixedLength, 0)

def AddFixedLength(builder, fixedLength):
    TypeAddFixedLength(builder, fixedLength)

def TypeAddBaseSize(builder, baseSize):
    builder.PrependUint32Slot(4, baseSize, 4)

def AddBaseSize(builder, baseSize):
    TypeAddBaseSize(builder, baseSize)

def TypeAddElementSize(builder, elementSize):
    builder.PrependUint32Slot(5, elementSize, 0)

def AddElementSize(builder, elementSize):
    TypeAddElementSize(builder, elementSize)

def TypeEnd(builder):
    return builder.EndObject()

def End(builder):
    return TypeEnd(builder)


# Verification function for 'Type' table.
def TypeVerify(verifier, pos):
    result = True
    result = result and verifier.VerifyTableStart(pos)
    result = result and verifier.VerifyField(pos, 4, 1, 1, False)  # field: baseType, type: [int8]
    result = result and verifier.VerifyField(pos, 6, 1, 1, False)  # field: element, type: [int8]
    result = result and verifier.VerifyField(pos, 8, 4, 4, False)  # field: index, type: [int32]
    result = result and verifier.VerifyField(pos, 10, 2, 2, False)  # field: fixedLength, type: [uint16]
    result = result and verifier.VerifyField(pos, 12, 4, 4, False)  # field: baseSize, type: [uint32]
    result = result and verifier.VerifyField(pos, 14, 4, 4, False)  # field: elementSize, type: [uint32]
    result = result and verifier.VerifyTableEnd(pos)
    return result

