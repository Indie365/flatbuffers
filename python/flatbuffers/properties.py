# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# syntactic sugar, more pythonic

from .compat import range_func
from .table import Table
from .number_types import *


class _StructTypeProxy(object):
    """A StructTypeProxy is used to lazy import the dependent type.
    """

    def __init__(self, val_name, val_package):
        """Initializes a proxy with type name and package name."""
        self.val_type = None
        self.val_name = val_name
        self.val_package = val_package

    def get_type(self):
        """Get the real type of this proxy.
        """
        if self.val_type is None:
            val_name = self.val_name
            val_package = self.val_package
            module_name = val_name \
                if val_package is None else val_package + "." + val_name
            module = __import__(module_name,
                                globals(), locals(), [val_name], 0)
            return getattr(module, val_name)
        return self.val_type

    def __call__(self, buf, pos):
        """Create an instance of the real type.
        """
        if self.val_type is None:
            self.val_type = self.get_type()
        obj = self.val_type()
        obj.Init(buf, pos)
        return obj


def _new_scalar_property(scalar_type):
    class ScalarProperty(object):
        """
        A ScalarProperty is an attribute descriptor for the scalar type
        on a `Table`.

        Typically, Property objects will be used from code generated by the
        `flatc` compiler.
        """

        def __init__(self, offset, default=0):
            """
            Initializes a scalar property with access `offset`
            and `default` value.
            """
            self.offset = VOffsetTFlags.py_type(offset)
            self.default = scalar_type.py_type(default)

        def __get__(self, this, cls):
            """Get the attribute of the owner class."""
            if this is None:
                return self
            tab = this._tab
            o = tab.Offset(self.offset)
            if o != 0:
                return tab.Get(scalar_type, o + tab.Pos)
            return self.default

    return ScalarProperty


BoolProperty = _new_scalar_property(BoolFlags)
Uint8Property = _new_scalar_property(Uint8Flags)
Uint16Property = _new_scalar_property(Uint16Flags)
Uint32Property = _new_scalar_property(Uint32Flags)
Uint64Property = _new_scalar_property(Uint64Flags)
Int8Property = _new_scalar_property(Int8Flags)
Int16Property = _new_scalar_property(Int16Flags)
Int32Property = _new_scalar_property(Int32Flags)
Int64Property = _new_scalar_property(Int64Flags)
Float32Property = _new_scalar_property(Float32Flags)
Float64Property = _new_scalar_property(Float64Flags)


def _new_struct_scalar_property(scalar_type):
    class StructScalarProperty(object):
        """
        A StructScalarProperty is an attribute descriptor for the scalar type
        on a `Struct`.

        Typically, Property objects will be used from code generated by the
        `flatc` compiler.
        """

        def __init__(self, offset):
            """Initializes a scalar property with the access `offset`."""
            self.offset = VOffsetTFlags.py_type(offset)

        def __get__(self, this, cls):
            """Get the attribute of the owner class."""
            if this is None:
                return self
            tab = this._tab
            return tab.Get(scalar_type, self.offset + tab.Pos)

    return StructScalarProperty


StructBoolProperty = _new_struct_scalar_property(BoolFlags)
StructUint8Property = _new_struct_scalar_property(Uint8Flags)
StructUint16Property = _new_struct_scalar_property(Uint16Flags)
StructUint32Property = _new_struct_scalar_property(Uint32Flags)
StructUint64Property = _new_struct_scalar_property(Uint64Flags)
StructInt8Property = _new_struct_scalar_property(Int8Flags)
StructInt16Property = _new_struct_scalar_property(Int16Flags)
StructInt32Property = _new_struct_scalar_property(Int32Flags)
StructInt64Property = _new_struct_scalar_property(Int64Flags)
StructFloat32Property = _new_struct_scalar_property(Float32Flags)
StructFloat64Property = _new_struct_scalar_property(Float64Flags)


class StringProperty(object):
    """
    A StringProperty is an attribute descriptor for the string type
    on a `Table`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, offset):
        """Initializes a string property with the access `offset`."""
        self.offset = VOffsetTFlags.py_type(offset)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        o = tab.Offset(self.offset)
        if o != 0:
            return tab.String(o + tab.Pos)
        return ""


class StructProperty(object):
    """
    A StructProperty is an attribute descriptor for the struct or table type
    on a `Table`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, val_name, val_package, offset, val_fixed):
        """Initializes a struct property.
        :param val_name: the subtype name
        :param val_package: the package name of subtype
        :param offset: the access offset
        :param val_fixed: whether the subtype is an fixed struct
        """
        self._val_type_proxy = _StructTypeProxy(val_name, val_package)
        self.offset = VOffsetTFlags.py_type(offset)
        self.val_fixed = bool(val_fixed)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        o = tab.Offset(self.offset)
        if o != 0:
            pos = o + tab.Pos if self.val_fixed else tab.Indirect(o + tab.Pos)
            return self._val_type_proxy(tab.Bytes, pos)
        return None

    def __getitem__(self, name):
        """Get specified property of the subtype."""
        return getattr(self._val_type_proxy.get_type(), name)

    def build(self, builder, v, alignment):
        """Build a struct.
        :param builder: `Builder` instance
        :param v: struct instance
        :param alignment: alignment on struct
        """
        val_type = self._val_type_proxy.get_type()
        return val_type.CreateObject(builder, v)


class StructStructProperty(object):
    """
    A StructStructProperty is an attribute descriptor for the struct type
    on a `Struct`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, val_name, val_package, offset):
        """Initializes a struct property.
        :param val_name: the subtype name
        :param val_package: the package name of subtype
        :param offset: the access offset
        """
        self._val_type_proxy = _StructTypeProxy(val_name, val_package)
        self.offset = VOffsetTFlags.py_type(offset)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        return self._val_type_proxy(tab.Bytes, self.offset + tab.Pos)

    def __getitem__(self, name):
        """Get specified property of the subtype."""
        return getattr(self._val_type_proxy.get_type(), name)


class UnionProperty(object):
    """
    An UnionProperty is an attribute descriptor for the union type
    on a `Table`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, offset):
        """Initializes an union property with the access `offset`."""
        self.offset = VOffsetTFlags.py_type(offset)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        o = tab.Offset(self.offset)
        if o != 0:
            obj = Table(bytearray(), 0)
            tab.Union(obj, o)
            return obj
        return None


def _new_vector_scalar_property(scalar_type):
    byte_width = scalar_type.bytewidth

    class VectorScalarProperty(object):
        """
        A VectorScalarProperty is an attribute descriptor for the [scalar] type
        on a `Table`.

        Typically, Property objects will be used from code generated by the
        `flatc` compiler.
        """

        def __init__(self, offset):
            """
            Initializes a vector property of scalar with the access `offset`.
            """
            self.offset = VOffsetTFlags.py_type(offset)

        def __get__(self, this, cls):
            """Get the attribute of the owner class."""
            if this is None:
                return self
            tab = this._tab
            o = tab.Offset(self.offset)
            if o != 0:
                a = tab.Vector(o)
                s = tab.VectorLen(o)
                return (tab.Get(scalar_type, a + j * byte_width)
                        for j in range_func(s))
            return ()

        def build(self, builder, v, alignment):
            """Build a vector of scalar.
            :param builder: `Builder` instance
            :param v: the list of scalar
            :param alignment: alignment on table
            """
            s = len(v)
            builder.StartVector(byte_width, s, alignment)
            for x in v:
                builder.Prepend(scalar_type, x)
            return builder.EndVector(s)

    return VectorScalarProperty


VectorBoolProperty = _new_vector_scalar_property(BoolFlags)
VectorUint8Property = _new_vector_scalar_property(Uint8Flags)
VectorUint16Property = _new_vector_scalar_property(Uint16Flags)
VectorUint32Property = _new_vector_scalar_property(Uint32Flags)
VectorUint64Property = _new_vector_scalar_property(Uint64Flags)
VectorInt8Property = _new_vector_scalar_property(Int8Flags)
VectorInt16Property = _new_vector_scalar_property(Int16Flags)
VectorInt32Property = _new_vector_scalar_property(Int32Flags)
VectorInt64Property = _new_vector_scalar_property(Int64Flags)
VectorFloat32Property = _new_vector_scalar_property(Float32Flags)
VectorFloat64Property = _new_vector_scalar_property(Float64Flags)


class VectorStringProperty(object):
    """
    A VectorStringProperty is an attribute descriptor for the [string] type
    on a `Table`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, offset):
        """
        Initializes a vector property of scalar with the access `offset`.
        """
        self.offset = VOffsetTFlags.py_type(offset)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        o = tab.Offset(self.offset)
        if o != 0:
            a = tab.Vector(o)
            s = tab.VectorLen(o)
            return (tab.String(a + j * 4) for j in range_func(s))
        return ()

    def build(self, builder, v, alignment):
        """Build a vector of string.
        :param builder: `Builder` instance
        :param v: the list of string
        :param alignment: alignment on table
        """
        s = len(v)
        builder.StartVector(4, s, alignment)
        for o in [builder.CreateString(x) for x in v]:
            builder.PrependUOffsetTRelative(o)
        return builder.EndVector(s)


class VectorStructProperty(object):
    """
    A VectorStructProperty is an attribute descriptor for the [struct] type
    on a `Table`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, val_name, val_package, offset, val_fixed):
        """Initializes a vector property of struct.
        :param val_name: the subtype name
        :param val_package: the package name of subtype
        :param offset: the access offset
        :param val_fixed: whether the subtype is an fixed struct
        """
        self._val_type_proxy = _StructTypeProxy(val_name, val_package)
        self.offset = VOffsetTFlags.py_type(offset)
        self.val_fixed = bool(val_fixed)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        o = tab.Offset(self.offset)
        if o != 0:
            val_type = self._val_type_proxy
            val_fixed = self.val_fixed

            a = tab.Vector(o)
            s = tab.VectorLen(o)
            return (val_type(tab.Bytes, a + j * 4
                             if val_fixed else tab.Indirect(a + j * 4))
                    for j in range_func(s))
        return ()

    def __getitem__(self, name):
        """Get specified property of the subtype."""
        return getattr(self._val_type_proxy.get_type(), name)

    def build(self, builder, v, alignment):
        """Build a vector of struct.
        :param builder: `Builder` instance
        :param v: the list of struct
        :param alignment: alignment on table
        """
        val_type = self._val_type_proxy.get_type()

        s = len(v)
        builder.StartVector(4, s, alignment)
        for x in v:
            val_type.CreateObject(builder, x)
        return builder.EndVector(s)


class VectorLengthProperty(object):
    """
    A VectorLengthProperty is an length attribute descriptor for the vector type
    on a `Table`.

    Typically, Property objects will be used from code generated by the
    `flatc` compiler.
    """

    def __init__(self, offset):
        """
        Initializes a length property of vector with the access `offset`.
        """
        self.offset = VOffsetTFlags.py_type(offset)

    def __get__(self, this, cls):
        """Get the attribute of the owner class."""
        if this is None:
            return self
        tab = this._tab
        o = tab.Offset(self.offset)
        if o != 0:
            return tab.VectorLen(o)
        return 0

