// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GOLDEN_H_
#define FLATBUFFERS_GENERATED_GOLDEN_H_

#include "flatbuffers/flatbuffers.h"

struct GoldenBase;
struct GoldenBaseBuilder;

struct GoldenBase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GoldenBaseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A = 4
  };
  int32_t a() const {
    return GetField<int32_t>(VT_A, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_A) &&
           verifier.EndTable();
  }
};

struct GoldenBaseBuilder {
  typedef GoldenBase Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(int32_t a) {
    fbb_.AddElement<int32_t>(GoldenBase::VT_A, a, 0);
  }
  explicit GoldenBaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GoldenBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GoldenBase>(end);
    return o;
  }
};

inline flatbuffers::Offset<GoldenBase> CreateGoldenBase(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t a = 0) {
  GoldenBaseBuilder builder_(_fbb);
  builder_.add_a(a);
  return builder_.Finish();
}

inline const GoldenBase *GetGoldenBase(const void *buf) {
  return flatbuffers::GetRoot<GoldenBase>(buf);
}

inline const GoldenBase *GetSizePrefixedGoldenBase(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GoldenBase>(buf);
}

inline const char *GoldenBaseIdentifier() {
  return "GOLD";
}

inline bool GoldenBaseBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, GoldenBaseIdentifier());
}

inline bool VerifyGoldenBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GoldenBase>(GoldenBaseIdentifier());
}

inline bool VerifySizePrefixedGoldenBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GoldenBase>(GoldenBaseIdentifier());
}

inline const char *GoldenBaseExtension() {
  return "gol";
}

inline void FinishGoldenBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GoldenBase> root) {
  fbb.Finish(root, GoldenBaseIdentifier());
}

inline void FinishSizePrefixedGoldenBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GoldenBase> root) {
  fbb.FinishSizePrefixed(root, GoldenBaseIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_GOLDEN_H_
