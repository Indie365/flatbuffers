-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: 

local flatbuffers = require('flatbuffers')

local GoldenBase = {} -- the module
local GoldenBase_mt = {} -- the class metatable

function GoldenBase.New()
    local o = {}
    setmetatable(o, {__index = GoldenBase_mt})
    return o
end
function GoldenBase.GetRootAsGoldenBase(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = GoldenBase.New()
    o:Init(buf, n + offset)
    return o
end
function GoldenBase_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function GoldenBase_mt:A()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function GoldenBase.Start(builder) builder:StartObject(1) end
function GoldenBase.AddA(builder, a) builder:PrependInt32Slot(0, a, 0) end
function GoldenBase.End(builder) return builder:EndObject() end

return GoldenBase -- return the module